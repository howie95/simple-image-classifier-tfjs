(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{3:function(e,t){},"34t7":function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return l}).call(t,n,t,s))||(s.exports=r):this.xorwow=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},4:function(e,t){},5:function(e,t){},"5vwH":function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n=s[a]=(n^=n>>>15)^(e^=e>>>12),t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,i,o=[],l=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,l=Math.max(l,t.length)),s=0,a=-32;a<l;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(s=0==(n=o[127&a]^=r+(i=i+1640531527|0))?s+1:0);for(s>=128&&(o[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,o[s]=(r^=r>>>15)^(n^=n>>>12);e.w=i,e.X=o,e.i=s}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return l}).call(t,n,t,s))||(s.exports=r):this.xor4096=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},6:function(e,t){},7:function(e,t){},8:function(e,t){},"9/Hw":function(e,t,n){var r;!function(s,a){var i,o=this,l=256,u=a.pow(l,6),c=a.pow(2,52),h=2*c,p=255;function d(e,t,n){var r=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(s)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),b(e)}catch(r){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,b(s)]}}():e,3),r),d=new f(r),x=function(){for(var e=d.g(6),t=u,n=0;e<c;)e=(e+n)*l,t*=l,n=d.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|d.g(4)},x.quick=function(){return d.g(4)/4294967296},x.double=x,y(b(d.S),s),(t.pass||n||function(e,t,n,r){return r&&(r.S&&m(r,d),e.state=function(){return m(d,{})}),n?(a.random=e,t):e})(x,p,"global"in t?t.global:this==a,t.state)}function f(e){var t,n=e.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);s<l;)i[s]=s++;for(s=0;s<l;s++)i[s]=i[a=p&a+e[s%n]+(t=i[s])],i[a]=t;(r.g=function(e){for(var t,n=0,s=r.i,a=r.j,i=r.S;e--;)t=i[s=p&s+1],n=n*l+i[p&(i[s]=i[a=p&a+t])+(i[a]=t)];return r.i=s,r.j=a,n})(l)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(g(e[n],t-1))}catch(a){}return r.length?r:"string"==s?e:e+"\0"}function y(e,t){for(var n,r=e+"",s=0;s<r.length;)t[p&s]=p&(n^=19*t[p&s])+r.charCodeAt(s++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(a.seedrandom=d,y(a.random(),s),e.exports){e.exports=d;try{i=n(5)}catch(x){}}else void 0===(r=(function(){return d}).call(t,n,t,e))||(e.exports=r)}([],Math)},B9Yq:function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},EhIR:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var n=new i(e),r=t&&t.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return l}).call(t,n,t,s))||(s.exports=r):this.alea=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},PDX0:function(e,t){(function(t){e.exports=t}).call(this,{})},PkQR:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],r[s]=n^=(e^=e<<13)^e<<9,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n&&(r[7]=-1),e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return l}).call(t,n,t,s))||(s.exports=r):this.xorshift7=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},YSVl:function(e,t,n){var r=n("EhIR"),s=n("uDiL"),a=n("pJ6O"),i=n("yuCN"),o=n("euyF"),l=n("ie1u"),u=n("pJ3+");u.alea=r,u.xor128=s,u.xorwow=a,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},YWYm:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var n=new i(e),r=t&&t.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return l}).call(t,n,t,s))||(s.exports=r):this.alea=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},YuTi:function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},euyF:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n=s[a]=(n^=n>>>15)^(e^=e>>>12),t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,i,o=[],l=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,l=Math.max(l,t.length)),s=0,a=-32;a<l;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(s=0==(n=o[127&a]^=r+(i=i+1640531527|0))?s+1:0);for(s>=128&&(o[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,o[s]=(r^=r>>>15)^(n^=n>>>12);e.w=i,e.X=o,e.i=s}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return l}).call(t,n,t,s))||(s.exports=r):this.xor4096=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},"f+t/":function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return l}).call(t,n,t,s))||(s.exports=r):this.xor128=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},ie1u:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return l}).call(t,n,t,s))||(s.exports=r):this.tychei=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},jGla:function(e,t,n){"use strict";n.r(t),n.d(t,"LearnPrepareModule",function(){return nO}),n.d(t,"LearnPlayingModule",function(){return rO});var r={};n.r(r),n.d(r,"shuffle",function(){return W}),n.d(r,"clamp",function(){return V}),n.d(r,"nearestLargerEven",function(){return U}),n.d(r,"sum",function(){return G}),n.d(r,"randUniform",function(){return H}),n.d(r,"distSquared",function(){return j}),n.d(r,"assert",function(){return q}),n.d(r,"assertShapesMatch",function(){return K}),n.d(r,"assertNonNull",function(){return X}),n.d(r,"flatten",function(){return Y}),n.d(r,"sizeFromShape",function(){return J}),n.d(r,"isScalarShape",function(){return Z}),n.d(r,"arraysEqual",function(){return Q}),n.d(r,"isInt",function(){return ee}),n.d(r,"tanh",function(){return te}),n.d(r,"sizeToSquarishShape",function(){return ne}),n.d(r,"createShuffledIndices",function(){return re}),n.d(r,"rightPad",function(){return se}),n.d(r,"repeatedTry",function(){return ae}),n.d(r,"inferFromImplicitShape",function(){return ie}),n.d(r,"parseAxisParam",function(){return oe}),n.d(r,"squeezeShape",function(){return le}),n.d(r,"getTypedArrayFromDType",function(){return ue}),n.d(r,"getArrayFromDType",function(){return ce}),n.d(r,"checkConversionForErrors",function(){return he}),n.d(r,"isValidDtype",function(){return pe}),n.d(r,"hasEncodingLoss",function(){return de}),n.d(r,"isTypedArray",function(){return fe}),n.d(r,"bytesPerElement",function(){return me}),n.d(r,"bytesFromStringArray",function(){return ge}),n.d(r,"isString",function(){return ye}),n.d(r,"isBoolean",function(){return be}),n.d(r,"isNumber",function(){return xe}),n.d(r,"inferDtype",function(){return we}),n.d(r,"isFunction",function(){return ke}),n.d(r,"nearestDivisor",function(){return ve}),n.d(r,"computeStrides",function(){return Ie}),n.d(r,"toNestedArray",function(){return Se}),n.d(r,"makeOnesTypedArray",function(){return Ce}),n.d(r,"makeZerosTypedArray",function(){return Te}),n.d(r,"makeZerosNestedTypedArray",function(){return $e}),n.d(r,"assertNonNegativeIntegerDimensions",function(){return Ee}),n.d(r,"locToIndex",function(){return Ae}),n.d(r,"indexToLoc",function(){return Re}),n.d(r,"isPromise",function(){return Fe}),n.d(r,"createScalarValue",function(){return Kr}),n.d(r,"toTypedArray",function(){return Xr}),n.d(r,"now",function(){return Yr}),n.d(r,"fetch",function(){return Jr}),n.d(r,"encodeString",function(){return Zr}),n.d(r,"decodeString",function(){return Qr});var s={};n.r(s),n.d(s,"makeTypesMatch",function(){return fs}),n.d(s,"assertTypesMatch",function(){return ms}),n.d(s,"isTensorInList",function(){return gs}),n.d(s,"getTensorsInContainer",function(){return ys});var a={};n.r(a),n.d(a,"isMobile",function(){return Ns}),n.d(a,"isBrowser",function(){return Ss});var i={};n.r(i),n.d(i,"copyModel",function(){return Ia}),n.d(i,"listModels",function(){return ka}),n.d(i,"moveModel",function(){return Na}),n.d(i,"removeModel",function(){return va}),n.d(i,"browserFiles",function(){return Da}),n.d(i,"browserHTTPRequest",function(){return Va}),n.d(i,"concatenateArrayBuffers",function(){return Vs}),n.d(i,"decodeWeights",function(){return zs}),n.d(i,"encodeWeights",function(){return Ls}),n.d(i,"fromMemory",function(){return Ha}),n.d(i,"getLoadHandlers",function(){return Ys}),n.d(i,"getModelArtifactsInfoForJSON",function(){return Gs}),n.d(i,"getSaveHandlers",function(){return Xs}),n.d(i,"http",function(){return Wa}),n.d(i,"isHTTPScheme",function(){return Pa}),n.d(i,"loadWeights",function(){return Ma}),n.d(i,"registerLoadRouter",function(){return Ks}),n.d(i,"registerSaveRouter",function(){return qs}),n.d(i,"weightsLoaderFactory",function(){return La}),n.d(i,"withSaveHandler",function(){return ja});var o={};n.r(o),n.d(o,"toPixels",function(){return Ka}),n.d(o,"fromPixels",function(){return Xa});var l={};n.r(l),n.d(l,"assertParamsValid",function(){return Ya}),n.d(l,"maskToAxes",function(){return Ja}),n.d(l,"computeOutShape",function(){return Za}),n.d(l,"stridesWithElidedDims",function(){return Qa}),n.d(l,"getNormalizedAxes",function(){return ni}),n.d(l,"startIndicesWithElidedDims",function(){return ri}),n.d(l,"stopIndicesWithElidedDims",function(){return si}),n.d(l,"stridesForAxis",function(){return ai}),n.d(l,"startForAxis",function(){return ii}),n.d(l,"stopForAxis",function(){return oi}),n.d(l,"isSliceContinous",function(){return li}),n.d(l,"computeFlatOffset",function(){return ui}),n.d(l,"parseSliceParams",function(){return ci}),n.d(l,"sliceInfo",function(){return hi});var u={};n.r(u),n.d(u,"Serializable",function(){return pi}),n.d(u,"SerializationMap",function(){return di}),n.d(u,"registerClass",function(){return fi});var c={};n.r(c),n.d(c,"conv2d",function(){return Yl}),n.d(c,"depthwiseConv2d",function(){return Ql}),n.d(c,"matMul",function(){return tu});var h={};n.r(h),n.d(h,"segOpComputeOptimalWindowSize",function(){return wc}),n.d(h,"computeOutShape",function(){return kc}),n.d(h,"collectGatherOpShapeInfo",function(){return vc});var p={};n.r(p),n.d(p,"axesAreInnerMostDims",function(){return Po}),n.d(p,"combineLocations",function(){return Bo}),n.d(p,"computeOutAndReduceShapes",function(){return Wo}),n.d(p,"expandShapeToKeepDim",function(){return Vo}),n.d(p,"assertAxesAreInnerMostDims",function(){return Uo}),n.d(p,"getAxesPermutation",function(){return Go}),n.d(p,"getUndoAxesPermutation",function(){return Ho}),n.d(p,"getInnerMostAxes",function(){return jo}),n.d(p,"getBroadcastDims",function(){return ho}),n.d(p,"getReductionAxes",function(){return po}),n.d(p,"assertAndGetBroadcastShape",function(){return fo}),n.d(p,"assertParamsConsistent",function(){return Wu}),n.d(p,"computeOutShape",function(){return Vu}),n.d(p,"computeDilation2DInfo",function(){return Ai}),n.d(p,"computePool2DInfo",function(){return Ri}),n.d(p,"computePool3DInfo",function(){return Fi}),n.d(p,"computeConv2DInfo",function(){return Di}),n.d(p,"computeConv3DInfo",function(){return _i}),n.d(p,"computeDefaultPad",function(){return Oi}),n.d(p,"tupleValuesAreOne",function(){return Bi}),n.d(p,"eitherStridesOrDilationsAreOne",function(){return Wi}),n.d(p,"convertConv2DDataFormat",function(){return Vi}),n.d(p,"getFusedDyActivation",function(){return jl}),n.d(p,"getFusedBiasGradient",function(){return ql}),n.d(p,"applyActivation",function(){return Kl}),n.d(p,"shouldFuse",function(){return Xl}),n.d(p,"PARALLELIZE_THRESHOLD",function(){return Uu}),n.d(p,"computeOptimalWindowSize",function(){return Gu}),n.d(p,"slice_util",function(){return l}),n.d(p,"upcastType",function(){return ps}),n.d(p,"getImageCenter",function(){return Hu}),n.d(p,"getReshaped",function(){return ju}),n.d(p,"getPermuted",function(){return qu}),n.d(p,"getReshapedPermuted",function(){return Ku}),n.d(p,"getSliceBeginCoords",function(){return Xu}),n.d(p,"getSliceSize",function(){return Yu}),n.d(p,"prepareAndValidate",function(){return Ju}),n.d(p,"validateUpdateShape",function(){return Zu}),n.d(p,"validateInput",function(){return Qu}),n.d(p,"calculateShapes",function(){return ec}),n.d(p,"SELU_SCALEALPHA",function(){return tc}),n.d(p,"SELU_SCALE",function(){return nc}),n.d(p,"ERF_P",function(){return rc}),n.d(p,"ERF_A1",function(){return sc}),n.d(p,"ERF_A2",function(){return ac}),n.d(p,"ERF_A3",function(){return ic}),n.d(p,"ERF_A4",function(){return oc}),n.d(p,"ERF_A5",function(){return lc}),n.d(p,"warn",function(){return uc}),n.d(p,"log",function(){return cc}),n.d(p,"mergeRealAndImagArrays",function(){return hc}),n.d(p,"splitRealAndImagArrays",function(){return pc}),n.d(p,"complexWithEvenIndex",function(){return dc}),n.d(p,"complexWithOddIndex",function(){return fc}),n.d(p,"getComplexWithIndex",function(){return mc}),n.d(p,"assignToTypedArray",function(){return gc}),n.d(p,"exponents",function(){return yc}),n.d(p,"exponent",function(){return bc}),n.d(p,"prepareSplitSize",function(){return xc}),n.d(p,"segment_util",function(){return h}),n.d(p,"castTensor",function(){return Ic}),n.d(p,"reshapeTensor",function(){return Nc}),n.d(p,"fromUint8ToStringArray",function(){return Sc}),n.d(p,"fromStringArrayToUint8",function(){return Cc});var d={};n.r(d),n.d(d,"nonMaxSuppressionV3Impl",function(){return lu}),n.d(d,"nonMaxSuppressionV4Impl",function(){return uu}),n.d(d,"nonMaxSuppressionV5Impl",function(){return cu}),n.d(d,"whereImpl",function(){return Tc});var f={};n.r(f),n.d(f,"inputLayer",function(){return Ub}),n.d(f,"elu",function(){return Gb}),n.d(f,"reLU",function(){return Hb}),n.d(f,"leakyReLU",function(){return jb}),n.d(f,"prelu",function(){return qb}),n.d(f,"softmax",function(){return Kb}),n.d(f,"thresholdedReLU",function(){return Xb}),n.d(f,"conv1d",function(){return Yb}),n.d(f,"conv2d",function(){return Jb}),n.d(f,"conv2dTranspose",function(){return Zb}),n.d(f,"conv3d",function(){return Qb}),n.d(f,"separableConv2d",function(){return ex}),n.d(f,"cropping2D",function(){return tx}),n.d(f,"upSampling2d",function(){return nx}),n.d(f,"depthwiseConv2d",function(){return rx}),n.d(f,"activation",function(){return sx}),n.d(f,"dense",function(){return ax}),n.d(f,"dropout",function(){return ix}),n.d(f,"spatialDropout1d",function(){return ox}),n.d(f,"flatten",function(){return lx}),n.d(f,"repeatVector",function(){return ux}),n.d(f,"reshape",function(){return cx}),n.d(f,"permute",function(){return hx}),n.d(f,"embedding",function(){return px}),n.d(f,"add",function(){return dx}),n.d(f,"average",function(){return fx}),n.d(f,"concatenate",function(){return mx}),n.d(f,"maximum",function(){return gx}),n.d(f,"minimum",function(){return yx}),n.d(f,"multiply",function(){return bx}),n.d(f,"dot",function(){return xx}),n.d(f,"batchNormalization",function(){return wx}),n.d(f,"layerNormalization",function(){return kx}),n.d(f,"zeroPadding2d",function(){return vx}),n.d(f,"averagePooling1d",function(){return Ix}),n.d(f,"avgPool1d",function(){return Nx}),n.d(f,"avgPooling1d",function(){return Sx}),n.d(f,"averagePooling2d",function(){return Cx}),n.d(f,"avgPool2d",function(){return Tx}),n.d(f,"avgPooling2d",function(){return $x}),n.d(f,"averagePooling3d",function(){return Ex}),n.d(f,"avgPool3d",function(){return Ax}),n.d(f,"avgPooling3d",function(){return Rx}),n.d(f,"globalAveragePooling1d",function(){return Fx}),n.d(f,"globalAveragePooling2d",function(){return Dx}),n.d(f,"globalMaxPooling1d",function(){return _x}),n.d(f,"globalMaxPooling2d",function(){return Ox}),n.d(f,"maxPooling1d",function(){return Mx}),n.d(f,"maxPooling2d",function(){return Lx}),n.d(f,"maxPooling3d",function(){return zx}),n.d(f,"gru",function(){return Px}),n.d(f,"gruCell",function(){return Bx}),n.d(f,"lstm",function(){return Wx}),n.d(f,"lstmCell",function(){return Vx}),n.d(f,"simpleRNN",function(){return Ux}),n.d(f,"simpleRNNCell",function(){return Gx}),n.d(f,"convLstm2d",function(){return Hx}),n.d(f,"convLstm2dCell",function(){return jx}),n.d(f,"rnn",function(){return qx}),n.d(f,"stackedRNNCells",function(){return Kx}),n.d(f,"bidirectional",function(){return Xx}),n.d(f,"timeDistributed",function(){return Yx}),n.d(f,"globalMaxPool1d",function(){return Jx}),n.d(f,"globalMaxPool2d",function(){return Zx}),n.d(f,"maxPool1d",function(){return Qx}),n.d(f,"maxPool2d",function(){return ew}),n.d(f,"Layer",function(){return Tm}),n.d(f,"RNN",function(){return zy}),n.d(f,"RNNCell",function(){return Py}),n.d(f,"input",function(){return Ug}),n.d(f,"gaussianNoise",function(){return tw}),n.d(f,"gaussianDropout",function(){return nw}),n.d(f,"alphaDropout",function(){return rw}),n.d(f,"masking",function(){return sw});var m={};n.r(m),n.d(m,"json",function(){return ow});var g={};n.r(g),n.d(g,"json",function(){return lw});var y={};n.r(y),n.d(y,"json",function(){return uw});var b={};n.r(b),n.d(b,"json",function(){return cw});var x={};n.r(x),n.d(x,"json",function(){return hw});var w={};n.r(w),n.d(w,"json",function(){return pw});var k={};n.r(k),n.d(k,"json",function(){return dw});var v={};n.r(v),n.d(v,"json",function(){return fw});var I={};n.r(I),n.d(I,"json",function(){return mw});var N={};n.r(N),n.d(N,"json",function(){return gw});var S={};n.r(S),n.d(S,"json",function(){return yw});var C={};n.r(C),n.d(C,"json",function(){return bw});var T={};n.r(T),n.d(T,"json",function(){return xw});var $={};n.r($),n.d($,"json",function(){return ww});var E={};n.r(E),n.d(E,"json",function(){return kw});var A={};n.r(A),n.d(A,"json",function(){return vw});var R={};n.r(R),n.d(R,"json",function(){return Iw});var F={};n.r(F),n.d(F,"simpleAbsImpl",function(){return zk}),n.d(F,"addImpl",function(){return Ek}),n.d(F,"bincountImpl",function(){return kv}),n.d(F,"bincountReduceImpl",function(){return vv}),n.d(F,"ceilImpl",function(){return Sv}),n.d(F,"concatImpl",function(){return Rv}),n.d(F,"expImpl",function(){return yI}),n.d(F,"expm1Impl",function(){return vI}),n.d(F,"floorImpl",function(){return UI}),n.d(F,"gatherV2Impl",function(){return ZI}),n.d(F,"greaterImpl",function(){return eN}),n.d(F,"lessImpl",function(){return dN}),n.d(F,"linSpaceImpl",function(){return xN}),n.d(F,"logImpl",function(){return kN}),n.d(F,"maxImpl",function(){return MN}),n.d(F,"maximumImpl",function(){return PN}),n.d(F,"minimumImpl",function(){return JN}),n.d(F,"multiplyImpl",function(){return SI}),n.d(F,"negImpl",function(){return oS}),n.d(F,"notEqualImpl",function(){return mS}),n.d(F,"prodImpl",function(){return $S}),n.d(F,"rangeImpl",function(){return AS}),n.d(F,"rsqrtImpl",function(){return VS}),n.d(F,"sliceImpl",function(){return yv}),n.d(F,"squaredDifferenceImpl",function(){return mC}),n.d(F,"stridedSliceImpl",function(){return wC}),n.d(F,"subImpl",function(){return FI}),n.d(F,"tileImpl",function(){return SC}),n.d(F,"topKImpl",function(){return CC}),n.d(F,"transposeImpl",function(){return Hk}),n.d(F,"uniqueImpl",function(){return TC});var D=n("ofXK"),_=n("tyNb");function O(e,t,n,r){return new(n||(n=Promise))(function(s,a){function i(e){try{l(r.next(e))}catch(t){a(t)}}function o(e){try{l(r.throw(e))}catch(t){a(t)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(i,o)}l((r=r.apply(e,t||[])).next())})}var M=n("fXoL"),L=n("LRne");class z{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class P{time(e){return B("time")}read(e){return B("read")}readSync(e){return B("readSync")}numDataIds(){return B("numDataIds")}disposeData(e){return B("disposeData")}write(e,t,n){return B("write")}move(e,t,n,r){return B("move")}memory(){return B("memory")}floatPrecision(){return B("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(e,t,n,r){return B("batchMatMul")}fusedBatchMatMul({}){return B("fusedBatchMatMul")}slice(e,t,n){return B("slice")}stridedSlice(e,t,n,r){return B("stridedSlice")}unstack(e,t){return B("unstack")}reverse(e,t){return B("reverse")}concat(e,t){return B("concat")}neg(e){return B("neg")}add(e,t){return B("add")}addN(e){return B("addN")}subtract(e,t){return B("subtract")}multiply(e,t){return B("multiply")}realDivide(e,t){return B("realDivide")}floorDiv(e,t){return B("floorDiv")}sum(e,t){return B("sum")}prod(e,t){return B("prod")}unsortedSegmentSum(e,t,n){return B("unsortedSegmentSum")}argMin(e,t){return B("argMin")}argMax(e,t){return B("argMax")}equal(e,t){return B("equal")}notEqual(e,t){return B("notEqual")}less(e,t){return B("less")}lessEqual(e,t){return B("lessEqual")}greater(e,t){return B("greater")}greaterEqual(e,t){return B("greaterEqual")}logicalNot(e){return B("logicalNot")}logicalAnd(e,t){return B("logicalAnd")}logicalOr(e,t){return B("logicalOr")}where(e){return B("where")}select(e,t,n){return B("select")}topk(e,t,n){return B("topk")}min(e,t){return B("min")}minimum(e,t){return B("minimum")}mod(e,t){return B("mod")}max(e,t){return B("max")}maximum(e,t){return B("maximum")}all(e,t){return B("all")}any(e,t){return B("any")}squaredDifference(e,t){return B("squaredDifference")}ceil(e){return B("ceil")}floor(e){return B("floor")}round(e){return B("round")}sign(e){return B("sign")}isNaN(e){return B("isNaN")}isInf(e){return B("isInf")}isFinite(e){return B("isFinite")}pow(e,t){return B("pow")}exp(e){return B("exp")}expm1(e){return B("expm1")}softmax(e,t){return B("softmax")}log(e){return B("log")}log1p(e){return B("log1p")}sqrt(e){return B("sqrt")}rsqrt(e){return B("rsqrt")}square(e){return B("square")}reciprocal(e){return B("reciprocal")}relu(e){return B("relu")}relu6(e){return B("relu6")}prelu(e,t){return B("prelu")}elu(e){return B("elu")}eluDer(e,t){return B("eluDer")}selu(e){return B("selu")}int(e){return B("int")}clip(e,t,n){return B("clip")}abs(e){return B("abs")}complexAbs(e){return B("complexAbs")}sigmoid(e){return B("sigmoid")}softplus(e){return B("softplus")}sin(e){return B("sin")}cos(e){return B("cos")}tan(e){return B("tan")}asin(e){return B("asin")}acos(e){return B("acos")}atan(e){return B("atan")}atan2(e,t){return B("atan2")}sinh(e){return B("sinh")}cosh(e){return B("cosh")}tanh(e){return B("tanh")}asinh(e){return B("asinh")}acosh(e){return B("acosh")}atanh(e){return B("atanh")}erf(e){return B("erf")}step(e,t){return B("step")}fusedConv2d({}){return B("fusedConv2d")}conv2d(e,t,n){return B("conv2d")}conv2dDerInput(e,t,n){return B("conv2dDerInput")}conv2dDerFilter(e,t,n){return B("conv2dDerFilter")}fusedDepthwiseConv2D({}){return B("fusedDepthwiseConv2D")}depthwiseConv2D(e,t,n){return B("depthwiseConv2D")}depthwiseConv2DDerInput(e,t,n){return B("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(e,t,n){return B("depthwiseConv2DDerFilter")}conv3d(e,t,n){return B("conv3d")}conv3dDerInput(e,t,n){return B("conv3dDerInput")}conv3dDerFilter(e,t,n){return B("conv3dDerFilter")}maxPool(e,t){return B("maxPool")}maxPoolBackprop(e,t,n,r){return B("maxPoolBackprop")}avgPool(e,t){return B("avgPool")}avgPoolBackprop(e,t,n){return B("avgPoolBackprop")}avgPool3d(e,t){return B("avgPool3d")}avgPool3dBackprop(e,t,n){return B("avgPool3dBackprop")}maxPool3d(e,t){return B("maxPool3d")}maxPool3dBackprop(e,t,n,r){return B("maxPool3dBackprop")}reshape(e,t){return B("reshape")}cast(e,t){return B("cast")}tile(e,t){return B("tile")}pad(e,t,n){return B("pad")}transpose(e,t){return B("transpose")}gather(e,t,n,r=0){return B("gather")}gatherND(e,t){return B("gatherND")}scatterND(e,t,n){return B("scatterND")}batchToSpaceND(e,t,n){return B("batchToSpaceND")}spaceToBatchND(e,t,n){return B("spaceToBatchND")}resizeBilinear(e,t,n,r,s){return B("resizeBilinear")}resizeBilinearBackprop(e,t,n){return B("resizeBilinearBackprop")}resizeNearestNeighbor(e,t,n,r,s){return B("resizeNearestNeighbor")}resizeNearestNeighborBackprop(e,t,n){return B("resizeNearestNeighborBackprop")}batchNorm(e,t,n,r,s,a){return B("batchNorm")}localResponseNormalization4D(e,t,n,r,s){return B("localResponseNormalization4D")}LRNGrad(e,t,n,r,s,a,i){return B("LRNGrad")}multinomial(e,t,n,r){return B("multinomial")}oneHot(e,t,n,r){return B("oneHot")}cumsum(e,t,n,r){return B("cumsum")}nonMaxSuppression(e,t,n,r,s){return B("nonMaxSuppression")}fft(e){return B("fft")}ifft(e){return B("ifft")}complex(e,t){return B("complex")}real(e){return B("real")}imag(e){return B("imag")}cropAndResize(e,t,n,r,s,a){return B("cropAndResize")}depthToSpace(e,t,n){return B("depthToSpace")}split(e,t,n){return B("split")}sparseToDense(e,t,n,r){return B("sparseToDense")}diag(e){return B("diag")}fill(e,t,n){return B("fill")}onesLike(e){return B("onesLike")}zerosLike(e){return B("zerosLike")}linspace(e,t,n){return B("linspace")}dispose(){return B("dispose")}}function B(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function W(e){let t=e.length,n=0,r=0;for(;t>0;)r=Math.random()*t|0,t--,n=e[t],e[t]=e[r],e[r]=n}function V(e,t,n){return Math.max(e,Math.min(t,n))}function U(e){return e%2==0?e:e+1}function G(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function H(e,t){const n=Math.random();return t*n+(1-n)*e}function j(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function q(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function K(e,t,n=""){q(Q(e,t),()=>n+` Shapes ${e} and ${t} must match`)}function X(e){q(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function Y(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||fe(e)&&!n)for(let r=0;r<e.length;++r)Y(e[r],t,n);else t.push(e);return t}function J(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function Z(e){return 0===e.length}function Q(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function ee(e){return e%1==0}function te(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function ne(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function re(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return W(t),t}function se(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function ae(e,t=(e=>0),n){return new Promise((r,s)=>{let a=0;const i=()=>{if(e())return void r();a++;const o=t(a);null!=n&&a>=n?s():setTimeout(i,o)};i()})}function ie(e,t){let n=1,r=-1;for(let a=0;a<e.length;++a)if(e[a]>=0)n*=e[a];else if(-1===e[a]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${a}`);r=a}else if(e[a]<0)throw Error(`Shapes can not be < 0. Found ${e[a]} at dim ${a}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function oe(e,t){const n=t.length;return q((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+e),q(e.every(e=>ee(e)),()=>"All values in axis param must be integers but got axis "+e),e.map(e=>e<0?n+e:e)}function le(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:oe(t,e).sort();let i=0;for(let o=0;o<e.length;++o){if(null!=a){if(a[i]===o&&1!==e[o])throw new Error(`Can't squeeze axis ${o} since its dim '${e[o]}' is not 1`);(null==a[i]||a[i]>o)&&1===e[o]&&(n.push(e[o]),r.push(o)),a[i]<=o&&i++}1!==e[o]&&(n.push(e[o]),r.push(o))}return{newShape:n,keptDims:r}}function ue(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error("Unknown data type "+e);n=new Uint8Array(t)}return n}function ce(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error("Unknown data type "+e);n=new Array(t)}return n}function he(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function pe(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function de(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function fe(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function me(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error("Unknown dtype "+e)}function ge(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}function ye(e){return"string"==typeof e||e instanceof String}function be(e){return"boolean"==typeof e}function xe(e){return"number"==typeof e}function we(e){return Array.isArray(e)?we(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":xe(e)?"float32":ye(e)?"string":be(e)?"bool":"float32"}function ke(e){return!!(e&&e.constructor&&e.call&&e.apply)}function ve(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function Ie(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function Ne(e,t,n){const r=new Array;if(1===t.length){const s=t[0];for(let t=0;t<s;t++)r[t]=n[e+t]}else{const s=t[0],a=t.slice(1),i=a.reduce((e,t)=>e*t);for(let t=0;t<s;t++)r[t]=Ne(e+t*i,a,n)}return r}function Se(e,t){if(0===e.length)return t[0];const n=e.reduce((e,t)=>e*t);if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return Ne(0,e,t)}function Ce(e,t){const n=Te(e,t);for(let r=0;r<n.length;r++)n[r]=1;return n}function Te(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error("Unknown data type "+t)}function $e(e,t){const n=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return Se(e,new Float32Array(n));if("int32"===t)return Se(e,new Int32Array(n));if("bool"===t)return Se(e,new Uint8Array(n));throw new Error("Unknown data type "+t)}function Ee(e){e.forEach(t=>{q(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function Ae(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let s=0;s<e.length-1;++s)r+=n[s]*e[s];return r}function Re(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let s=0;s<r.length-1;++s)r[s]=Math.floor(e/n[s]),e-=r[s]*n[s];return r[r.length-1]=e,r}function Fe(e){return e&&e.then&&"function"==typeof e.then}class De{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Fe(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("="))),t}(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach(e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)})}}function _e(){return Me}let Oe,Me=null;function Le(){if(null==Oe){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}Oe=e}return Oe}function ze(e,t){const n=function(){const e=Le();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const Pe="Abs",Be="Acos",We="Acosh",Ve="Add",Ue="AddN",Ge="All",He="Any",je="ArgMax",qe="ArgMin",Ke="Asin",Xe="Asinh",Ye="Atan",Je="Atanh",Ze="Atan2",Qe="AvgPool",et="AvgPoolGrad",tt="AvgPool3D",nt="AvgPool3DGrad",rt="BatchMatMul",st="BatchToSpaceND",at="Bincount",it="Cast",ot="Ceil",lt="ClipByValue",ut="Complex",ct="ComplexAbs",ht="Concat",pt="Conv2D",dt="Conv2DBackpropFilter",ft="Conv2DBackpropInput",mt="Conv3D",gt="Conv3DBackpropFilterV2",yt="Conv3DBackpropInputV2",bt="Cos",xt="Cosh",wt="Cumsum",kt="CropAndResize",vt="DenseBincount",It="DepthToSpace",Nt="DepthwiseConv2dNative",St="DepthwiseConv2dNativeBackpropFilter",Ct="DepthwiseConv2dNativeBackpropInput",Tt="Diag",$t="Dilation2D",Et="Dilation2DBackpropInput",At="Dilation2DBackpropFilter",Rt="RealDiv",Ft="Elu",Dt="EluGrad",_t="Erf",Ot="Equal",Mt="Exp",Lt="ExpandDims",zt="Expm1",Pt="FFT",Bt="Fill",Wt="FlipLeftRight",Vt="Floor",Ut="FloorDiv",Gt="FusedBatchNorm",Ht="GatherV2",jt="GatherNd",qt="Greater",Kt="GreaterEqual",Xt="Identity",Yt="IFFT",Jt="Imag",Zt="IsFinite",Qt="IsInf",en="IsNan",tn="LeakyRelu",nn="Less",rn="LessEqual",sn="LinSpace",an="Log",on="Log1p",ln="LogicalAnd",un="LogicalNot",cn="LogicalOr",hn="LRN",pn="LRNGrad",dn="Max",fn="Maximum",mn="MaxPool",gn="MaxPoolGrad",yn="MaxPool3D",bn="MaxPool3DGrad",xn="MaxPoolWithArgmax",wn="Mean",kn="Min",vn="Minimum",In="MirrorPad",Nn="Mod",Sn="Multinomial",Cn="Multiply",Tn="Neg",$n="NotEqual",En="NonMaxSuppressionV3",An="NonMaxSuppressionV4",Rn="NonMaxSuppressionV5",Fn="OnesLike",Dn="OneHot",_n="Pack",On="PadV2",Mn="Pow",Ln="Prelu",zn="Prod",Pn="Range",Bn="Real",Wn="Reciprocal",Vn="Relu",Un="Reshape",Gn="ResizeNearestNeighbor",Hn="ResizeNearestNeighborGrad",jn="ResizeBilinear",qn="ResizeBilinearGrad",Kn="Relu6",Xn="Reverse",Yn="Round",Jn="Rsqrt",Zn="ScatterNd",Qn="Select",er="Selu",tr="Slice",nr="Sin",rr="Sinh",sr="Sign",ar="Sigmoid",ir="Softplus",or="Sqrt",lr="Sum",ur="SpaceToBatchND",cr="SplitV",hr="Softmax",pr="SquaredDifference",dr="Square",fr="Sub",mr="SparseToDense",gr="StridedSlice",yr="Tan",br="Tanh",xr="Tile",wr="TopK",kr="Transpose",vr="Unique",Ir="Unpack",Nr="UnsortedSegmentSum",Sr="ZerosLike",Cr="Step",Tr="FromPixels",$r="RotateWithOffset",Er="_FusedMatMul",Ar="FusedConv2D",Rr="FusedDepthwiseConv2D",Fr=ze("kernelRegistry",()=>new Map),Dr=ze("gradRegistry",()=>new Map);function _r(e,t){const n=Pr(e,t);return Fr.get(n)}function Or(e){return Dr.get(e)}function Mr(e){const t=Fr.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===e&&n.push(i)}return n}function Lr(e){const{kernelName:t,backendName:n}=e,r=Pr(t,n);Fr.has(r)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),Fr.set(r,e)}function zr(e){const{kernelName:t}=e;Dr.has(t)&&_e().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),Dr.set(t,e)}function Pr(e,t){return`${t}_${e}`}class Br{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Vr)}profileKernel(e,t,n){let r;const s=this.backendTimer.time(()=>{r=n()});if(_e().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let a=0;a<r.length;a++){const t=r[a];t.data().then(n=>{Wr(n,t.dtype,e)})}return{kernelName:e,outputs:r,inputs:t,timeMs:s.then(e=>e.kernelMs),extraInfo:s.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach(e=>{Promise.all([e.data(),r,a]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])})})}}function Wr(e,t,n){if("float32"!==t)return!1;for(let r=0;r<e.length;r++){const t=e[r];if(isNaN(t)||!isFinite(t))return console.warn(`Found ${t} in the result of '${n}'`),!0}return!1}class Vr{logKernelProfile(e,t,n,r,s,a){const i="number"==typeof r?se(r+"ms",9):r.error,o=se(e,25),l=t.rank,u=t.size,c=se(t.shape.toString(),14);let h="";for(const p in s){const e=s[p];if(null!=e){const n=e.shape||t.shape,r=n.length;h+=`${p}: ${r}D ${r>0?n:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Ur(e,t,n,r){const s=Ie(t),a=function(e,t,n,r){const s=J(t),a=r[r.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?qr(e):e;if(o>1)for(let u=0;u<s/a;u++){const e=u*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],Gr(l[e+t],0,n).length)}return i}(e,t,n,s),i=t.length,o=jr(e,t,n,s,a),l=["Tensor"];return r&&(l.push("  dtype: "+n),l.push("  rank: "+i),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map(e=>"    "+e).join("\n")),l.join("\n")}function Gr(e,t,n){let r;return r=Array.isArray(e)?parseFloat(e[0].toFixed(7))+" + "+parseFloat(e[1].toFixed(7))+"j":ye(e)?`'${e}'`:"bool"===n?Hr(e):parseFloat(e.toFixed(7)).toString(),se(r,t)}function Hr(e){return 0===e?"false":"true"}function jr(e,t,n,r,s,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l)return"complex64"===n?[Gr(qr(e)[0],0,n)]:"bool"===n?[Hr(e[0])]:[e[0].toString()];if(1===l){if(o>20){let t=Array.from(e.slice(0,3*i)),r=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(t=qr(t),r=qr(r)),["["+t.map((e,t)=>Gr(e,s[t],n)).join(", ")+", ..., "+r.map((e,t)=>Gr(e,s[o-3+t],n)).join(", ")+"]"]}return["["+("complex64"===n?qr(e):Array.from(e)).map((e,t)=>Gr(e,s[t],n)).join(", ")+"]"]}const u=t.slice(1),c=r.slice(1),h=r[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const r=t*h;p.push(...jr(e.slice(r,r+h),u,n,c,s,!1))}p.push("...");for(let t=o-3;t<o;t++){const r=t*h;p.push(...jr(e.slice(r,r+h),u,n,c,s,t===o-1))}}else for(let m=0;m<o;m++){const t=m*h;p.push(...jr(e.slice(t,t+h),u,n,c,s,m===o-1))}const d=2===l?",":"";p[0]="["+p[0]+d;for(let m=1;m<p.length-1;m++)p[m]=" "+p[m]+d;let f=",\n";for(let m=2;m<l;m++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function qr(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}function Kr(e,t){return"string"===t?Zr(e):Xr([e],t)}function Xr(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=Y(e)),_e().getBool("DEBUG")&&he(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error("Unknown data type "+t)}function Yr(){return _e().platform.now()}function Jr(e,t){return _e().platform.fetch(e,t)}function Zr(e,t="utf-8"){return t=t||"utf-8",_e().platform.encode(e,t)}function Qr(e,t="utf-8"){return t=t||"utf-8",_e().platform.decode(e,t)}class es{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=J(e),null!=n){const e=n.length;q(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||ce(t,this.size),this.strides=Ie(e)}set(e,...t){0===t.length&&(t=[0]),q(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const r of e){if(r<0||r>=this.shape[t])throw new Error(`Requested out of range element at ${e}.   Buffer shape=`+this.shape);t++}let n=e[e.length-1];for(let r=0;r<e.length-1;++r)n+=this.strides[r]*e[r];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return ts().makeTensor(this.values,this.shape,this.dtype)}}let ts=null,ns=null,rs=null;class ss{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=J(e),this.strides=Ie(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return ns.buffer(this.shape,this.dtype,e)}bufferSync(){return ns.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Se(this.shape,e)}arraySync(){return Se(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=ts().read(this.dataId);if("string"===this.dtype){const n=await e;try{return n.map(e=>Qr(e))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=ts().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>Qr(e))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await ts().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(ts().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return ns.print(this,e)}clone(){return this.throwIfDisposed(),ns.clone(this)}toString(e=!1){return Ur(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),ns.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),ts().makeVariable(this,e,t,n)}}Object.defineProperty(ss,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed});class as extends ss{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!Q(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);ts().disposeTensor(this),this.dataId=e.dataId,ts().incRef(this,null)}dispose(){ts().disposeVariable(this),this.isDisposedInternal=!0}}var is,os,ls,us,cs;Object.defineProperty(as,Symbol.hasInstance,{value:e=>e instanceof ss&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(is||(is={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(os||(os={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(ls||(ls={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(us||(us={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(cs||(cs={}));const hs={float32:us,int32:os,bool:ls,complex64:cs};function ps(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return hs[e][t]}function ds(e){return ps(e,"int32")}function fs(e,t){if(e.dtype===t.dtype)return[e,t];const n=ps(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function ms(e,t){q(e.dtype===t.dtype,()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`)}function gs(e,t){return t.some(t=>t.id===e.id)}function ys(e){const t=[];return bs(e,t,new Set),t}function bs(e,t,n){if(null==e)return;if(e instanceof ss)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const a in s){const e=s[a];n.has(e)||(n.add(e),bs(e,t,n))}}class xs{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class ws{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new xs}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void(await this.setBackend(n))}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(e+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Br(this.backendInstance),!0}setupRegisteredKernels(){Mr(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){Mr(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof P||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then(n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0))).catch(n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(n){return console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(e+" backend not found in registry");this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t);r.disposeData(t),n.backend=e,e.move(t,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(r){throw t(),r}}nextTensorId(){return ws.nextTensorId++}nextVariableId(){return ws.nextVariableId++}clone(e){const t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype);return this.addTapeNode(this.state.activeScope.name,{x:e},[t],e=>({x:()=>{const t="float32";return vs.runKernelFunc(n=>n.cast(e,t),{x:e},null,it,{dtype:t})}}),[],{}),t}runKernel(e,t,n,r,s){return this.runKernelFunc(null,t,null,e,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach(e=>{s+="complex64"===e.dtype?3:1});const a=r-t-s-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${e}'`)}runKernelFunc(e,t,n,r,s,a,i){let o,l=[];const u=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,h=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const d=_r(r,this.backendName);let f,m;if(null!=d)p=()=>{const e=this.backend.numDataIds();f=d.kernelFunc({inputs:t,attrs:s,backend:this.backend});const n=Array.isArray(f)?f:[f];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,e,n);const o=n.map(e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:r}=e;return this.makeTensorFromDataId(t,n,r)});if(u){let e=this.getTensorsForGradient(r,t,o);if(null==e){null==i&&(i=[]);const t=o.filter((e,t)=>i[t]);e=(a||[]).slice().concat(t)}l=this.saveTensorsForBackwardMode(e)}return o};else{if(null==e)throw new Error(`Error running ${r}: Neither modular kernel nor forward func passed`);const t=e=>{u&&(l=e.map(e=>this.keep(this.clone(e))))};p=()=>{const n=this.backend.numDataIds();f=this.tidy(()=>e(this.backend,t));const s=Array.isArray(f)?f:[f];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(r,t,()=>p()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),o=m.outputs):o=p()}),u&&this.addTapeNode(r,t,o,n,l,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(t).map(e=>null!=t[e]?t[e].shape:null),outputShapes:o.map(e=>e.shape),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(f)?o:o[0]}saveTensorsForBackwardMode(e){return e.map(e=>this.keep(this.clone(e)))}getTensorsForGradient(e,t,n){const r=Or(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(q(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(t).map(e=>t[e])):a=e.map(e=>t[e]);const i=n.filter((e,t)=>s[t]);return a.concat(i)}return null}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");r=r||this.backend;let s=e;"string"===(n=n||"float32")&&ye(e[0])&&(s=e.map(e=>Zr(e)));const a=r.write(s,t,n),i=new ss(t,n,a,this.nextTensorId());if(this.incRef(i,r),"string"===n){const e=this.state.tensorInfo.get(a),t=ge(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,r){const s=new ss(t,n=n||"float32",e,this.nextTensorId());return this.incRef(s,r),s}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new as(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(e,t){const n=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*me(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof as||this.track(e)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;const t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):this.state.tensorInfo.get(e.dataId).refCount--}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const r of this.state.activeProfile.kernels)r.kernelTimeMs=await r.kernelTimeMs,r.extraInfo=await r.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},o=Or(e);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=e=>(e=e.map((e,t)=>{if(null==e){const e=n[t],r=Te(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e}),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=ys(e),n=new Set(t.map(e=>e.id));for(let s=0;s<this.state.activeScope.track.length;s++){const e=this.state.activeScope.track[s];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==r.id||this.track(e)})}gradients(e,t,n,r=!1){if(q(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));q(s instanceof ss,()=>"The result y returned by f() must be a tensor.");const a=function(e,t,n){const r={},s={};for(let l=0;l<t.length;l++)r[t[l].id]=!0;for(let l=0;l<e.length;l++){const n=e[l],a=n.inputs;for(const e in a){const i=a[e];let o=!1;for(let e=0;e<t.length;e++)if(r[i.id]){n.outputs.forEach(e=>r[e.id]=!0),o=!0,s[n.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let l=e.length-1;l>=0;l--){const t=e[l],n=t.inputs;for(let e=0;e<t.outputs.length;e++)if(a[t.outputs[e].id]){for(const e in n)a[n[e].id]=!0,i[t.id]=!0;break}}const o=[];for(let l=0;l<e.length;l++){const t=e[l];if(s[t.id]&&i[t.id]){const e={};for(const s in t.inputs){const n=t.inputs[s];r[n.id]&&(e[s]=n)}const n=Object.assign({},t);n.inputs=e,n.outputs=t.outputs,o.push(n)}}return o}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const e={};e[s.id]=null==n?function(e){const t=Ce(J(e),"float32");return vs.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],i=[];if(a.outputs.forEach(t=>{const n=e[t.id];i.push(null!=n?n:null)}),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const s=n(()=>o[t]());if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const i=a.inputs[t];if(!Q(s.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=s;else{const t=e[i.id];e[i.id]=r(t,s),t.dispose()}}}}(e,a,e=>this.tidy(e),Is);const r=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:s,grads:r}})}customGrad(e){return q(ke(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;q(t.every(e=>e instanceof ss),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return t.forEach((e,t)=>{r[t]=e}),this.runKernelFunc((r,s)=>(n=e(...t,s),q(n.value instanceof ss,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),q(ke(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),r,(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];q(a.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),q(a.every(e=>e instanceof ss),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((e,t)=>{i[t]=()=>e}),i})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=Yr(),n=await this.backend.time(e);return n.wallMs=Yr()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new xs;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function ks(){const e=Le();if(null==e._tfengine){const t=new De(e);e._tfengine=new ws(t)}return Me=e._tfengine.ENV,ts=()=>e._tfengine,e._tfengine}ws.nextTensorId=0,ws.nextVariableId=0;const vs=ks();function Is(e,t){return vs.runKernel(Ve,{a:e,b:t})}function Ns(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function Ss(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Cs=_e();function Ts(e,t){let n=e;if(fe(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||fe(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&_e().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&$s(e,r,[]),r}function $s(e,t,n){if(n=n||[],!Array.isArray(e)&&!fe(e))return void q(0===t.length,()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);q(t.length>0,()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`),q(e.length===t[0],()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`);const r=t.slice(1);for(let s=0;s<e.length;++s)$s(e[s],r,n.concat(s))}function Es(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function As(e,t,n,r="numeric"){if(e instanceof ss)return Es(r,e.dtype,t,n),e;let s=we(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Es(r,s,t,n),null==e||!fe(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${null==e?"null":e.constructor.name}'`);const a=Ts(e,s);fe(e)||Array.isArray(e)||(e=[e]);const i="string"!==s?Xr(e,s):Y(e,[],!0);return vs.makeTensor(i,a,s)}function Rs(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,s)=>As(e,`${t}[${s}]`,n,r))}function Fs(e){const t=Object.keys(e);if(1!==t.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+t.length+" keys.");let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const s=(...e)=>{vs.startScope(n);try{const t=r(...e);return Fe(t)&&console.error("Cannot return a Promise inside of tidy."),vs.endScope(t),t}catch(t){throw vs.endScope(null),t}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}Cs.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Cs.registerFlag("IS_BROWSER",()=>Ss()),Cs.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Cs.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Cs.registerFlag("PROD",()=>!1),Cs.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Cs.getBool("DEBUG")),Cs.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Cs.registerFlag("IS_TEST",()=>!1),Cs.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0);const Ds=Fs({complex_:function(e,t){const n=As(e,"real","complex"),r=As(t,"imag","complex");return K(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`),vs.runKernel(ut,{real:n,imag:r})}});function _s(e,t,n,r){if(null==r&&(r=we(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!fe(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Ee(t);const e=J(t),r=J(n);q(e===r,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`);for(let s=0;s<n.length;++s){const e=n[s],r=s!==n.length-1||e!==J(t.slice(s));q(n[s]===t[s]||!r,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `)}}return fe(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?Xr(e,r):Y(e,[],!0),vs.makeTensor(e,t,r)}function Os(e,t,n){return _s(e,t,Ts(e,n),n)}const Ms={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function Ls(e,t){const n=[],r=[],s=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise(async e=>{const t=await o.bytes(),n=t.reduce((e,t)=>e+t.length,0)+4*t.length,r=new Uint8Array(n);let s=0;for(let a=0;a<t.length;a++){const e=t[a],n=new Uint8Array(new Uint32Array([e.length]).buffer);r.set(n,s),s+=4,r.set(e,s),s+=e.length}e(r)});r.push(e)}else r.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:Ps(await Promise.all(r)),specs:n}}function zs(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,l=J(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Ms[n.dtype],c=e.slice(s,s+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++)u[e]=h[e]*n.scale+n.min}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Hs()),u=r(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++)u[e]=Math.round(h[e]*n.scale+n.min)}s+=l*o}else if("string"===i){const t=J(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));u.push(n),s+=t}}else{const r=Ms[i],a=e.slice(s,s+l*r);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),r=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],r[t]=u[2*t+1];const s=Os(e,o,"float32"),i=Os(r,o,"float32");n[t]=Ds(s,i),s.dispose(),i.dispose()}}s+=l*r}"complex64"!==i&&(n[t]=Os(u,o,i))}return n}function Ps(e){if(null===e)throw new Error("Invalid input value: "+JSON.stringify(e));let t=0;const n=[];e.forEach(e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+e.constructor.name)});const r=new Uint8Array(t);let s=0;return n.forEach(e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength}),r.buffer}const Bs="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Ws(e){return Bs?Buffer.byteLength(e):new Blob([e]).size}function Vs(e){if(1===e.length)return e[0];let t=0;e.forEach(e=>{t+=e.byteLength});const n=new Uint8Array(t);let r=0;return e.forEach(e=>{n.set(new Uint8Array(e),r),r+=e.byteLength}),n.buffer}function Us(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Gs(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Ws(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Ws(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Hs(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let n=1024;n<2048;n++)t[n]=939524096+(n-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let i=0;i<r.length;i++){const s=r[i];a[i]=e[n[s>>10]+(1023&s)]+t[s>>10]}return new Float32Array(s)}}class js{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==js.instance&&(js.instance=new js),js.instance}static registerSaveRouter(e){js.getInstance().saveRouters.push(e)}static registerLoadRouter(e){js.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return js.getHandlers(e,"save")}static getLoadHandlers(e,t){return js.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?js.getInstance().loadRouters:js.getInstance().saveRouters).forEach(t=>{const s=t(e,n);null!==s&&r.push(s)}),r}}const qs=e=>js.registerSaveRouter(e),Ks=e=>js.registerLoadRouter(e),Xs=e=>js.getSaveHandlers(e),Ys=(e,t)=>js.getLoadHandlers(e,t),Js="tensorflowjs",Zs="models_store",Qs="model_info_store";function ea(){if(!_e().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function ta(e){const t=e.result;t.createObjectStore(Zs,{keyPath:"modelPath"}),t.createObjectStore(Qs,{keyPath:"modelPath"})}class na{constructor(e){if(this.indexedDB=ea(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{const r=this.indexedDB.open(Js,1);r.onupgradeneeded=()=>ta(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction(Zs,"readonly"),r=t.objectStore(Zs).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=Gs(t),a=s.transaction(Qs,"readwrite");let i=a.objectStore(Qs);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let l;o.onsuccess=()=>{l=s.transaction(Zs,"readwrite");const o=l.objectStore(Zs).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});o.onsuccess=()=>e({modelArtifactsInfo:r}),o.onerror=e=>{i=a.objectStore(Qs);const t=i.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(o.error)),t.onerror=e=>(s.close(),n(o.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)})}}na.URL_SCHEME="indexeddb://";const ra=e=>{return _e().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(na.URL_SCHEME)?(t=e.slice(na.URL_SCHEME.length),new na(t)):null;var t};js.registerSaveRouter(ra),js.registerLoadRouter(ra);class sa{constructor(){this.indexedDB=ea()}async listModels(){return new Promise((e,t)=>{const n=this.indexedDB.open(Js,1);n.onupgradeneeded=()=>ta(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(Qs,"readonly"),a=s.objectStore(Qs).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)})}async removeModel(e){var t;return e=(t=e).startsWith(na.URL_SCHEME)?t.slice(na.URL_SCHEME.length):t,new Promise((t,n)=>{const r=this.indexedDB.open(Js,1);r.onupgradeneeded=()=>ta(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(Qs,"readwrite"),i=a.objectStore(Qs),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=i.delete(e),a=()=>{l=s.transaction(Zs,"readwrite");const r=l.objectStore(Zs).delete(e);r.onsuccess=()=>t(o.result.modelArtifactsInfo),r.onerror=e=>n(o.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(o.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)})}}const aa="/",ia="tensorflowjs_models",oa="info",la="model_topology",ua="weight_specs",ca="weight_data",ha="model_metadata";function pa(e){return{info:[ia,e,oa].join(aa),topology:[ia,e,la].join(aa),weightSpecs:[ia,e,ua].join(aa),weightData:[ia,e,ca].join(aa),modelMetadata:[ia,e,ha].join(aa)}}function da(e){const t=e.split(aa);if(t.length<3)throw new Error("Invalid key format: "+e);return t.slice(1,t.length-1).join(aa)}class fa{constructor(e){if(!_e().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=pa(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const n=JSON.stringify(e.modelTopology),r=JSON.stringify(e.weightSpecs),s=Gs(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,n),this.LS.setItem(this.keys.weightSpecs,r),this.LS.setItem(this.keys.weightData,function(e){if(Bs)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let r=0,s=t.length;r<s;r++)n+=String.fromCharCode(t[r]);return btoa(n)}(e.weightData));const t={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(t)),{modelArtifactsInfo:s}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(Bs){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n.set([t.charCodeAt(r)],r);return n.buffer}(a),t}}fa.URL_SCHEME="localstorage://";const ma=e=>{return _e().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(fa.URL_SCHEME)?(t=e.slice(fa.URL_SCHEME.length),new fa(t)):null;var t};js.registerSaveRouter(ma),js.registerLoadRouter(ma);class ga{constructor(){q(_e().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),q("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=ia+aa,n=aa+oa;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);s.startsWith(t)&&s.endsWith(n)&&(e[da(s)]=JSON.parse(this.LS.getItem(s)))}return e}async removeModel(e){var t;const n=pa(e=(t=e).startsWith(fa.URL_SCHEME)?t.slice(fa.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}const ya="://";class ba{constructor(){this.managers={}}static getInstance(){return null==ba.instance&&(ba.instance=new ba),ba.instance}static registerManager(e,t){q(null!=e,()=>"scheme must not be undefined or null."),e.endsWith(ya)&&(e=e.slice(0,e.indexOf(ya))),q(e.length>0,()=>"scheme must not be an empty string.");const n=ba.getInstance();q(null==n.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function xa(e){if(-1===e.indexOf(ya))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+ba.getSchemes().join(","));return{scheme:e.split(ya)[0],path:e.split(ya)[1]}}async function wa(e,t,n=!1){q(e!==t,()=>`Old path and new path are the same: '${e}'`);const r=js.getLoadHandlers(e);q(r.length>0,()=>`Copying failed because no load handler is found for source URL ${e}.`),q(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`);const s=r[0],a=js.getSaveHandlers(t);q(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),q(a.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`);const i=a[0],o=xa(e).scheme,l=xa(e).path,u=o===xa(e).scheme,c=await s.load();n&&u&&await ba.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await ba.getManager(o).removeModel(l),h.modelArtifactsInfo}async function ka(){const e=ba.getSchemes(),t={};for(const n of e){const e=await ba.getManager(n).listModels();for(const r in e)t[n+ya+r]=e[r]}return t}async function va(e){const t=xa(e);return ba.getManager(t.scheme).removeModel(t.path)}async function Ia(e,t){return wa(e,t,!1)}async function Na(e,t){return wa(e,t,!0)}class Sa{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Browser's encoder only supports utf-8, but got "+t);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(_e().get("IS_BROWSER")){_e().setPlatform("browser",new Sa);try{ba.registerManager(fa.URL_SCHEME,new ga)}catch(sO){}try{ba.registerManager(na.URL_SCHEME,new sa)}catch(sO){}}let Ca;function Ta(e,t="float32",n){return t=t||"float32",Ee(e),new es(e,t,n)}_e().get("IS_NODE")&&_e().setPlatform("node",new class{constructor(){this.util=n(4),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=_e().global.fetch?_e().global.fetch(e,t):(null==Ca&&(Ca=n(3)),Ca(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Node built-in encoder only supports utf-8, but got "+t);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const $a=Fs({cast_:function(e,t){const n=As(e,"x","cast");if(!pe(t))throw new Error("Failed to cast to unknown dtype "+t);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");return vs.runKernel(it,{x:n},{dtype:t})}}),Ea=Fs({clone_:function(e){const t=As(e,"x","clone","string_or_numeric");return vs.runKernel(Xt,{x:t})}});function Aa(e){return new Promise(e=>setTimeout(e)).then(e)}ks(),ns={buffer:Ta,cast:$a,clone:Ea,print:function(e,t=!1){console.log(e.toString(t))}};class Ra{constructor(e){if(!_e().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Ra.URL_SCHEME)&&(e=e.slice(Ra.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]};null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer);const r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(s.download=this.modelTopologyFileName,s.href=r,await Aa(()=>s.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Aa(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Gs(e)}}}}Ra.URL_SCHEME="downloads://";class Fa{constructor(e){if(null==e||e.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+e);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise((n,r)=>{const s=new FileReader;s.onload=s=>{const a=JSON.parse(s.target.result),i=a.modelTopology;if(null==i)return void r(new Error("modelTopology field is missing from file "+e.name));0===t.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void r(new Error("weightManifest field is missing from file "+e.name));let l;try{l=this.checkManifestAndWeightFiles(o,t)}catch(sO){return void r(sO)}const u=[],c=[],h=[];o.forEach(e=>{e.paths.forEach(e=>{c.push(e),h.push(null)}),u.push(...e.weights)}),o.forEach(e=>{e.paths.forEach(e=>{const t=new FileReader;t.onload=t=>{const r=t.target.result,s=c.indexOf(e);if(h[s]=r,-1===h.indexOf(null)){const e={modelTopology:i,weightSpecs:u,weightData:Vs(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy};null!=a.signature&&(e.signature=a.signature),null!=a.userDefinedMetadata&&(e.userDefinedMetadata=a.userDefinedMetadata),null!=a.modelInitializer&&(e.modelInitializer=a.modelInitializer),n(e)}},t.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(l[e])})})},s.onerror=t=>r(`Failed to read model topology and weights manifest JSON from file '${e.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),s.readAsText(e)})}checkManifestAndWeightFiles(e,t){const n=[],r=t.map(e=>Us(e.name)),s={};for(const a of e)a.paths.forEach(e=>{const a=Us(e);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===r.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[e]=t[r.indexOf(a)]});if(n.length!==t.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${t.length}).`);return s}}function Da(e){return new Fa(e)}function _a(e,t,n,r){!function(e){q(null!=e&&Array.isArray(e)&&e.length>0,()=>"promises must be a none empty array")}(e),function(e,t){q(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+e),q(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+t),q(t>=e,()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction `+t)}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map(a=>(a.then(a=>{const i=n+ ++s/e.length*(r-n);return t(i),a}),a)))}async function Oa(e,t){null==t&&(t={});const n=null==t.fetchFunc?_e().platform.fetch:t.fetchFunc,r=e.map(e=>n(e,t.requestInit,{isBinary:!0})),s=(null==t.onProgress?await Promise.all(r):await _a(r,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(s):await _a(s,t.onProgress,.5,1)}async function Ma(e,t="",n,r){return La(e=>Oa(e,{requestInit:r}))(e,t,n)}function La(e){return async(t,n="",r)=>{const s=t.map(()=>!1),a={},i=null!=r?r.map(()=>!1):[],o=[];if(t.forEach((e,t)=>{let n=0;e.weights.forEach(e=>{const l=Ms["quantization"in e?e.quantization.dtype:e.dtype]*J(e.shape),u=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach((t,n)=>{t===e.name&&(u(),i[n]=!0)}):u(),o.push(e.name),n+=l})}),!i.every(e=>e)){const e=r.filter((e,t)=>!i[t]);throw new Error("Could not find weights in manifest with names: "+e.join(", ")+". \nManifest JSON has weights with names: "+o.join(", ")+".")}const l=s.reduce((e,t,n)=>(t&&e.push(n),e),[]),u=[];l.forEach(e=>{t[e].paths.forEach(e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)})});const c=await e(u),h={};let p=0;return l.forEach(e=>{const n=t[e].paths.length;let r=0;for(let t=0;t<n;t++)r+=c[p+t].byteLength;const s=new ArrayBuffer(r),i=new Uint8Array(s);let o=0;for(let t=0;t<n;t++){const e=new Uint8Array(c[p+t]);i.set(e,o),o+=e.byteLength}a[e].forEach(e=>{const t=zs(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const n in t)h[n]=t[n]}),p+=n}),h}}js.registerSaveRouter(e=>_e().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ra.URL_SCHEME)?function(e="model"){return new Ra(e)}(e.slice(Ra.URL_SCHEME.length)):null);class za{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(q("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=_e().platform.fetch,q(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&q(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:[{paths:["./model.weights.bin"],weights:e.weightSpecs}]};null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Gs(e),responses:[r]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+r.status+".")}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code `+e.status+". Please verify this URL points to the model JSON of the model to load.");let t;try{t=await e.json()}catch(d){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=t.modelTopology,r=t.weightsManifest,s=t.generatedBy,a=t.convertedBy,i=t.format,o=t.signature,l=t.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,c;if(null!=r){const e=await this.loadWeights(r);[u,c]=e}const h={modelTopology:n,weightSpecs:u,weightData:c,generatedBy:s,convertedBy:a,format:i};null!=o&&(h.signature=o),null!=l&&(h.userDefinedMetadata=l);const p=t.modelInitializer;return p&&(h.modelInitializer=p),h}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),s=this.weightPathPrefix||n,a=[];for(const l of e)a.push(...l.weights);const i=[],o=[];for(const l of e)for(const e of l.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(s+e+r);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[a,Vs(await Oa(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Pa(e){return null!=e.match(za.URL_SCHEME_REGEX)}za.URL_SCHEME_REGEX=/^https?:\/\//;const Ba=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every(e=>Pa(e)):Pa(e),n)return Wa(e,t)}return null};function Wa(e,t){return new za(e,t)}function Va(e,t){return Wa(e,t)}js.registerSaveRouter(Ba),js.registerLoadRouter(Ba);class Ua{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class Ga{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function Ha(e,t,n,r){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new Ua(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ua({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ua({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r}))}function ja(e){return new Ga(e)}let qa;async function Ka(e,t){let n=As(e,"img","toPixels");if(!(e instanceof ss)){const e=n;n=$a(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(s*r*4);for(let u=0;u<r*s;++u){const e=[0,0,0,255];for(let r=0;r<a;r++){const t=i[u*a+r];if("float32"===n.dtype){if(t<0||t>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${t}.`)}else if("int32"===n.dtype&&(t<0||t>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${t}.`);1===a?(e[0]=t*o,e[1]=t*o,e[2]=t*o):e[r]=t*o}const t=4*u;l[t+0]=Math.round(e[0]),l[t+1]=Math.round(e[1]),l[t+2]=Math.round(e[2]),l[t+3]=Math.round(e[3])}if(null!=t){t.width=s,t.height=r;const e=t.getContext("2d"),n=new ImageData(l,s,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}const Xa=Fs({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+e.constructor.name);o=!0}if(s){const t=2;if(s&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=_r(Tr,vs.backendName))return vs.runKernel(Tr,{pixels:e},{numChannels:t});const[l,u]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i?c=e.getContext("2d").getImageData(0,0,l,u).data:r||n?c=e.data:(a||s||o)&&(null==qa&&(qa=document.createElement("canvas").getContext("2d")),qa.canvas.width=l,qa.canvas.height=u,qa.drawImage(e,0,0,l,u),c=qa.getImageData(0,0,l,u).data),4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return function(e,t,n){if(X(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Ts(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return _s(e,t,r,n)}(h,[u,l,t],"int32")}});function Ya(e,t,n){const r=e.shape.length;q(r===t.length,()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`),q(r===n.length,()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`);for(let s=0;s<r;++s)q(t[s]+n[s]<=e.shape[s],()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`)}function Ja(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Za(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function Qa(e,t,n,r){const s=[...e];for(let a=s.length;a<r.length;a++)s.push(1);for(let a=0;a<n;a++)0===a?s[t]=1:(s.splice(t,0,1),s.pop());return s}function ei(e,t,n){return n<=e?n:n-(t-1)}function ti(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function ni(e,t,n,r,s,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=ri(i,l,u,r,e),h=si(o,l,u,s,e),p=Qa(a,l,u,e)}else for(let d=0;d<u;d++)c[d]=ii(i,r,a,e,d,l),h[d]=oi(o,s,a,e,d,l),p[d]=ai(a,d,l);return{begin:c,end:h,strides:p}}function ri(e,t,n,r,s){const a=[...s],i=ti(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=0;else{const s=ei(t,n,o);let i=r[s];e&1<<s&&(i=0),a[o]=i}return a}function si(e,t,n,r,s){const a=[...s],i=ti(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=Number.MAX_SAFE_INTEGER;else{const s=ei(t,n,o);let i=r[s];e&1<<s&&(i=Number.MAX_SAFE_INTEGER),a[o]=i}for(let o=0;o<a.length;o++){const e=s[o];a[o]<0&&(a[o]+=e),a[o]=V(0,a[o],s[o])}return a}function ai(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function ii(e,t,n,r,s,a){let i=t[s];(e&1<<s||a&1<<s||null==i)&&(i=(n[s]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const o=r[s];return i<0&&(i+=o),i=V(0,i,o-1),i}function oi(e,t,n,r,s,a){let i=t[s];const o=n[s]||1;(e&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[s];return i<0&&(i+=l),i=o>0?V(0,i,l):V(-1,i,l-1),i}function li(e,t,n){let r=n.length;for(let s=0;s<n.length;s++)if(n[s]>1){r=s;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function ui(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function ci(e,t,n){let r;const s=e.shape.length;let a;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach(e=>{q(-1!==e,()=>"slice() does not support negative begin indexing.")}),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map((t,n)=>t>=0?t:(q(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`),e.shape[n]-r[n])),[r,a]}function hi(e,t,n,r,s,a,i,o,l){let u=t.slice(),c=n.slice(),h=r;null==r&&(h=new Array(u.length));const p=Ja(i);if(p.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const d=e.length-u.length,f=Ja(o),m=e.slice();f.forEach(e=>{u[e]=0,c[e]=1,m.splice(e,0,1)});const{begin:g,end:y,strides:b}=ni(m,p,d,u,c,h,s,a,i);u=g,c=y,h=b;const x=Ja(l);x.forEach(e=>{c[e]=u[e]+1,h[e]=1});const w=Za(u,c,h),k=w.filter((e,t)=>-1===x.indexOf(t));return{nonStrided:h.every(e=>1===e),$begin:u,$end:c,$strides:h,size:w,newShape:m,outShape:k}}class pi{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class di{constructor(){this.classNameMap={}}static getMap(){return null==di.instance&&(di.instance=new di),di.instance}static register(e){di.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function fi(e){q(null!=e.className,()=>"Class being registered does not have the static className property defined."),q("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),q(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),di.register(e)}function mi(e){_e().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function gi(){return vs}function yi(){return vs.memory()}function bi(e,t){return vs.tidy(e,t)}function xi(e){ys(e).forEach(e=>e.dispose())}function wi(e){return vs.keep(e)}function ki(e,t,n=1){return vs.registerBackend(e,t,n)}function vi(e){return vs.customGrad(e)}function Ii(e,t){if((fe(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&fe(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return _s(e,[],[],t)}rs=mi;class Ni extends pi{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map(e=>({name:e.name,tensor:s[e.name]}));this.applyGradients(e)}else this.applyGradients(s);return xi(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){q(ke(e),()=>"The f passed in variableGrads(f) must be a function"),q(null==t||Array.isArray(t)&&t.every(e=>e instanceof as),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=t;if(!n){t=[];for(const e in vs.registeredVariables)t.push(vs.registeredVariables[e])}const r=n?t.filter(e=>!e.trainable):null,s=t.length;q((t=t.filter(e=>e.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);const{value:a,grads:i}=vs.gradients(e,t,null,!0);q(i.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),q(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const o={};return t.forEach((e,t)=>{null!=i[t]&&(o[e.name]=i[t])}),null!=r&&r.forEach(e=>o[e.name]=null),{value:a,grads:o}}(e,t)}dispose(){null!=this.iterations_&&xi(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Ii(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Ni,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});const Si=Fs({abs_:function(e){const t=As(e,"x","abs");return vs.runKernel("complex64"===t.dtype?ct:Pe,{x:t})}}),Ci=Fs({add_:function(e,t){let n=As(e,"a","add"),r=As(t,"b","add");return[n,r]=fs(n,r),vs.runKernel(Ve,{a:n,b:r})}}),Ti=Fs({all_:function(e,t=null,n=!1){const r=As(e,"x","all","bool");return vs.runKernel(Ge,{x:r},{axis:t,keepDims:n})}}),$i=Fs({any_:function(e,t=null,n=!1){const r=As(e,"x","any","bool");return vs.runKernel(He,{x:r},{axis:t,keepDims:n})}}),Ei=Fs({argMax_:function(e,t=0){const n=As(e,"x","argMax");return vs.runKernel(je,{x:n},{axis:t})}});function Ai(e,t,n,r,s="NHWC",a){return Di(e,[...t,e[3]],n,a,r,null,null,Vi(s))}function Ri(e,t,n,r,s,a,i="channelsLast"){const[o,l]=Mi(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);u=[o,l,e[1],e[1]]}return Di(e,u,n,r,s,a,!1,i)}function Fi(e,t,n,r,s,a,i="NDHWC"){const[o,l,u]=Li(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return _i(e,c,n,r,s,!1,h,a)}function Di(e,t,n,r,s,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=Mi(n),[y,b]=Mi(r),x=zi(p,y),w=zi(d,b),{padInfo:k,outHeight:v,outWidth:I}=function(e,t,n,r,s,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=Oi(e,t,n));const a=e[1];return[Pi((e[0]-t+2*r)/n+1,s),Pi((a-t+2*r)/n+1,s)]}([t,n],a,r,e,o);c=s[0],h=s[1]}else if("same"===e){c=Math.ceil(t/r),h=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),o=Math.max(0,(h-1)*s+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof e)throw Error("Unknown padding parameter: "+e);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Pi((t-a+p+d)/r+1,o),h=Pi((n-i+f+m)/s+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(s,u,c,m,g,x,w,a,o),N=i?f*h:f;let S;return"channelsFirst"===o?S=[l,N,v,I]:"channelsLast"===o&&(S=[l,v,I,N]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:v,outWidth:I,outChannels:N,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function _i(e,t,n,r,s,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=Li(n),[w,k,v]=Li(r),I=zi(d,w),N=zi(f,k),S=zi(m,v),{padInfo:C,outDepth:T,outHeight:$,outWidth:E}=function(e,t,n,r,s,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,s,a){null==s&&(s=Oi(e,t,r));const i=e[1],o=e[2];return[Pi((e[0]-t+2*s)/r+1,a),Pi((i-t+2*s)/r+1,a),Pi((o-t+2*s)/r+1,a),1]}([t,n,r,1],o,0,s,e,c);p=a[0],d=a[1],f=a[2]}else if("same"===e){p=Math.ceil(t/s),d=Math.ceil(n/a),f=Math.ceil(r/i);const e=(p-1)*s+o-t,c=(d-1)*a+l-n,m=(f-1)*i+u-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error("Unknown padding parameter: "+e);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/s),d=Math.ceil((n-l+1)/a),f=Math.ceil((r-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(s,u,c,h,y,b,x,I,N,S,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[l,A,T,$,E]:"channelsLast"===i&&(R=[l,T,$,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:T,outHeight:$,outWidth:E,outChannels:A,padInfo:C,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:R,filterShape:t}}function Oi(e,t,n,r=1){const s=zi(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function Mi(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Li(e){return"number"==typeof e?[e,e,e]:e}function zi(e,t){return t<=1?e:e+(e-1)*(t-1)}function Pi(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error("Unknown roundingMode "+t)}}function Bi(e){const[t,n,r]=Mi(e);return 1===t&&1===n&&1===r}function Wi(e,t){return Bi(e)||Bi(t)}function Vi(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error("Unknown dataFormat "+e)}const Ui=Fs({reshape_:function(e,t){const n=As(e,"x","reshape","string_or_numeric");return vs.runKernel(Un,{x:n},{shape:t})}}),Gi=Fs({avgPool_:function(e,t,n,r,s){const a=As(e,"x","avgPool","float32");q(Wi(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=a,o=!1;3===a.rank&&(o=!0,i=Ui(a,[1,a.shape[0],a.shape[1],a.shape[2]])),q(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),null!=s&&q(ee(r),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);let l=vs.runKernel(Qe,{x:i},{filterSize:t,strides:n,pad:r,dimRoundingMode:s});return l=$a(l,a.dtype),o?Ui(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),Hi=Fs({avgPool3d_:function(e,t,n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:mi("dilations is deprecated, this field will be gone in v3.0.0.");const o=As(e,"x","avgPool3d","float32");let l=o,u=!1;4===o.rank&&(u=!0,l=Ui(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),q(5===l.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`),q("NDHWC"===a,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),q(Wi(n,i),()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&q(ee(r),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);let c=vs.runKernel(tt,{x:l},{filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i});return c=$a(c,l.dtype),u?Ui(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),ji=Fs({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const i=As(e,"x","batchNorm"),o=As(t,"mean","batchNorm"),l=As(n,"variance","batchNorm");let u,c;null!=s&&(u=As(s,"scale","batchNorm")),null!=r&&(c=As(r,"offset","batchNorm")),q(o.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),q(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),q(null==u||o.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h=function(e){let t;return t=0===e.rank||1===e.rank?Ui(e,[1,1,1,e.size]):2===e.rank?Ui(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Ui(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),p=vs.runKernel(Gt,{x:h,scale:u,offset:c,mean:o,variance:l},{varianceEpsilon:a});return Ui(p,i.shape)}}),qi=Fs({batchNorm2d_:function(e,t,n,r,s,a){const i=As(e,"x","batchNorm"),o=As(t,"mean","batchNorm"),l=As(n,"variance","batchNorm");let u,c;return null!=s&&(u=As(s,"scale","batchNorm")),null!=r&&(c=As(r,"offset","batchNorm")),q(2===i.rank,()=>"Error in batchNorm2D: x must be rank 2 but got rank "+i.rank+"."),q(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),q(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&q(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&q(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),ji(i,o,l,c,u,a)}}),Ki=Fs({batchNorm3d_:function(e,t,n,r,s,a){const i=As(e,"x","batchNorm"),o=As(t,"mean","batchNorm"),l=As(n,"variance","batchNorm");let u,c;return null!=s&&(u=As(s,"scale","batchNorm")),null!=r&&(c=As(r,"offset","batchNorm")),q(3===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),q(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),q(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&q(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&q(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),ji(i,o,l,c,u,a)}}),Xi=Fs({batchNorm4d_:function(e,t,n,r,s,a){const i=As(e,"x","batchNorm"),o=As(t,"mean","batchNorm"),l=As(n,"variance","batchNorm");let u,c;return null!=s&&(u=As(s,"scale","batchNorm")),null!=r&&(c=As(r,"offset","batchNorm")),q(4===i.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+i.rank+"."),q(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),q(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&q(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&q(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),ji(i,o,l,c,u,a)}}),Yi=Fs({clipByValue_:function(e,t,n){const r=As(e,"x","clipByValue");return q(t<=n,()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`),vs.runKernel(lt,{x:r},{clipValueMin:t,clipValueMax:n})}}),Ji=Fs({concat_:function(e,t=0){q(e.length>=1,()=>"Pass at least one tensor to concat");const n=Rs(e,"tensors","concat","string_or_numeric");return"complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)}),1===n.length?Ea(n[0]):vs.runKernel(ht,n,{axis:t})}}),Zi=Fs({concat1d_:function(e){return Ji(e,0)}}),Qi=Fs({concat2d_:function(e,t){return Ji(e,t)}}),eo=Fs({concat3d_:function(e,t){return Ji(e,t)}}),to=Fs({concat4d_:function(e,t){return Ji(e,t)}}),no=Fs({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=As(e,"x","conv2d"),l=As(t,"filter","conv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=Ui(o,[1,o.shape[0],o.shape[1],o.shape[2]])),q(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),q(4===l.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+l.rank+"."),null!=i&&q(ee(r),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h="NHWC"===s?u.shape[3]:u.shape[1];q(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),q(Wi(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const p=vs.runKernel(pt,{x:u,filter:l},{strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i});return c?Ui(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),ro=Fs({conv1d_:function(e,t,n,r,s="NWC",a=1,i){const o=As(e,"x","conv1d"),l=As(t,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=Ui(o,[1,o.shape[0],o.shape[1]])),q(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),q(3===l.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+l.rank+"."),null!=i&&q(ee(r),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),q(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),q(Wi(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),q("NWC"===s,()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const h=Ui(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=Ui(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=no(p,h,[1,n],r,"NHWC",[1,a],i);return Ui(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),so=Fs({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",i){q(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=Ui(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),q(4===o.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+"."),q(4===l.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+l.rank),q(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];q(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`),q(h===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`),null!=i&&q(ee(s),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const p=vs.runKernel(ft,{dy:l,filter:n},{strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:o});return u?Ui(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),ao=Fs({conv2dTranspose_:function(e,t,n,r,s,a){const i=As(e,"x","conv2dTranspose"),o=As(t,"filter","conv2dTranspose");return so(n,i,o,r,s,"NHWC",a)}}),io=Fs({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const i=As(e,"x","conv3d"),o=As(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=Ui(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),q(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),q(5===o.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+o.rank+"."),q(l.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`),q(Wi(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),q("NDHWC"===s,()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`);const c=vs.runKernel(mt,{x:l,filter:o},{strides:n,pad:r,dataFormat:s,dilations:a});return u?Ui(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),oo=Fs({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=As(e,"x","depthwiseConv2d"),l=As(t,"filter","depthwiseConv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=Ui(o,[1,o.shape[0],o.shape[1],o.shape[2]])),q(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),q(4===l.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+l.rank+"."),q(u.shape[3]===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`),null!=i&&q(ee(r),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h=vs.runKernel(Nt,{x:u,filter:l},{strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i});return c?Ui(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),lo=Fs({floorDiv_:function(e,t){let n=As(e,"a","floorDiv"),r=As(t,"b","floorDiv");return[n,r]=fs(n,r),vs.runKernel(Ut,{a:n,b:r})}}),uo=Fs({div_:function(e,t){let n=As(e,"a","div"),r=As(t,"b","div");return[n,r]=fs(n,r),"int32"===n.dtype&&"int32"===r.dtype?lo(n,r):vs.runKernel(Rt,{a:n,b:r},{})}}),co=Fs({elu_:function(e){const t=As(e,"x","elu");return vs.runKernel(Ft,{x:t})}});function ho(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=e[a]||1;(t[t.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function po(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,i=t[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function fo(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(r)}}return n}const mo=Fs({equal_:function(e,t){let n=As(e,"a","equal"),r=As(t,"b","equal");return[n,r]=fs(n,r),fo(n.shape,r.shape),vs.runKernel(Ot,{a:n,b:r})}}),go=Fs({expandDims_:function(e,t=0){const n=As(e,"x","expandDims","string_or_numeric");return q(t<=n.rank,()=>"Axis must be <= rank of the tensor"),vs.runKernel(Lt,{input:n},{dim:t})}}),yo=Fs({tile_:function(e,t){const n=As(e,"x","tile","string_or_numeric");return q(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`),vs.runKernel(xr,{x:n},{reps:t})}}),bo=Fs({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=Ta([e,t],r),a=e<=t?e:t;for(let o=0;o<a;++o)s.set(1,o,o);const i=Ui(s.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return yo(go(i,0),[n[0],1,1]);if(2===n.length)return yo(go(go(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return yo(go(go(go(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function xo(e,t,n){return vs.runKernel(Bt,{},{shape:e,value:t,dtype:n})}const wo=Fs({floor_:function(e){const t=As(e,"x","floor");return vs.runKernel(Vt,{x:t})}}),ko=Fs({gather_:function(e,t,n=0,r=0){const s=As(e,"x","gather"),a=As(t,"indices","gather","int32");return vs.runKernel(Ht,{x:s,indices:a},{axis:n,batchDims:r})}}),vo=Fs({greater_:function(e,t){let n=As(e,"a","greater"),r=As(t,"b","greater");return[n,r]=fs(n,r),fo(n.shape,r.shape),vs.runKernel(qt,{a:n,b:r})}}),Io=Fs({greaterEqual_:function(e,t){let n=As(e,"a","greaterEqual"),r=As(t,"b","greaterEqual");return[n,r]=fs(n,r),fo(n.shape,r.shape),vs.runKernel(Kt,{a:n,b:r})}}),No=Fs({leakyRelu_:function(e,t=.2){const n=As(e,"x","leakyRelu");return vs.runKernel(tn,{x:n},{alpha:t})}}),So=Fs({log_:function(e){const t=As(e,"x","log");return vs.runKernel(an,{x:t})}}),Co=Fs({exp_:function(e){const t=As(e,"x","exp");return vs.runKernel(Mt,{x:t})}}),To=Fs({max_:function(e,t=null,n=!1){const r=As(e,"x","max");return vs.runKernel(dn,{x:r},{reductionIndices:t,keepDims:n})}}),$o=Fs({mul_:function(e,t){let n=As(e,"a","mul"),r=As(t,"b","mul");return[n,r]=fs(n,r),vs.runKernel(Cn,{a:n,b:r})}}),Eo=Fs({sub_:function(e,t){let n=As(e,"a","sub"),r=As(t,"b","sub");return[n,r]=fs(n,r),vs.runKernel(fr,{a:n,b:r})}}),Ao=Fs({sum_:function(e,t=null,n=!1){let r=As(e,"x","sum");return"bool"===r.dtype&&(r=$a(r,"int32")),vs.runKernel(lr,{x:r},{axis:t,keepDims:n})}}),Ro=Fs({logSoftmax_:function(e,t=-1){const n=As(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return vi((e,n)=>{const r=To(e,t,!0),s=Eo(e,r),a=Eo($a(s,"float32"),So(Ao(Co(s),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[r]=n,s=Co(r);return Eo(e,$o(Ao(e,t,!0),s))}}})(n)}}),Fo=Fs({logicalAnd_:function(e,t){const n=As(e,"a","logicalAnd","bool"),r=As(t,"b","logicalAnd","bool");return fo(n.shape,r.shape),vs.runKernel(ln,{a:n,b:r})}}),Do=Fs({maxPool_:function(e,t,n,r,s){const a=As(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=Ui(a,[1,a.shape[0],a.shape[1],a.shape[2]])),q(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),q(Wi(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),null!=s&&q(ee(r),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const l=vs.runKernel(mn,{x:i},{filterSize:t,strides:n,pad:r,dimRoundingMode:s});return o?Ui(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),_o=Fs({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:mi("dilations is deprecated, this field will be gone in v3.0.0.");const o=As(e,"x","maxPool3d");let l=o,u=!1;4===o.rank&&(u=!0,l=Ui(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),q(5===l.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`),q("NDHWC"===a,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),q(Wi(n,i),()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&q(ee(r),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const c=vs.runKernel(yn,{x:l},{filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i});return u?Ui(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),Oo=Fs({maximum_:function(e,t){let n=As(e,"a","maximum"),r=As(t,"b","maximum");return[n,r]=fs(n,r),"bool"===n.dtype&&(n=$a(n,"int32"),r=$a(r,"int32")),fo(n.shape,r.shape),vs.runKernel(fn,{a:n,b:r})}}),Mo=Fs({mean_:function(e,t=null,n=!1){const r=As(e,"x","mean");return vs.runKernel(wn,{x:r},{axis:t,keepDims:n})}}),Lo=Fs({min_:function(e,t=null,n=!1){const r=As(e,"x","min");return vs.runKernel(kn,{x:r},{axis:t,keepDims:n})}}),zo=Fs({minimum_:function(e,t){let n=As(e,"a","minimum"),r=As(t,"b","minimum");return[n,r]=fs(n,r),"bool"===n.dtype&&(n=$a(n,"int32"),r=$a(r,"int32")),fo(n.shape,r.shape),vs.runKernel(vn,{a:n,b:r})}});function Po(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Bo(e,t,n){const r=e.length+t.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(e[a++]):s.push(t[i++]);return s}function Wo(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map(t=>e[t])]}function Vo(e,t){return Bo(e,t.map(e=>1),t)}function Uo(e,t,n){q(Po(t,n),()=>e+" supports only inner-most axes for now. "+`Got axes ${t} and rank-${n} input.`)}function Go(e,t){if(Po(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach(e=>n.push(e)),n}function Ho(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function jo(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const qo=Fs({square_:function(e){const t=As(e,"x","square");return vs.runKernel("Square",{x:t},{})}}),Ko=Fs({moments_:function(e,t=null,n=!1){const r=oe(t,(e=As(e,"x","moments")).shape),s=Mo(e,r,n);let a=s.shape;n||(a=Vo(s.shape,r));const i=qo(Eo($a(e,"float32"),Ui(s,a)));return{mean:s,variance:Mo(i,r,n)}}}),Xo=Fs({neg_:function(e){const t=As(e,"x","neg");return vs.runKernel(Tn,{x:t})}}),Yo=Fs({notEqual_:function(e,t){let n=As(e,"a","notEqual"),r=As(t,"b","notEqual");return[n,r]=fs(n,r),fo(n.shape,r.shape),vs.runKernel($n,{a:n,b:r})}}),Jo=Fs({oneHot_:function(e,t,n=1,r=0){if(t<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+t);const s=As(e,"indices","oneHot","int32");return vs.runKernel(Dn,{indices:s},{depth:t,onValue:n,offValue:r})}});function Zo(e,t="float32"){if("complex64"===t){const t=Zo(e,"float32"),n=Zo(e,"float32");return Ds(t,n)}const n=Te(J(e),t);return vs.makeTensor(n,e,t)}function Qo(e,t="float32"){if("complex64"===t){const t=Qo(e,"float32"),n=Zo(e,"float32");return Ds(t,n)}const n=Ce(J(e),t);return vs.makeTensor(n,e,t)}const el=Fs({onesLike_:function(e){const t=As(e,"x","onesLike");return vs.runKernel(Fn,{x:t})}}),tl=Fs({pad_:function(e,t,n=0){const r=As(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return vs.runKernel(On,{x:r},{paddings:t,constantValue:n})}}),nl=Fs({pow_:function(e,t){let n=As(e,"base","pow"),r=As(t,"exp","pow");return[n,r]=fs(n,r),vs.runKernel(Mn,{a:n,b:r})}}),rl=Fs({prelu_:function(e,t){const n=As(e,"x","prelu"),r=As(t,"alpha","prelu");return vs.runKernel(Ln,{x:n,alpha:r})}});var sl=n("pDBr");class al{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=sl.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*i,t=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class il{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=sl.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const ol=Fs({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);const a=new al(t,n,r,!1,s),i=Ta(e,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),ll=Fs({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=Ta(e,r),i=new il(t,n,null,s);for(let o=0;o<a.values.length;o++)a.values[o]=i.nextValue();return a.toTensor()}});function ul(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");return vs.runKernel(Pn,{},{start:e,stop:t,step:n,dtype:r})}const cl=Fs({relu_:function(e){const t=As(e,"x","relu");return vs.runKernel(Vn,{x:t})}}),hl=Fs({reverse_:function(e,t){const n=As(e,"x","reverse");return vs.runKernel(Xn,{x:n},{dims:t})}}),pl=Fs({selu_:function(e){const t=As(e,"x","selu");return vs.runKernel(er,{x:t})}}),dl=Fs({separableConv2d_:function(e,t,n,r,s,a=[1,1],i="NHWC"){const o=As(e,"x","separableConv2d"),l=As(t,"depthwiseFilter","separableConv2d"),u=As(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=Ui(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");q(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),q(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),q(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),q(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),q(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const p=l.shape[2],d=l.shape[3];q(u.shape[2]===p*d,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`);const f=oo(c,l,r,s,i,a),m=no(f,u,1,"valid",i);return h?Ui(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),fl=Fs({sigmoid_:function(e){const t=As(e,"x","sigmoid");return vs.runKernel(ar,{x:t})}}),ml=Fs({slice_:function(e,t,n){const r=As(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");return vs.runKernel(tr,{x:r},{begin:t,size:n})}}),gl=Fs({slice1d_:function(e,t,n){const r=As(e,"x","slice1d");return q(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),ml(r,[t],[n])}}),yl=Fs({slice2d_:function(e,t,n){const r=As(e,"x","slice2d");return q(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),ml(r,t,n)}}),bl=Fs({slice3d_:function(e,t,n){const r=As(e,"x","slice3d");return q(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),ml(r,t,n)}}),xl=Fs({slice4d_:function(e,t,n){const r=As(e,"x","slice4d");return q(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),ml(r,t,n)}}),wl=Fs({softmax_:function(e,t=-1){const n=As(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);return vs.runKernel(hr,{logits:n},{dim:t})}}),kl=Fs({softplus_:function(e){const t=As(e,"x","softplus");return vs.runKernel(ir,{x:t})}}),vl=Fs({split_:function(e,t,n=0){const r=As(e,"x","split");return vs.runKernel(cr,{x:r},{numOrSizeSplits:t,axis:n})}}),Il=Fs({sqrt_:function(e){const t=As(e,"x","sqrt");return vs.runKernel(or,{x:t})}}),Nl=Fs({squeeze_:function(e,t){const n=As(e,"x","squeeze");return Ui(n,le(n.shape,t).newShape)}}),Sl=Fs({stack_:function(e,t=0){const n=Rs(e,"tensors","stack","string_or_numeric");return q(n.length>=1,()=>"Pass at least one tensor to tf.stack"),n.length>0&&q(t<=n[0].rank,()=>"Axis must be <= rank of the tensor"),vs.runKernel(_n,n,{axis:t})}}),Cl=Fs({tanh_:function(e){const t=As(e,"x","tanh");return vs.runKernel(br,{x:t})}});function Tl(e,t){X(e);const n=Ts(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return _s(e,null,n,t)}function $l(e,t,n){if(X(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Ts(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return _s(e,t,r,n)}const El=Fs({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new al(t,n,r,!0,s),i=Ta(e,r);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),Al=Fs({unstack_:function(e,t=0){const n=As(e,"x","unstack","string_or_numeric");return q(t>=-n.shape.length&&t<n.shape.length,()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`),vs.runKernel(Ir,{value:n},{axis:t})}}),Rl=Fs({broadcastTo_:function(e,t){let n=As(e,"broadcastTo","x");const r=n.shape;if(t.some(e=>!(e>0)||e%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Ui(n,e)}const s=n.shape,a=Array.from(t);for(let i=t.length-1;i>=0;i--)if(s[i]===t[i])a[i]=1;else if(1!==n.shape[i])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);return 0===a.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length?Ea(n):vs.runKernel(xr,{x:n},{reps:a})}}),Fl=Fs({where_:function(e,t,n){const r=As(t,"a","where"),s=As(n,"b","where"),a=As(e,"condition","where","bool"),i=fo(r.shape,s.shape),o=Rl(r,i),l=Rl(s,i);return 1===a.rank&&q(a.shape[0]===r.shape[0],()=>"The first dimension of `a` must match the size of `condition`."),1!==a.rank&&K(a.shape,l.shape,"Error in where: "),vs.runKernel(Qn,{condition:a,t:o,e:l})}}),Dl=Fs({zerosLike_:function(e){const t=As(e,"x","zerosLike");return vs.runKernel(Sr,{x:t})}}),_l=Fs({transpose_:function(e,t){const n=As(e,"x","transpose");return null==t&&(t=n.shape.map((e,t)=>t).reverse()),q(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`),t.forEach(e=>{q(e>=0&&e<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+t)}),n.rank<=1?n.clone():vs.runKernel(kr,{x:n},{perm:t})}}),Ol=Fs({sparseToDense_:function(e,t,n,r=0){const s=As(e,"sparseIndices","sparseToDense","int32"),a=As(t,"sparseValues","sparseToDense"),i=As(r,"defaultValue","sparseToDense",a.dtype);return function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);if(0!==t.rank&&(1!==t.rank||t.size!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i),vs.runKernel(mr,{sparseIndices:s,sparseValues:a,defaultValue:i},{outputShape:n})}}),Ml=Fs({dropout_:function(e,t,n,r){const s=As(e,"x","dropout");if(q("float32"===s.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`),q(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof ss?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(Q(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)n.push(null==t[r]&&null!=e.shape[r]?e.shape[r]:t[r]);return n}return t}(s,n),i=1-t,o=uo(wo(Ci(ll(a,0,1,"float32",r),i)),i);return $o(s,o)}}),Ll=Fs({imag_:function(e){const t=As(e,"input","imag");return vs.runKernel(Jt,{input:t})}}),zl=Fs({real_:function(e){const t=As(e,"input","real");return vs.runKernel(Bn,{input:t})}}),Pl=Fs({fft_:function(e){return q("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`),vs.runKernel(Pt,{input:e})}}),Bl=Fs({rfft_:function(e,t){q("float32"===e.dtype,()=>"The dtype for rfft() must be real value but got "+e.dtype);let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map(e=>0),a=e.shape.map(e=>e);a[e.shape.length-1]=t,s=ml(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map(e=>e);r[e.shape.length-1]=t-n,s=Ji([e,Zo(r)],e.shape.length-1),n=t}else s=e;const a=Dl(s),i=Ui(Ds(s,a),[r,n]),o=Pl(i),l=Math.floor(n/2)+1,u=zl(o),c=Ll(o),h=vl(u,[l,n-l],u.shape.length-1),p=vl(c,[l,n-l],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=l,Ui(Ds(h[0],p[0]),d)}}),Wl=Fs({ifft_:function(e){return q("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`),vs.runKernel(Yt,{input:e})}}),Vl=Fs({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=Ui(e,[n,t]);r=Wl(s)}else{const s=[n,2*(t-1)],a=Ui(zl(e),[n,t]),i=Ui(Ll(e),[n,t]),o=hl(ml(a,[0,1],[n,t-2]),1),l=$o(hl(ml(i,[0,1],[n,t-2]),1),Ii(-1)),u=Ji([a,o],1),c=Ji([i,l],1),h=Ui(Ds(u,c),[s[0],s[1]]);r=Wl(h)}if(r=zl(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=Ui(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}}),Ul=Fs({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",i){let o=e;3===e.rank&&(o=Ui(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Ui(t,[1,t.shape[0],t.shape[1],t.shape[2]])),q(4===o.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+"."),q(4===l.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+l.shape+"."),q(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];return q(u===n[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`),q(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`),null!=i&&q(ee(s),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`),vs.runKernel(dt,{x:o,dy:l},{strides:r,pad:s,dataFormat:a,dimRoundingMode:i,filterShape:n})}}),Gl=Fs({relu6_:function(e){const t=As(e,"x","relu6");return vs.runKernel(Kn,{x:t})}}),Hl=Fs({step_:function(e,t=0){const n=As(e,"x","step");return vs.runKernel(Cr,{x:n},{alpha:t})}});function jl(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return $o(e,Hl(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function ql(e,t){let n=t;const r=po(e.shape,t.shape);return r.length>0&&(n=Ao(n,r)),Ui(n,e.shape)}function Kl(e,t,n,r){if("linear"===t)return e;if("relu"===t)return cl(e);if("elu"===t)return co(e);if("relu6"===t)return Gl(e);if("prelu"===t)return rl(e,n);if("leakyrelu"===t)return No(e,r);throw new Error(`Unknown fused activation ${t}.`)}const Xl=(e,t)=>!(e>0)||"linear"===t,Yl=Fs({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Xl(vs.state.gradientDepth,l=l||"linear")){let h=no(e,t,n,r,s,a,i);return null!=o&&(h=Ci(h,o)),Kl(h,l,u,c)}const h=As(e,"x","conv2d"),p=As(t,"filter","conv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=Ui(h,[1,h.shape[0],h.shape[1],h.shape[2]])),q(4===d.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+d.rank+"."),q(4===p.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+p.rank+"."),null!=i&&q(ee(r),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),q(d.shape[3]===p.shape[2],()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${p.shape[2]}.`),q(Wi(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),q("NHWC"===s,()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`);const m=Di(d.shape,p.shape,n,a,r,i);let g,y;null!=o&&(g=As(o,"bias","fused conv2d"),[g]=fs(g,h),fo(m.outShape,g.shape)),null!=u&&(y=As(u,"prelu weights","fused conv2d"));const b=(e,t)=>{const[s,i,o,u]=t,c=jl(e,o,l);q(Bi(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const h=[so(i.shape,c,s,n,r),Ul(i,c,s.shape,n,r)];if(null!=u){const e=ql(u,c);h.push(e)}return h},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return null==o?vi((e,t,n)=>{let r=vs.runKernel(Ar,x,w);return n([t,e,r]),f&&(r=Ui(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}})(d,p):vi((e,t,n,r)=>{let s=vs.runKernel(Ar,x,w);return r([t,e,s,n]),f&&(s=Ui(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}})(d,p,g)}}),Jl=Fs({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],i){let o=e;3===e.rank&&(o=Ui(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;return 3===l.rank&&(l=Ui(t,[1,t.shape[0],t.shape[1],t.shape[2]])),vs.runKernel(St,{x:o,dy:l},{strides:r,pad:s,dimRoundingMode:i,dilations:a,filterShape:n})}}),Zl=Fs({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=Ui(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u=vs.runKernel(Ct,{dy:o,filter:n},{strides:r,pad:s,dimRoundingMode:i,dilations:a,inputShape:e});return l?Ui(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Ql=Fs({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Xl(vs.state.gradientDepth,l)){let h=oo(e,t,n,r,s,a,i);return null!=o&&(h=Ci(h,o)),Kl(h,l,u,c)}const h=As(e,"x","depthwiseConv2d"),p=As(t,"filter","depthwiseConv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=Ui(h,[1,h.shape[0],h.shape[1],h.shape[2]])),q(4===d.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`),q(4===p.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`),q(d.shape[3]===p.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`),null==a&&(a=[1,1]),q(Wi(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),null!=i&&q(ee(r),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${r}.`);const m=Di(d.shape,p.shape,n,a,r,i,!0);let g,y;null!=o&&(g=As(o,"bias","fused conv2d"),[g]=fs(g,h),fo(m.outShape,g.shape)),null!=u&&(y=As(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{q(Bi(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[s,o,u,c]=t,h=jl(e,u,l),p=Zl(o.shape,h,s,n,r,a,i),d=Jl(o,h,s.shape,n,r,a,i);return null!=c?[p,d,ql(g,h)]:[p,d]},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return null==o?vi((e,t,n)=>{let r=vs.runKernel(Rr,x,w);return n([t,e,r]),f&&(r=Ui(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}})(d,p):vi((e,t,n,r)=>{let s=vs.runKernel(Rr,x,w);return r([t,e,s,n]),f&&(s=Ui(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}})(d,p,g)}}),eu=Fs({matMul_:function(e,t,n=!1,r=!1){let s=As(e,"a","matMul"),a=As(t,"b","matMul");return[s,a]=fs(s,a),vs.runKernel(rt,{a:s,b:a},{transposeA:n,transposeB:r})}}),tu=Fs({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o}){if(!1===Xl(vs.state.gradientDepth,a)){let l=eu(e,t,n,r);return null!=s&&(l=Ci(l,s)),Kl(l,a,i,o)}let l=As(e,"a","fused matMul"),u=As(t,"b","fused matMul");[l,u]=fs(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],h=r?u.shape[u.rank-1]:u.shape[u.rank-2],p=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=r?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=J(f),y=J(m);q(l.rank>=2&&u.rank>=2&&l.rank===u.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${u.rank}.`),q(Q(f,m),()=>`Error in fused matMul: outer dimensions (${f}) and (${m}) of Tensors with shapes ${l.shape} and `+u.shape+" must match."),q(c===h,()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`);const b=l.shape.slice(0,-2).concat([p,d]),x=Ui(l,n?[g,c,p]:[g,p,c]),w=Ui(u,r?[y,d,h]:[y,h,d]);let k,v;null!=s&&(k=As(s,"bias","fused matMul"),[k]=fs(k,l),fo(b,k.shape)),null!=i&&(v=As(i,"prelu weights","fused matMul"));const I=(e,t)=>{const[i,o,l,u]=t,c=jl(Ui(e,l.shape),l,a);let h,p;return n||r?!n&&r?(h=eu(c,o,!1,!1),p=eu(c,i,!0,!1)):n&&!r?(h=eu(o,c,!1,!0),p=eu(i,c,!1,!1)):(h=eu(o,c,!0,!0),p=eu(c,i,!0,!0)):(h=eu(c,o,!1,!0),p=eu(i,c,!0,!1)),null!=s?[h,p,ql(u,c)]:[h,p]},N={a:x,b:w,bias:k,preluActivationWeights:v},S={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:o};return null==s?vi((e,t,n)=>{const r=vs.runKernel(Er,N,S);return n([e,t,r]),{value:Ui(r,b),gradFunc:I}})(x,w):vi((e,t,n,r)=>{const s=vs.runKernel(Er,N,S);return r([e,t,s,n]),{value:Ui(s,b),gradFunc:I}})(x,w,k)}});function nu(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(i)}return Tl(s,"float32")}Fs({hammingWindow_:function(e){return nu(e,.54,.46)}});const ru=Fs({hannWindow_:function(e){return nu(e,.5,.5)}}),su=Fs({frame_:function(e,t,n,r=!1,s=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(ml(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,o=Ji([ml(e,a,t-r),xo([r],s)]);i.push(o),a+=n}return 0===i.length?$l([],[0,t]):Ui(Ji(i),[i.length,t])}});function au(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),q(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),q(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),q(4===e.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+e.shape[1]),q(1===t.rank,()=>"scores must be a 1D tensor"),q(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was `+t.shape[0]),q(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}function iu(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(t,e[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(e,t,n||ou)}(e,t,n);e.splice(r<0?-(r+1):r,0,t)}function ou(e,t){return e>t?1:e<t?-1:0}function lu(e,t,n,r,s){return hu(e,t,n,r,s,0)}function uu(e,t,n,r,s,a){return hu(e,t,n,r,s,0,!1,a,!0)}function cu(e,t,n,r,s,a){return hu(e,t,n,r,s,a,!0)}function hu(e,t,n,r,s,a,i=!1,o=!1,l=!1){const u=[];for(let g=0;g<t.length;g++)t[g]>s&&u.push({score:t[g],boxIndex:g,suppressBeginIndex:0});u.sort(fu);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<s)break;let o=!1;for(let l=h.length-1;l>=i;--l){const n=pu(e,a,h[l]);if(n>=r){o=!0;break}if(t.score=t.score*du(r,c,n),t.score<=s)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>s&&iu(u,t,fu))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),l&&(m.validOutputs=d),m}function pu(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),p=Math.max(s[1],s[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function du(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function fu(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}Fs({stft_:function(e,t,n,r,s=ru){null==r&&(r=Math.floor(Math.pow(2,Math.ceil(Math.log(t)/Math.log(2)))));const a=su(e,t,n),i=$o(a,s(t)),o=[];for(let l=0;l<a.shape[0];l++)o.push(Bl(ml(i,[l,0],[1,t]),r));return Ji(o)}}),Fs({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const i=As(e,"image","cropAndResize"),o=As(t,"boxes","cropAndResize","float32"),l=As(n,"boxInd","cropAndResize","int32"),u=o.shape[0];return q(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),q(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`),q(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`),q(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),q(r[0]>=1&&r[1]>=1,()=>"cropSize must be atleast [1,1], but was "+r),q("bilinear"===s||"nearest"===s,()=>"method must be bilinear or nearest, but was "+s),vs.runKernel(kt,{image:i,boxes:o,boxInd:l},{method:s,extrapolationValue:a,cropSize:r})}}),Fs({flipLeftRight_:function(e){const t=As(e,"image","flipLeftRight","float32");return q(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),vs.runKernel(Wt,{image:t},{})}}),Fs({rotateWithOffset_:function(e,t,n=0,r=.5){const s=As(e,"image","rotateWithOffset","float32");return q(4===s.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`),vs.runKernel($r,{image:s},{radians:t,fillValue:n,center:r})}}),Fs({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=As(e,"boxes","nonMaxSuppression"),i=As(t,"scores","nonMaxSuppression"),o=au(a,i,n,r,s);return vs.runKernel(En,{boxes:a,scores:i},{maxOutputSize:n=o.maxOutputSize,iouThreshold:r=o.iouThreshold,scoreThreshold:s=o.scoreThreshold})}}),Fs({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=As(e,"boxes","nonMaxSuppression"),o=As(t,"scores","nonMaxSuppression"),l=au(i,o,n,r,s,a),u=vs.runKernel(Rn,{boxes:i,scores:o},{maxOutputSize:n=l.maxOutputSize,iouThreshold:r=l.iouThreshold,scoreThreshold:s=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma});return{selectedIndices:u[0],selectedScores:u[1]}}}),Fs({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=As(e,"boxes","nonMaxSuppression"),o=As(t,"scores","nonMaxSuppression"),l=au(i,o,n,r,s,null),u=vs.runKernel(An,{boxes:i,scores:o},{maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a});return{selectedIndices:u[0],validOutputs:u[1]}}});const mu=Fs({resizeBilinear_:function(e,t,n=!1,r=!1){const s=As(e,"images","resizeBilinear");q(3===s.rank||4===s.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`),q(2===t.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+t+"."),q(!1===r||!1===n,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let a=s,i=!1;3===s.rank&&(i=!0,a=Ui(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,o=vs.runKernel(jn,{images:a},{alignCorners:n,halfPixelCenters:r,size:t});return i?Ui(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),gu=Fs({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=As(e,"images","resizeNearestNeighbor");q(3===s.rank||4===s.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`),q(2===t.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+t+"."),q("float32"===s.dtype||"int32"===s.dtype,()=>"`images` must have `int32` or `float32` as dtype"),q(!1===r||!1===n,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let a=s,i=!1;3===s.rank&&(i=!0,a=Ui(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,o=vs.runKernel(Gn,{images:a},{alignCorners:n,halfPixelCenters:r,size:t});return i?Ui(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),yu=Fs({lessEqual_:function(e,t){let n=As(e,"a","lessEqual"),r=As(t,"b","lessEqual");return[n,r]=fs(n,r),fo(n.shape,r.shape),vs.runKernel(rn,{a:n,b:r})}}),bu=Fs({bandPart_:function(e,t,n){q(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),q(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const r=As(e,"a","bandPart");q(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[a,i]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=Ui(ul(0,a,1,"int32"),[-1,1]),l=ul(0,i,1,"int32"),u=Eo(o,l),c=Fo(yu(u,Ii(+t,"int32")),Io(u,Ii(-n,"int32"))),h=Zo([a,i],r.dtype);return Ui(Sl(Al(Ui(r,[-1,a,i])).map(e=>Fl(c,e,h))),s)}});function xu(e,t,n=null){if(0===e.rank)return Si(e);if(1!==e.rank&&null===n)return xu(Ui(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Ao(Si(e),n);if(t===1/0)return To(Si(e),n);if(t===-1/0)return Lo(Si(e),n);if("euclidean"===t||2===t)return Il(Ao(nl(Si(e),Ii(2,"int32")),n));throw new Error("Error in norm: invalid ord value: "+t)}if(Array.isArray(n)&&2===n.length){if(1===t)return To(Ao(Si(e),n[0]),n[1]-1);if(t===1/0)return To(Ao(Si(e),n[1]),n[0]);if(t===-1/0)return Lo(Ao(Si(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Il(Ao(qo(e),n));throw new Error("Error in norm: invalid ord value: "+t)}throw new Error("Error in norm: invalid axis: "+n)}const wu=Fs({norm_:function(e,t="euclidean",n=null,r=!1){const s=xu(e=As(e,"x","norm"),t,n);let a=s.shape;if(r){const t=oe(n,e.shape);a=Vo(s.shape,t)}return Ui(s,a)}}),ku=Fs({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,q(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=e[0].shape[0];for(let t=1;t<e.length;++t)q(e[t].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`)}else t=!0,e=vl(e,e.shape[0],0).map(e=>Nl(e,[0]));q(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);const n=[],r=e;for(let s=0;s<e.length;++s)n.push(vs.tidy(()=>{let e=r[s];if(s>0)for(let t=0;t<s;++t){const r=$o(Ao($o(n[t],e)),n[t]);e=Eo(e,r)}return uo(e,wu(e,"euclidean"))}));return t?Sl(n,0):n}});function vu(e,t=!1){return vs.tidy(()=>{q(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);const n=e.shape[0],r=e.shape[1];let s=bo(n),a=Ea(e);const i=$l([[1]],[1,1]);let o=Ea(i);const l=n>=r?r:n;for(let e=0;e<l;++e){const t=a,l=o,u=s;[o,a,s]=vs.tidy(()=>{const t=ml(a,[e,e],[n-e,1]),l=wu(t),u=ml(a,[e,e],[1,1]),c=Fl(vo(u,0),$l([[-1]]),$l([[1]])),h=Eo(u,$o(c,l)),p=uo(t,h);o=1===p.shape[0]?Ea(i):Ji([i,ml(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=Xo(uo(eu(c,h),l)),f=ml(a,[e,0],[n-e,r]),m=$o(d,o),g=_l(o);if(0===e)a=Eo(f,eu(m,eu(g,f)));else{const t=Eo(f,eu(m,eu(g,f)));a=Ji([ml(a,[0,0],[e,r]),t],0)}const y=_l(m),b=ml(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=Eo(b,eu(eu(b,o),y));else{const t=Eo(b,eu(eu(b,o),y));s=Ji([ml(s,[0,0],[n,e]),t],1)}return[o,a,s]}),xi([t,l,u])}return!t&&n>r&&(s=ml(s,[0,0],[n,r]),a=ml(a,[0,0],[r,r])),[s,a]})}const Iu=Fs({qr_:function(e,t=!1){if(q(e.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank "+e.rank),2===e.rank)return vu(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),r=Al(Ui(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];return r.forEach(e=>{const[n,r]=vu(e,t);s.push(n),a.push(r)}),[Ui(Sl(s,0),e.shape),Ui(Sl(a,0),e.shape)]}}});var Nu;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Nu||(Nu={}));const Su=Fs({computeWeightedLoss_:function(e,t,n=Nu.SUM_BY_NONZERO_WEIGHTS){const r=As(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=As(t,"weights","computeWeightedLoss"));const a=null==s?r:$o(r,s);if(n===Nu.NONE)return a;if(n===Nu.SUM)return Ao(a);if(n===Nu.MEAN){if(null==s)return Mo(a);{const e=r.size/s.size,t=uo(Ao(a),Ao(s));return e>1?uo(t,Ii(e)):t}}if(n===Nu.SUM_BY_NONZERO_WEIGHTS){if(null==s)return uo(Ao(a),Ii(r.size));{const e=$o(s,Qo(r.shape)),t=$a(Ao(Yo(e,Ii(0))),"float32");return uo(Ao(a),t)}}throw Error("Unknown reduction: "+n)}});Fs({absoluteDifference_:function(e,t,n,r=Nu.SUM_BY_NONZERO_WEIGHTS){const s=As(e,"labels","absoluteDifference"),a=As(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=As(n,"weights","absoluteDifference")),K(s.shape,a.shape,"Error in absoluteDifference: ");const o=Si(Eo(s,a));return Su(o,i,r)}}),Fs({cosineDistance_:function(e,t,n,r,s=Nu.SUM_BY_NONZERO_WEIGHTS){const a=As(e,"labels","cosineDistance"),i=As(t,"predictions","cosineDistance");let o=null;null!=r&&(o=As(r,"weights","cosineDistance")),K(a.shape,i.shape,"Error in cosineDistance: ");const l=Ii(1),u=Eo(l,Ao($o(a,i),n,!0));return Su(u,o,s)}}),Fs({hingeLoss_:function(e,t,n,r=Nu.SUM_BY_NONZERO_WEIGHTS){let s=As(e,"labels","hingeLoss");const a=As(t,"predictions","hingeLoss");let i=null;null!=n&&(i=As(n,"weights","hingeLoss")),K(s.shape,a.shape,"Error in hingeLoss: ");const o=Ii(1);s=Eo($o(Ii(2),s),o);const l=cl(Eo(o,$o(s,a)));return Su(l,i,r)}}),Fs({huberLoss_:function(e,t,n,r=1,s=Nu.SUM_BY_NONZERO_WEIGHTS){const a=As(e,"labels","huberLoss"),i=As(t,"predictions","huberLoss");let o=null;null!=n&&(o=As(n,"weights","huberLoss")),K(a.shape,i.shape,"Error in huberLoss: ");const l=Ii(r),u=Si(Eo(i,a)),c=zo(u,l),h=Eo(u,c),p=Ci($o(Ii(.5),qo(c)),$o(l,h));return Su(p,o,s)}}),Fs({logLoss_:function(e,t,n,r=1e-7,s=Nu.SUM_BY_NONZERO_WEIGHTS){const a=As(e,"labels","logLoss"),i=As(t,"predictions","logLoss");let o=null;null!=n&&(o=As(n,"weights","logLoss")),K(a.shape,i.shape,"Error in logLoss: ");const l=Ii(1),u=Ii(r),c=Xo($o(a,So(Ci(i,u)))),h=$o(Eo(l,a),So(Ci(Eo(l,i),u))),p=Eo(c,h);return Su(p,o,s)}});const Cu=Fs({squaredDifference_:function(e,t){let n=As(e,"a","squaredDifference"),r=As(t,"b","squaredDifference");return[n,r]=fs(n,r),fo(n.shape,r.shape),vs.runKernel(pr,{a:n,b:r},{})}});Fs({meanSquaredError_:function(e,t,n,r=Nu.SUM_BY_NONZERO_WEIGHTS){const s=As(e,"labels","meanSquaredError"),a=As(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=As(n,"weights","meanSquaredError")),K(s.shape,a.shape,"Error in meanSquaredError: ");const o=Cu(s,a);return Su(o,i,r)}});const Tu=Fs({log1p_:function(e){const t=As(e,"x","log1p");return vs.runKernel(on,{x:t})}});Fs({sigmoidCrossEntropy_:function(e,t,n,r=0,s=Nu.SUM_BY_NONZERO_WEIGHTS){let a=As(e,"multiClassLabels","sigmoidCrossEntropy");const i=As(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=As(n,"weights","sigmoidCrossEntropy")),K(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=Ii(r),t=Ii(1),n=Ii(.5);a=Ci($o(a,Eo(t,e)),$o(n,e))}const l=function(e,t){const n=As(e,"labels","sigmoidCrossEntropyWithLogits"),r=As(t,"logits","sigmoidCrossEntropyWithLogits");K(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=cl(r),a=$o(r,n),i=Tu(Co(Xo(Si(r))));return Ci(Eo(s,a),i)}(a,i);return Su(l,o,s)}});const $u=Fs({logSumExp_:function(e,t=null,n=!1){const r=As(e,"x","logSumExp"),s=oe(t,r.shape),a=To(r,s,!0),i=Eo(r,a),o=Co(i),l=Ao(o,s),u=So(l),c=Ci(Ui(a,u.shape),u);if(n){const e=Vo(c.shape,s);return Ui(c,e)}return c}});Fs({softmaxCrossEntropy_:function(e,t,n,r=0,s=Nu.SUM_BY_NONZERO_WEIGHTS){let a=As(e,"onehotLabels","softmaxCrossEntropy");const i=As(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=As(n,"weights","softmaxCrossEntropy")),K(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const e=Ii(r),t=Ii(1),n=Ii(a.shape[1]);a=Ci($o(a,Eo(t,e)),uo(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was `+n);return vi((e,t,r)=>{const s=$u(t,[n],!0),a=Eo($a(t,"float32"),s);r([e,a]);const i=Xo($o(a,e));return{value:Ao(i,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=Vo(e.shape,[n]);return[$o(Ui(e,a),Eo($a(r,"float32"),Co(s))),$o(Ui(e,a),Eo(Co(s),$a(r,"float32")))]}}})(e,t)}(a,i);return Su(l,o,s)}});const Eu={bandPart:bu,gramSchmidt:ku,qr:Iu};class Au extends Ni{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=vs.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=vs.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:t+"/accum_grad",variable:bi(()=>Dl(r).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:t+"/accum_var",variable:bi(()=>Dl(r).variable(!1))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;bi(()=>{const e=Ci($o(a,this.rho),$o(qo(s),1-this.rho)),t=$o(uo(Il(Ci(i,this.epsilon)),Il(Ci(a,this.epsilon))),s),n=Ci($o(i,this.rho),$o(qo(t),1-this.rho));a.assign(e),i.assign(n);const o=Ci($o(t,-this.learningRate),r);r.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(xi(this.accumulatedGrads.map(e=>e.variable)),xi(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}Au.className="Adadelta",fi(Au);class Ru extends Ni{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=vs.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:t+"/accumulator",variable:bi(()=>xo(r.shape,this.initialAccumulatorValue).variable(e))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;bi(()=>{const e=Ci(a,qo(s));a.assign(e);const t=Ci($o(uo(s,Il(Ci(e,vs.backend.epsilon()))),-this.learningRate),r);r.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&xi(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Ru.className="Adagrad",fi(Ru);class Fu extends Ni{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],bi(()=>{this.accBeta1=Ii(t).variable(),this.accBeta2=Ii(n).variable()}),null==r&&(this.epsilon=vs.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);bi(()=>{const n=Eo(1,this.accBeta1),r=Eo(1,this.accBeta2);t.forEach((t,s)=>{const a=vs.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:t+"/m",variable:bi(()=>Dl(a).variable(!1))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:t+"/v",variable:bi(()=>Dl(a).variable(!1))});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,l=this.accumulatedSecondMoment[s].variable,u=Ci($o(o,this.beta1),$o(i,1-this.beta1)),c=Ci($o(l,this.beta2),$o(qo(i),1-this.beta2)),h=uo(u,n),p=uo(c,r);o.assign(u),l.assign(c);const d=Ci($o(uo(h,Ci(Il(p),this.epsilon)),-this.learningRate),a);a.assign(d)}),this.accBeta1.assign($o(this.accBeta1,this.beta1)),this.accBeta2.assign($o(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&xi(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&xi(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),bi(()=>{this.accBeta1.assign(nl(this.beta1,this.iterations_+1)),this.accBeta2.assign(nl(this.beta2,this.iterations_+1))});const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Fu.className="Adam",fi(Fu);class Du extends Ni{constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],bi(()=>{this.iteration=Ii(0).variable(),this.accBeta1=Ii(t).variable()}),null==r&&(this.epsilon=vs.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);bi(()=>{const n=Eo(1,this.accBeta1),r=uo(-this.learningRate,Ci($o(this.iteration,this.decay),1));t.forEach((t,s)=>{const a=vs.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:t+"/m",variable:Dl(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:t+"/v",variable:Dl(a).variable(!1)});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,l=this.accumulatedWeightedInfNorm[s].variable,u=Ci($o(o,this.beta1),$o(i,1-this.beta1)),c=$o(l,this.beta2),h=Si(i),p=Oo(c,h);o.assign(u),l.assign(p);const d=Ci($o(uo(r,n),uo(u,Ci(p,this.epsilon))),a);a.assign(d)}),this.iteration.assign(Ci(this.iteration,1)),this.accBeta1.assign($o(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&xi(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&xi(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Du.className="Adamax",fi(Du);class _u extends Ni{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=vs.registeredVariables[t];bi(()=>{const e=Ci($o(this.c,r),s);s.assign(e)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=wi(Ii(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}_u.className="SGD",fi(_u);class Ou extends _u{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Ii(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=vs.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:t+"/momentum",variable:bi(()=>Dl(r).variable(e))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&bi(()=>{let e;const t=Ci($o(this.m,s),a);e=Ci($o(this.c,this.useNesterov?Ci(a,$o(t,this.m)):t),r),s.assign(t),r.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&xi(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Ou.className="Momentum",fi(Ou);class Mu extends Ni{constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=vs.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=vs.registeredVariables[t],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:t+"/rms",variable:bi(()=>Dl(r).variable(s))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:t+"/momentum",variable:bi(()=>Dl(r).variable(s))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:t+"/mg",variable:bi(()=>Dl(r).variable(s))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;bi(()=>{const e=Ci($o(i,this.decay),$o(qo(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,s=Ci($o(t,this.decay),$o(a,1-this.decay)),l=uo($o(a,this.learningRate),Il(Eo(e,Ci(qo(s),this.epsilon)))),u=Ci($o(o,this.momentum),l);i.assign(e),t.assign(s),o.assign(u);const c=Eo(r,u);r.assign(c)}else{const e=Ci($o(i,this.decay),$o(qo(a),1-this.decay)),t=Ci($o(o,this.momentum),uo($o(a,this.learningRate),Il(Ci(e,this.epsilon))));i.assign(e),o.assign(t);const n=Eo(r,t);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&xi(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&xi(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&xi(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Mu.className="RMSProp",fi(Mu);class Lu{static sgd(e){return new _u(e)}static momentum(e,t,n=!1){return new Ou(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new Mu(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new Fu(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new Au(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new Du(e,t,n,r,s)}static adagrad(e,t=.1){return new Ru(e,t)}}const zu={sgd:Lu.sgd,momentum:Lu.momentum,adadelta:Lu.adadelta,adagrad:Lu.adagrad,rmsprop:Lu.rmsprop,adamax:Lu.adamax,adam:Lu.adam},Pu="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Bu(){return new Promise(e=>Pu(()=>e()))}function Wu(e,t){const n=e[0].length;e.forEach((e,t)=>{q(e.length===n,()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`)}),q(t>=0&&t<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=e[0];e.forEach((e,s)=>{for(let a=0;a<n;a++)q(a===t||e[a]===r[a],()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`)})}function Vu(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}const Uu=30;function Gu(e){return e<=Uu?e:ve(e,Math.floor(Math.sqrt(e)))}function Hu(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function ju(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function qu(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function Ku(e,t,n,r=!0){const s=[];s.push(r?e[0]/n:e[0]*n);for(let a=1;a<e.length;++a)s.push(a<=t.length?r?t[a-1]*e[a]:e[a]/t[a-1]:e[a]);return s}function Xu(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function Yu(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}function Ju(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===J(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let i=1;for(let h=0;h<s.length-1;++h)i*=s[h];const o=e.shape,l=s.slice();l.pop();let u=1;for(let h=a;h<n;++h)u*=o[h],l.push(o[h]);const c=[...Ie(e.shape).map(e=>e/u),1].slice(0,a);return[l,i,u,c]}function Zu(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${t.shape}, shape: ${e}`+`, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+" Output shape length < "+(r+(n.rank-s)));if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let i=0;i<s;++i)if(n.shape[i]!==t.shape[i])throw new Error(a+` updates.shape[${i}] (${n.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<n.rank-s;++i)if(n.shape[i+s]!==e[i+r])throw new Error(a+` updates.shape[${i+s}] (${n.shape[i+s]}) != shape[${i+s}] (${e[i+s]})`)}function Qu(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+t.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===t.size)throw new Error("Indices specified for empty output. indices shape: "+t.shape);if(0===e.size)throw new Error("Updates specified for empty output. updates shape: "+e.shape)}Zu(n,t,e)}function ec(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let i=1;for(let l=s;l<a;++l)i*=n[l];const o=s<1?1:s;return{sliceRank:s,numUpdates:J(t.shape)/o,sliceSize:i,strides:[...Ie(n.slice(0,s)),1],outputSize:J(n)}}const tc=1.7580993408473768,nc=1.0507009873554805,rc=.3275911,sc=.254829592,ac=-.284496736,ic=1.421413741,oc=-1.453152027,lc=1.061405429;function uc(...e){_e().getBool("IS_TEST")||console.warn(...e)}function cc(...e){_e().getBool("IS_TEST")||console.log(...e)}function hc(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function pc(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function dc(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let s=0;s<e.length;s+=4)n[Math.floor(s/4)]=e[s],r[Math.floor(s/4)]=e[s+1];return{real:n,imag:r}}function fc(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let s=2;s<e.length;s+=4)n[Math.floor(s/4)]=e[s],r[Math.floor(s/4)]=e[s+1];return{real:n,imag:r}}function mc(e,t){return{real:e[2*t],imag:e[2*t+1]}}function gc(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function yc(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function bc(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}function xc(e,t,n=0){let r=[];if("number"==typeof t)q(e.shape[n]%t==0,()=>"Number of splits must evenly divide the axis."),r=new Array(t).fill(e.shape[n]/t);else{q(t.reduce((e,t)=>(-1===t&&(e+=1),e),0)<=1,()=>"There should be only one negative value in split array.");const s=t.indexOf(-1);if(-1!==s){const r=t.reduce((e,t)=>t>0?e+t:e);t[s]=e.shape[n]-r}q(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),r=t}return r}function wc(e,t){let n,r=!1;for(e<=Uu?(n=e,r=!0):n=ve(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=ve(e,n+1);return n}function kc(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)r.push(a!==t?e[a]:n);return r}function vc(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let h=0;h<r;++h)if(e.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${e.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let h=0;h<r;++h)o.push(e.shape[h]),l*=e.shape[h];for(let h=r;h<n;h++)o.push(e.shape[h]),u*=e.shape[h];for(let h=r;h<s;h++)o.push(t.shape[h]);for(let h=n+1;h<a;h++)o.push(e.shape[h]),c*=e.shape[h];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}function Ic(e,t,n){if("complex64"===t){if("complex64"===e.dtype)return e.clone();const t=Zo(e.shape),r=$a(e,"float32"),s=n.complex(r,t);return t.dispose(),r.dispose(),s}if(!de(e.dtype,t))return vs.makeTensorFromDataId(e.dataId,e.shape,t);if("complex64"===e.dtype){const r=n.real(e),s=$a(r,t);return r.dispose(),s}if("int32"===t)return n.int(e);if("bool"===t){const t=Ii(0,e.dtype),r=n.notEqual(e,t);return t.dispose(),r}throw new Error(`Error in Cast: failed to cast ${e.dtype} to ${t}`)}function Nc(e,t){return vs.makeTensorFromDataId(e.dataId,t,e.dtype)}function Sc(e){try{return e.map(e=>Qr(e))}catch(sO){throw new Error("Failed to decode encoded string bytes into utf-8, error: "+sO)}}function Cc(e){return e.map(e=>Zr(e))}function Tc(e,t){const n=[];for(let a=0;a<t.length;a++)t[a]&&n.push(a);const r=Ta(e,"int32"),s=Ta([n.length,e.length],"int32");for(let a=0;a<n.length;a++){const t=r.indexToLoc(n[a]);s.values.set(t,a*e.length)}return s.toTensor()}const $c={kernelName:Pe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$o(e,Hl($a(n,"float32"),-1))}}},Ec={kernelName:Be,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=qo($a(n,"float32")),r=Il(Eo(Ii(1),t));return Xo(uo(e,r))}}}},Ac={kernelName:We,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Il(Eo(qo($a(n,"float32")),1));return uo(e,t)}}}},Rc={kernelName:Ve,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=fo(n.shape,r.shape);return{a:()=>{let t=e;const r=po(n.shape,s);return r.length>0&&(t=Ao(t,r)),Ui(t,n.shape)},b:()=>{let t=e;const n=po(r.shape,s);return n.length>0&&(t=Ao(t,n)),Ui(t,r.shape)}}}},Fc={kernelName:Ue,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach((t,r)=>{n[r]=()=>e.clone()}),n}},Dc={kernelName:je,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Dl(n)}}},_c={kernelName:qe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Dl(n)}}},Oc={kernelName:Ke,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>uo(e,Il(Eo(Ii(1),qo($a(n,"float32")))))}}},Mc={kernelName:Xe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Il(Ci(Ii(1),qo($a(n,"float32"))));return uo(e,t)}}}},Lc={kernelName:Ze,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=fo(n.shape,r.shape);return{a:()=>{const t=Ci(qo(n),qo(r));let a=$o(e,uo(r,t));const i=po(n.shape,s);return i.length>0&&(a=Ao(a,i)),Ui(a,n.shape)},b:()=>{const t=Ci(qo(n),qo(r));let a=Xo($o(e,uo(n,t)));const i=po(r.shape,s);return i.length>0&&(a=Ao(a,i)),Ui(a,r.shape)}}}},zc={kernelName:Ye,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>uo(e,Ci(qo($a(n,"float32")),1))}}},Pc={kernelName:Je,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>uo(e,Eo(Ii(1),qo($a(n,"float32"))))}}},Bc=Fs({avgPool3dGrad_:function(e,t,n,r,s=[1,1,1],a,i){const o=As(e,"dy","avgPool3dGrad"),l=As(t,"input","avgPool3dGrad");let u=o,c=l,h=!1;4===l.rank&&(h=!0,u=Ui(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=Ui(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),q(5===u.rank,()=>"Error in avgPool3dGrad: dy must be rank 5 but got rank "+u.rank+"."),q(5===c.rank,()=>"Error in avgPool3dGrad: input must be rank 5 but got rank "+c.rank+"."),q(Wi(r,s),()=>`Error in avgPool3dGrad: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`),null!=i&&q(ee(a),()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const p=vs.runKernel(nt,{dy:u,input:c},{filterSize:n,strides:r,dilations:s,pad:a,dimRoundingMode:i});return h?Ui(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Wc={kernelName:tt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,dilations:i,pad:o,dimRoundingMode:l}=n,u=null==i?[1,1,1]:i;return{x:()=>Bc(e,r,s,a,u,o,l)}}},Vc=Fs({avgPoolGrad_:function(e,t,n,r,s){const a=As(e,"dy","avgPoolGrad"),i=As(t,"input","avgPoolGrad");q(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=Ui(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=Ui(a,[1,a.shape[0],a.shape[1],a.shape[2]])),q(4===l.rank,()=>"Error in avgPoolGrad: dy must be rank 4 but got rank "+l.rank+"."),q(4===o.rank,()=>"Error in avgPoolGrad: input must be rank 4 but got rank "+o.rank+".");const c=vs.runKernel(et,{dy:l,input:o},{filterSize:n,strides:r,pad:s});return u?Ui(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Uc={kernelName:Qe,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:i}=n;return{x:()=>Vc(e,r,s,a,i)}}},Gc={kernelName:rt,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>eu(e,s,!1,!1),b:()=>eu(e,r,!0,!1)}:a&&!i?{a:()=>eu(s,e,!1,!0),b:()=>eu(r,e,!1,!1)}:{a:()=>eu(s,e,!0,!0),b:()=>eu(e,r,!0,!0)}:{a:()=>eu(e,s,!1,!0),b:()=>eu(r,e,!0,!1)}}},Hc=Fs({spaceToBatchND_:function(e,t,n){const r=As(e,"x","spaceToBatchND");return q(r.rank>=1+t.length,()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`),q(n.length===t.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`),q(r.shape.reduce((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`),vs.runKernel(ur,{x:r},{blockShape:t,paddings:n})}}),jc={kernelName:st,gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>Hc(e,r,s)}}},qc={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const r=n.inputShape,s=n.shape,a=Array.from(s);for(let o=r.length-1;o>=0;o--)if(r[o]===s[o])a[o]=1;else if(1!==r[o])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${s}].`);const i=[];for(let o=0;o<a.length;o++)a[o]>1&&i.push(o);return{x:()=>Ao(e,i,!0)}}},Kc={kernelName:it,gradFunc:e=>({x:()=>e.clone()})},Xc={kernelName:ot,gradFunc:e=>({x:()=>Dl(e)})},Yc={kernelName:lt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>Fl(Fo(Io(r,s),yu(r,a)),e,Dl(e))}}},Jc={kernelName:ct,inputsToSave:["x"],gradFunc:$c.gradFunc},Zc={kernelName:ht,saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map(e=>e.shape),{axis:s}=n,a=oe(s,t[0].shape)[0],i=r.map(e=>e[a]);return vl(e,i,a).map(e=>()=>e)}},Qc={kernelName:pt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return q(Bi(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>so(r.shape,e,s,i,o,l),filter:()=>Ul(r,e,s.shape,i,o,l)}}},eh={kernelName:ft,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>no(e,s,a,i,o,1,l),filter:()=>Ul(e,r,s.shape,a,i,o,l)}}},th=Fs({conv3DBackpropFilter_:function(e,t,n,r,s){let a=e;4===e.rank&&(a=Ui(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;return 4===i.rank&&(i=Ui(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),q(5===a.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."),q(5===i.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+i.shape+"."),q(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),q(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),q(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`),vs.runKernel(gt,{x:a,dy:i},{strides:r,pad:s,filterShape:n})}}),nh=Fs({conv3DBackpropInput_:function(e,t,n,r,s){q(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=Ui(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=i.shape[4];q(5===a.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."),q(5===i.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank),q(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),q(l===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`),q(u===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`);const c=vs.runKernel(yt,{dy:i,filter:n},{pad:s,strides:r,inputShape:a});return o?Ui(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),rh={kernelName:mt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;q(Bi(r),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);const[i,o]=t;return{x:()=>nh(i.shape,e,o,s,a),filter:()=>th(i,e,o.shape,s,a)}}},sh=Fs({sin_:function(e){const t=As(e,"x","sin");return vs.runKernel(nr,{x:t})}}),ah={kernelName:bt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$o(Xo(sh($a(n,"float32"))),e)}}},ih=Fs({sinh_:function(e){const t=As(e,"x","sinh");return vs.runKernel(rr,{x:t})}}),oh={kernelName:xt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$o(ih($a(n,"float32")),e)}}},lh=Fs({cumsum_:function(e,t=0,n=!1,r=!1){const s=As(e,"x","cumsum");return vs.runKernel(wt,{x:s},{axis:t,exclusive:n,reverse:r})}}),uh={kernelName:wt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const t=Go([s],r.rank);let n=lh(e,s,a,!i);return null!=t&&(n=_l(n,t)),n}}}},ch={kernelName:Nt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;q(Bi(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[l,u]=t;return q(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),q(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),q(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),q(Wi(s,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`),null!=i&&q(ee(a),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`),{x:()=>Zl(l.shape,e,u,s,a,r,i),filter:()=>Jl(l,e,u.shape,s,a,r,i)}}},hh={kernelName:$t,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,a={x:r,filter:s,dy:e},i={x:r,filter:s,dy:e};return{x:()=>vs.runKernel(Et,a,n),filter:()=>vs.runKernel(At,i,n)}}},ph={kernelName:Ft,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>vs.runKernel(Dt,r)}}},dh={kernelName:_t,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=$o(Co(Xo(qo(n))),2/Math.sqrt(Math.PI));return{x:()=>$o(e,r)}}},fh={kernelName:Mt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$o(e,n)}}},mh={kernelName:Lt,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Ui(e,n.shape)}}},gh={kernelName:zt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$o(e,Co(n))}}},yh={kernelName:Vt,gradFunc:e=>({x:()=>Dl(e)})},bh={kernelName:Ut,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=fo(n.shape,r.shape);return{a:()=>{const t=uo(e,$a(r,"float32")),a=po(n.shape,s);return a.length>0?Ui(Ao(t,a),n.shape):t},b:()=>{let t=$o(e,$a(n,"float32"));const a=po(r.shape,s);a.length>0&&(t=Ui(Ao(t,a),r.shape));const i=qo(r);return Xo(uo(t,$a(i,"float32")))}}}},xh=Fs({rsqrt_:function(e){const t=As(e,"x","rsqrt");return vs.runKernel(Jn,{x:t})}}),wh={kernelName:Gt,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=t,l=null==o?Ii(1):o,u=po(a.shape,s.shape),c=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)c.push(s.shape[e]);c.push(1)}const h=Eo(s,a),p=$o(e,l),d=xh(Ci(i,Ii(r))),f=$o($o($o(d,d),d),Ii(-.5));return{x:()=>Ui($o($o(e,1===a.rank?yo(Ui(d,[1,1,1,a.shape[0]]),c):d),l),s.shape),mean:()=>{let e=$o($o(d,Ii(-1)),p);return 1===a.rank&&(e=Ao(e,u)),Ui(e,a.shape)},variance:()=>{let e=$o($o(f,h),p);return 1===a.rank&&(e=Ao(e,u)),Ui(e,a.shape)},scale:()=>{const t=$o(h,d);let n=$o(e,t);return 1===a.rank&&(n=Ao(n,u)),Ui(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Ao(t,u)),Ui(t,a.shape)}}}},kh=Fs({unsortedSegmentSum_:function(e,t,n){const r=As(e,"x","unsortedSegmentSum"),s=As(t,"segmentIds","unsortedSegmentSum","int32");return q(ee(n),()=>"numSegments must be of dtype int"),vs.runKernel(Nr,{x:r,segmentIds:s},{numSegments:n})}}),vh={kernelName:Ht,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a}=n,i=oe(a,r.shape)[0];return{x:()=>{const t=r.shape,n=s.size,o=t.slice(0,i),l=o.length,u=t.slice(a,t.length).slice(1),c=u.length,h=Ih(0,l),p=Ih(l+1,l+1+c),d=Nh([o,[n],u]),f=Ui(e,d),m=Ui(s,[n]),g=Nh([[l],h,p]),y=_l(f,g);let b=kh(y,m,r.shape[i]);const x=Ho(g);return b=_l(b,x),b},indices:()=>s}}};function Ih(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function Nh(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const Sh={kernelName:Kt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Dl(n),b:()=>Dl(r)}}},Ch={kernelName:Xt,gradFunc:e=>({x:()=>$a(e,"float32")})},Th={kernelName:Zt,gradFunc:e=>({x:()=>Dl(e)})},$h={kernelName:Qt,gradFunc:e=>({x:()=>Dl(e)})},Eh={kernelName:en,gradFunc:e=>({x:()=>Dl(e)})},Ah={kernelName:tn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:s}=n,a=vo(r,0);return{x:()=>Fl(a,e,$o(e,s))}}},Rh={kernelName:on,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>uo(e,Ci(n,1))}}},Fh={kernelName:an,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>uo(e,$a(n,"float32"))}}},Dh={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=Co(r);return Eo(e,$o(Ao(e,s,!0),t))}}}},_h=Fs({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,a=1,i=.5){return vs.runKernel(pn,{x:e,y:t,dy:n},{depthRadius:r,bias:s,alpha:a,beta:i})}}),Oh={kernelName:hn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>_h(r,s,e,a,i,o,l)}}};function Mh(e,t,n,r){return t.rank<n.rank&&(t=Ui(t,Vo(t.shape,r))),e.rank<n.rank&&(e=Ui(e,Vo(e.shape,r))),{x:()=>$o(e,$a(mo(n,t),e.dtype))}}const Lh={kernelName:dn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,a=t[0],i=Mh(e,t[1],a,oe(s,a.shape));return{x:()=>i.x()}}},zh=Fs({less_:function(e,t){let n=As(e,"a","less"),r=As(t,"b","less");return[n,r]=fs(n,r),fo(n.shape,r.shape),vs.runKernel(nn,{a:n,b:r})}}),Ph={kernelName:fn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>$o(e,$a(Io(n,r),"float32")),b:()=>$o(e,$a(zh(n,r),"float32"))}}},Bh=Fs({maxPool3dGrad_:function(e,t,n,r,s,a=[1,1,1],i,o){const l=As(e,"dy","maxPool3dGrad"),u=As(t,"input","maxPool3dGrad"),c=As(n,"output","maxPool3dGrad");let h=l,p=u,d=c,f=!1;4===u.rank&&(f=!0,h=Ui(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=Ui(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=Ui(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),q(5===h.rank,()=>"Error in maxPool3dGrad: dy must be rank 5 but got rank "+h.rank+"."),q(5===p.rank,()=>"Error in maxPool3dGrad: input must be rank 5 but got rank "+p.rank+"."),q(5===d.rank,()=>"Error in maxPool3dGrad: output must be rank 5 but got rank "+d.rank+"."),q(Wi(s,a),()=>`Error in maxPool3dGrad: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`),null!=o&&q(ee(i),()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`);const m=vs.runKernel(bn,{dy:h,input:p,output:d},{filterSize:r,strides:s,dilations:a,pad:i,dimRoundingMode:o});return f?Ui(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),Wh={kernelName:yn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,dilations:o,pad:l,dimRoundingMode:u}=n,c=null==o?[1,1,1]:o;return{x:()=>Bh(e,r,s,a,i,c,l,u)}}},Vh=Fs({maxPoolGrad_:function(e,t,n,r,s,a,i){const o=As(e,"dy","maxPoolGrad"),l=As(t,"input","maxPoolGrad"),u=As(n,"output","maxPoolGrad");return q(l.rank===o.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`),q(4===o.rank,()=>"Error in maxPoolGrad: dy must be rank 4 but got rank "+o.rank+"."),q(4===l.rank,()=>"Error in maxPoolGrad: input must be rank 4 but got rank "+l.rank+"."),null!=i&&q(ee(a),()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`),vs.runKernel(gn,{dy:o,input:l,output:u},{filterSize:r,strides:s,pad:a,dimRoundingMode:i})}}),Uh={kernelName:mn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>Vh(e,r,s,a,i,o)}}},Gh={kernelName:wn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n,a=oe(s,r.shape),i=J(Wo(r.shape,a)[1]);return{x:()=>{const t=r.shape.slice();a.forEach(e=>{t[e]=1});const n=Ui(e,t);return uo($o(n,Qo(r.shape,"float32")),i)}}}},Hh={kernelName:kn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,i]=t,o=Mh(e,i,a,oe(s,a.shape));return{x:()=>o.x()}}},jh={kernelName:vn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>$o(e,$a(yu(n,r),"float32")),b:()=>$o(e,$a(vo(n,r),"float32"))}}},qh={kernelName:In,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map(e=>e[0]);return{x:()=>ml(e,a,r.shape)}}},Kh={kernelName:Nn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=fo(n.shape,r.shape);return{a:()=>{const t=po(n.shape,s);return t.length>0?Ui(Ao(e,t),n.shape):e},b:()=>{const t=$o(e,Xo(wo(uo(n,r)))),a=po(r.shape,s);return a.length>0?Ui(Ao(t,a),r.shape):t}}}},Xh={kernelName:Cn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=fo(n.shape,r.shape);return{a:()=>{const t=$o(e,$a(r,"float32")),a=po(n.shape,s);return a.length>0?Ui(Ao(t,a),n.shape):t},b:()=>{const t=$o(e,$a(n,"float32")),a=po(r.shape,s);return a.length>0?Ui(Ao(t,a),r.shape):t}}}},Yh={kernelName:Tn,gradFunc:e=>({x:()=>Xo(e)})},Jh={kernelName:Dn,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>Zo(n.shape,"float32")}}},Zh={kernelName:Fn,gradFunc:e=>({x:()=>Dl(e)})},Qh={kernelName:_n,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return Al(e,r).map(e=>()=>e)}},ep={kernelName:On,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map(e=>e[0]);return{x:()=>ml(e,a,r.shape)}}},tp={kernelName:Mn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,i=r,o=fo(a.shape,i.shape);return{a:()=>{const t=$a(i,"float32");let n=$o(e,$o(t,nl(a,Eo(t,Ii(1)))));const r=po(a.shape,o);return r.length>0&&(n=Ao(n,r)),Ui(n,a.shape)},b:()=>{const t=vo(a,0),n=Fl(t,So(a),Dl(a));let r=$o(e,$o(s,n));const l=po(i.shape,o);return l.length>0&&(r=Ao(r,l)),Ui(r,i.shape)}}}},np={kernelName:Ln,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=vo(n,0);return{x:()=>Fl(s,e,$o(e,r)),alpha:()=>{let t=Fl(s,Dl(e),$o(e,n));const a=po(r.shape,e.shape);return a.length>0&&(t=Ao(t,a)),Ui(t,r.shape)}}}},rp={kernelName:Rt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=fo(n.shape,r.shape);return{a:()=>{const t=uo(e,$a(r,"float32")),a=po(n.shape,s);return a.length>0?Ui(Ao(t,a),n.shape):t},b:()=>{let t=$o(e,$a(n,"float32"));const a=po(r.shape,s);a.length>0&&(t=Ui(Ao(t,a),r.shape));const i=qo(r);return Xo(uo(t,$a(i,"float32")))}}}},sp={kernelName:Wn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>uo(e,Xo(qo(n)))}}},ap={kernelName:Kn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=$o(yu(n,6),Hl(n));return{x:()=>$o(e,$a(r,"float32"))}}},ip={kernelName:Vn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$o(e,$a(Hl(n),"float32"))}}},op={kernelName:Un,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ui(e,n.shape)}}},lp={kernelName:jn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>vs.runKernel(qn,s,n)}}},up={kernelName:Gn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>vs.runKernel(Hn,s,n)}}},cp={kernelName:Xn,gradFunc:(e,t,n)=>{const{dims:r}=n,s=oe(r,e.shape);return{x:()=>hl(e,s)}}},hp={kernelName:Yn,gradFunc:e=>({x:()=>Dl(e)})},pp={kernelName:Jn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xo(uo(e,$o(nl(n,1.5),2)))}}},dp=Fs({logicalNot_:function(e){const t=As(e,"x","logicalNot","bool");return vs.runKernel(un,{x:t})}}),fp={kernelName:Qn,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>$a(Dl(n),"float32"),t:()=>$o(e,$a(n,e.dtype)),e:()=>$o(e,$a(dp(n),e.dtype))}}},mp={kernelName:er,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=vo(n,Ii(0)),r=Ii(tc),s=Ii(nc),a=$o(e,s),i=$o($o(e,r),Co($a(n,"float32")));return Fl(t,a,i)}}}},gp={kernelName:ar,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$o(e,$o(n,Eo(Ii(1),n)))}}},yp={kernelName:sr,gradFunc:e=>({x:()=>Dl(e)})},bp=Fs({cos_:function(e){const t=As(e,"x","cos");return vs.runKernel(bt,{x:t})}}),xp={kernelName:nr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$o(bp($a(n,"float32")),e)}}},wp=Fs({cosh_:function(e){const t=As(e,"x","cosh");return vs.runKernel(xt,{x:t})}}),kp={kernelName:rr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$o(wp($a(n,"float32")),e)}}},vp={kernelName:tr,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,i=r.shape,[o,l]=ci(r,s,a),u=[];for(let c=0;c<e.rank;c++)u.push([o[c],i[c]-o[c]-l[c]]);return{x:()=>tl(e,u)}}},Ip={kernelName:hr,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=$o(e,r);return{logits:()=>Eo(a,$o(Ao(a,[s],!0),r))}}},Np={kernelName:ir,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$o(e,fl(n))}}},Sp=Fs({batchToSpaceND_:function(e,t,n){const r=As(e,"x","batchToSpaceND"),s=t.reduce((e,t)=>e*t);return q(r.rank>=1+t.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`),q(n.length===t.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`),q(r.shape[0]%s==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`),vs.runKernel(st,{x:r},{blockShape:t,crops:n})}}),Cp={kernelName:ur,gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>Sp(e,r,s)}}},Tp={kernelName:cr,gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>Ji(e,r)}}},$p=[$c,Ec,Ac,Rc,Fc,Dc,_c,Oc,Mc,Lc,zc,Pc,Wc,Uc,Gc,jc,qc,Kc,Xc,Yc,Jc,Zc,eh,Qc,rh,ah,oh,uh,ch,hh,rp,ph,dh,fh,mh,gh,bh,yh,wh,vh,Sh,Ch,Th,$h,Eh,Ah,Rh,Fh,Dh,Oh,Lh,Lh,Ph,Wh,Uh,Gh,Hh,jh,qh,Kh,Xh,Yh,Jh,Zh,Qh,ep,ep,tp,np,sp,ap,ip,op,lp,up,cp,hp,pp,fp,mp,gp,yp,xp,kp,vp,Ip,Np,Cp,Cp,Tp,Tp,{kernelName:or,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>uo(e,$o(Il($a(n,"float32")),2))}}},{kernelName:pr,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Ii(2);return{a:()=>$o(e,$o(s,Eo(n,r))),b:()=>$o(e,$o(s,Eo(r,n)))}}},{kernelName:dr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$o(e,$o($a(n,"float32"),2))}}},{kernelName:Cr,gradFunc:e=>({x:()=>Dl(e)})},{kernelName:fr,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=fo(n.shape,r.shape);return{a:()=>{let t=e;const r=po(n.shape,s);return r.length>0&&(t=Ao(t,r)),Ui(t,n.shape)},b:()=>{let t=e;const n=po(r.shape,s);return n.length>0&&(t=Ao(t,n)),Ui(Xo(t),r.shape)}}}},{kernelName:lr,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;oe(a,r.shape).forEach(e=>{s[e]=1});const i=Ui(e,s),o=$o(i,Qo(r.shape,"float32"));return{x:()=>o}}},{kernelName:yr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>uo(e,qo(bp(n)))}}},{kernelName:br,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$o(Eo(Ii(1),qo(n)),e)}}},{kernelName:xr,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=Dl(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=Ci(t,ml(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=Ci(t,ml(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)t=Ci(t,ml(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)t=Ci(t,ml(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},{kernelName:kr,gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=Ho(s);return{x:()=>_l(e,a)}}},{kernelName:Ir,gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>Sl(e,s)}}},{kernelName:Nr,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=Oo(t,Dl(t)),r=ko(e,n);let s=Io(t,Ii(0,"int32"));const a=r.rank-s.rank;for(let o=0;o<a;++o)s=go(s,o+1);s=Fo(s,Qo(r.shape,"bool"));const i=Dl(r);return Fl(s,r,i)}(e,n)}}},{kernelName:Sr,gradFunc:e=>({x:()=>Dl(e)})}];for(const aO of $p)zr(aO);ss.prototype.abs=function(){return this.throwIfDisposed(),Si(this)};const Ep=Fs({acos_:function(e){const t=As(e,"x","acos");return vs.runKernel(Be,{x:t})}});ss.prototype.acos=function(){return this.throwIfDisposed(),Ep(this)};const Ap=Fs({acosh_:function(e){const t=As(e,"x","acosh");return vs.runKernel(We,{x:t})}});ss.prototype.acosh=function(){return this.throwIfDisposed(),Ap(this)};const Rp=Fs({mod_:function(e,t){let n=As(e,"a","mod"),r=As(t,"b","mod");return[n,r]=fs(n,r),vs.runKernel(Nn,{a:n,b:r})}}),Fp=Fs({addStrict_:function(e,t){mi("strict variants of ops have been deprecated and will be removed in future");const n=As(e,"a","addStrict"),r=As(t,"b","addStrict");return K(n.shape,r.shape,"Error in addStrict: "),Ci(n,r)}}),Dp=Fs({divStrict_:function(e,t){mi("strict variants of ops have been deprecated and will be removed in future");const n=As(e,"a","div"),r=As(t,"b","div");return K(n.shape,r.shape,"Error in divideStrict: "),uo(n,r)}}),_p=Fs({maximumStrict_:function(e,t){mi("strict variants of ops have been deprecated and will be removed in future");const n=As(e,"a","maximumStrict"),r=As(t,"b","maximumStrict");return K(n.shape,r.shape,"Error in maximumStrict: "),Oo(n,r)}}),Op=Fs({minimumStrict_:function(e,t){mi("strict variants of ops have been deprecated and will be removed in future");const n=As(e,"a","minimumStrict"),r=As(t,"b","minimumStrict");return K(n.shape,r.shape,"Error in minimumStrict: "),zo(n,r)}}),Mp=Fs({modStrict_:function(e,t){mi("strict variants of ops have been deprecated and will be removed in future");const n=As(e,"a","modStrict"),r=As(t,"b","modStrict");return K(n.shape,r.shape,"Error in modStrict: "),Rp(n,r)}}),Lp=Fs({mulStrict_:function(e,t){mi("strict variants of ops have been deprecated and will be removed in future");const n=As(e,"a","mul"),r=As(t,"b","mul");return K(n.shape,r.shape,"Error in multiplyStrict: "),$o(n,r)}}),zp=Fs({powStrict_:function(e,t){return mi("strict variants of ops have been deprecated and will be removed in future"),K(e.shape,t.shape,"Error in powStrict: "),nl(e,t)}}),Pp=Fs({squaredDifferenceStrict_:function(e,t){mi("strict variants of ops have been deprecated and will be removed in future");const n=As(e,"a","squaredDifferenceStrict"),r=As(t,"b","squaredDifferenceStrict");return K(n.shape,r.shape,"Error in squaredDifferenceStrict: "),Cu(n,r)}}),Bp=Fs({subStrict_:function(e,t){mi("strict variants of ops have been deprecated and will be removed in future");const n=As(e,"a","subStrict"),r=As(t,"b","subStrict");return K(n.shape,r.shape,"Error in subStrict: "),Eo(n,r)}});ss.prototype.addStrict=function(e){return this.throwIfDisposed(),Fp(this,e)},ss.prototype.add=function(e){return this.throwIfDisposed(),Ci(this,e)},ss.prototype.all=function(e,t){return this.throwIfDisposed(),Ti(this,e,t)},ss.prototype.any=function(e,t){return this.throwIfDisposed(),$i(this,e,t)},ss.prototype.argMax=function(e){return this.throwIfDisposed(),Ei(this,e)};const Wp=Fs({argMin_:function(e,t=0){const n=As(e,"x","argMin");return vs.runKernel(qe,{x:n},{axis:t})}});ss.prototype.argMin=function(e){return this.throwIfDisposed(),Wp(this,e)},ss.prototype.asScalar=function(){return this.throwIfDisposed(),q(1===this.size,()=>"The array must have only 1 element."),Ui(this,[])},ss.prototype.asType=function(e){return this.throwIfDisposed(),$a(this,e)},ss.prototype.as1D=function(){return this.throwIfDisposed(),Ui(this,[this.size])},ss.prototype.as2D=function(e,t){return this.throwIfDisposed(),Ui(this,[e,t])},ss.prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Ui(this,[e,t,n])},ss.prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),Ui(this,[e,t,n,r])},ss.prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),Ui(this,[e,t,n,r,s])};const Vp=Fs({asin_:function(e){const t=As(e,"x","asin");return vs.runKernel(Ke,{x:t})}});ss.prototype.asin=function(){return this.throwIfDisposed(),Vp(this)};const Up=Fs({asinh_:function(e){const t=As(e,"x","asinh");return vs.runKernel(Xe,{x:t})}});ss.prototype.asinh=function(){return this.throwIfDisposed(),Up(this)};const Gp=Fs({atan_:function(e){const t=As(e,"x","atan");return vs.runKernel(Ye,{x:t})}});ss.prototype.atan=function(){return this.throwIfDisposed(),Gp(this)};const Hp=Fs({atan2_:function(e,t){let n=As(e,"a","atan2"),r=As(t,"b","atan2");return[n,r]=fs(n,r),vs.runKernel(Ze,{a:n,b:r})}});ss.prototype.atan2=function(e){return this.throwIfDisposed(),Hp(this,e)};const jp=Fs({atanh_:function(e){const t=As(e,"x","atanh");return vs.runKernel(Je,{x:t})}});ss.prototype.atanh=function(){return this.throwIfDisposed(),jp(this)},ss.prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),Gi(this,e,t,n,r)},ss.prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Sp(this,e,t)},ss.prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),ji(this,e,t,n,r,s)},ss.prototype.broadcastTo=function(e){return this.throwIfDisposed(),Rl(this,e)},ss.prototype.cast=function(e){return this.throwIfDisposed(),$a(this,e)};const qp=Fs({ceil_:function(e){const t=As(e,"x","ceil");return vs.runKernel(ot,{x:t})}});ss.prototype.ceil=function(){return this.throwIfDisposed(),qp(this)},ss.prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Yi(this,e,t)},ss.prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof ss&&(e=[e]),Ji([this,...e],t)},ss.prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),ro(this,e,t,n,r,s,a)},ss.prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),ao(this,e,t,n,r,s)},ss.prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),no(this,e,t,n,r,s,a)},ss.prototype.cos=function(){return this.throwIfDisposed(),bp(this)},ss.prototype.cosh=function(){return this.throwIfDisposed(),wp(this)},ss.prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),lh(this,e,t,n)};const Kp=Fs({depthToSpace_:function(e,t,n="NHWC"){const r=As(e,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];return q(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`),q(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`),q(i%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${r.shape}`),vs.runKernel(It,{x:r},{blockSize:t,dataFormat:n})}});ss.prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Kp(this,e,t)},ss.prototype.depthwiseConv2D=function(e,t,n,r,s,a){return mi("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),oo(this,e,t,n,r,s,a)},ss.prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),oo(this,e,t,n,r,s,a)};const Xp=Fs({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const i=As(e,"x","dilation2d"),o=As(t,"filter","dilation2d");q(3===i.rank||4===i.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+i.rank+"."),q(3===o.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+o.rank+"."),q("NHWC"===a,()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+a);let l=i,u=!1;3===i.rank&&(l=Ui(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c=vs.runKernel($t,{x:l,filter:o},{strides:n,pad:r,dilations:s});return u?Ui(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});ss.prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),Xp(this,e,t,n,r,s)};const Yp=Fs({divNoNan_:function(e,t){let n=As(e,"a","div"),r=As(t,"b","div");[n,r]=fs(n,r);const s=uo(n,r),a=Dl(s),i=mo(r,a);return Fl(i,a,s)}});ss.prototype.divNoNan=function(e){return this.throwIfDisposed(),Yp(this,e)},ss.prototype.divStrict=function(e){return this.throwIfDisposed(),Dp(this,e)},ss.prototype.div=function(e){return this.throwIfDisposed(),uo(this,e)};const Jp=Fs({dot_:function(e,t){const n=As(e,"t1","dot"),r=As(t,"t2","dot");q(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(q(s===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`),1===n.rank&&1===r.rank){const e=Ui(n,[1,-1]),t=Ui(r,[-1,1]),s=eu(e,t);return Ui(s,[])}if(1===n.rank&&2===r.rank){const e=Ui(n,[1,-1]),t=Ui(r,[r.shape[0],r.shape[1]]),s=eu(e,t);return Ui(s,[s.size])}if(2===n.rank&&1===r.rank){const e=Ui(r,[-1,1]),t=eu(n,e);return Ui(t,[t.size])}{const e=Ui(r,[r.shape[0],r.shape[1]]);return eu(n,e)}}});ss.prototype.dot=function(e){return this.throwIfDisposed(),Jp(this,e)},ss.prototype.elu=function(){return this.throwIfDisposed(),co(this)};const Zp=Fs({equalStrict_:function(e,t){mi("strict variants of ops have been deprecated and will be removed in future");const n=As(e,"a","equalStrict"),r=As(t,"b","equalStrict");return K(n.shape,r.shape,"Error in equalStrict: "),mo(n,r)}}),Qp=Fs({greaterEqualStrict_:function(e,t){mi("strict variants of ops have been deprecated and will be removed in future");const n=As(e,"a","greaterEqualStrict"),r=As(t,"b","greaterEqualStrict");return K(n.shape,r.shape,"Error in greaterEqualStrict: "),Io(n,r)}}),ed=Fs({greaterStrict_:function(e,t){mi("strict variants of ops have been deprecated and will be removed in future");const n=As(e,"a","greaterStrict"),r=As(t,"b","greaterStrict");return K(n.shape,r.shape,"Error in greaterStrict: "),vo(n,r)}}),td=Fs({lessEqualStrict_:function(e,t){mi("strict variants of ops have been deprecated and will be removed in future");const n=As(e,"a","lessEqualStrict"),r=As(t,"b","lessEqualStrict");return K(n.shape,r.shape,"Error in lessEqualStrict: "),yu(n,r)}}),nd=Fs({lessStrict_:function(e,t){mi("strict variants of ops have been deprecated and will be removed in future");const n=As(e,"a","lessStrict"),r=As(t,"b","lessStrict");return K(n.shape,r.shape,"Error in lessStrict: "),zh(n,r)}}),rd=Fs({notEqualStrict_:function(e,t){mi("strict variants of ops have been deprecated and will be removed in future");const n=As(e,"a","notEqualStrict"),r=As(t,"b","notEqualStrict");return K(n.shape,r.shape,"Error in notEqualStrict: "),Yo(n,r)}});ss.prototype.equalStrict=function(e){return this.throwIfDisposed(),Zp(this,e)},ss.prototype.equal=function(e){return this.throwIfDisposed(),mo(this,e)};const sd=Fs({erf_:function(e){let t=As(e,"x","erf");return q("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=$a(t,"float32")),vs.runKernel(_t,{x:t})}});ss.prototype.erf=function(){return this.throwIfDisposed(),sd(this)},ss.prototype.exp=function(){return this.throwIfDisposed(),Co(this)},ss.prototype.expandDims=function(e){return this.throwIfDisposed(),go(this,e)};const ad=Fs({expm1_:function(e){const t=As(e,"x","expm1");return vs.runKernel(zt,{x:t})}});ss.prototype.expm1=function(){return this.throwIfDisposed(),ad(this)},ss.prototype.fft=function(){return this.throwIfDisposed(),Pl(this)},ss.prototype.flatten=function(){return this.throwIfDisposed(),Ui(this,[this.size])},ss.prototype.floor=function(){return this.throwIfDisposed(),wo(this)},ss.prototype.floorDiv=function(e){return this.throwIfDisposed(),lo(this,e)},ss.prototype.gather=function(e,t){return this.throwIfDisposed(),ko(this,e,t)},ss.prototype.greaterEqualStrict=function(e){return this.throwIfDisposed(),Qp(this,e)},ss.prototype.greaterEqual=function(e){return this.throwIfDisposed(),Io(this,e)},ss.prototype.greaterStrict=function(e){return this.throwIfDisposed(),ed(this,e)},ss.prototype.greater=function(e){return this.throwIfDisposed(),vo(this,e)},ss.prototype.ifft=function(){return this.throwIfDisposed(),Wl(this)},ss.prototype.irfft=function(){return this.throwIfDisposed(),Vl(this)};const id=Fs({isFinite_:function(e){const t=As(e,"x","isFinite");return vs.runKernel(Zt,{x:t})}});ss.prototype.isFinite=function(){return this.throwIfDisposed(),id(this)};const od=Fs({isInf_:function(e){const t=As(e,"x","isInf");return vs.runKernel(Qt,{x:t})}});ss.prototype.isInf=function(){return this.throwIfDisposed(),od(this)};const ld=Fs({isNaN_:function(e){const t=As(e,"x","isNaN");return vs.runKernel(en,{x:t})}});ss.prototype.isNaN=function(){return this.throwIfDisposed(),ld(this)},ss.prototype.leakyRelu=function(e){return this.throwIfDisposed(),No(this,e)},ss.prototype.lessEqualStrict=function(e){return this.throwIfDisposed(),td(this,e)},ss.prototype.lessEqual=function(e){return this.throwIfDisposed(),yu(this,e)},ss.prototype.lessStrict=function(e){return this.throwIfDisposed(),nd(this,e)},ss.prototype.less=function(e){return this.throwIfDisposed(),zh(this,e)};const ud=Fs({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=As(e,"x","localResponseNormalization");q(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),q(ee(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=Ui(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l=vs.runKernel(hn,{x:i},{depthRadius:t,bias:n,alpha:r,beta:s});return o?Ui(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});ss.prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),ud(this,e,t,n,r)};const cd=Fs({logSigmoid_:function(e){const t=As(e,"x","logSigmoid");return vi(e=>({value:Xo(kl(Xo(e))),gradFunc:t=>$o(t,fl(Xo(e)))}))(t)}});ss.prototype.logSigmoid=function(){return this.throwIfDisposed(),cd(this)},ss.prototype.logSoftmax=function(e){return this.throwIfDisposed(),Ro(this,e)},ss.prototype.logSumExp=function(e,t){return this.throwIfDisposed(),$u(this,e,t)},ss.prototype.log=function(){return this.throwIfDisposed(),So(this)},ss.prototype.log1p=function(){return this.throwIfDisposed(),Tu(this)},ss.prototype.logicalAnd=function(e){return this.throwIfDisposed(),Fo(this,e)},ss.prototype.logicalNot=function(){return this.throwIfDisposed(),dp(this)};const hd=Fs({logicalOr_:function(e,t){const n=As(e,"a","logicalOr","bool"),r=As(t,"b","logicalOr","bool");return fo(n.shape,r.shape),vs.runKernel(cn,{a:n,b:r})}});ss.prototype.logicalOr=function(e){return this.throwIfDisposed(),hd(this,e)};const pd=Fs({logicalXor_:function(e,t){const n=As(e,"a","logicalXor","bool"),r=As(t,"b","logicalXor","bool");return fo(n.shape,r.shape),Fo(hd(e,t),dp(Fo(e,t)))}});ss.prototype.logicalXor=function(e){return this.throwIfDisposed(),pd(this,e)},ss.prototype.matMul=function(e,t,n){return this.throwIfDisposed(),eu(this,e,t,n)},ss.prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),Do(this,e,t,n,r)},ss.prototype.max=function(e,t){return this.throwIfDisposed(),To(this,e,t)},ss.prototype.maximumStrict=function(e){return this.throwIfDisposed(),_p(this,e)},ss.prototype.maximum=function(e){return this.throwIfDisposed(),Oo(this,e)},ss.prototype.mean=function(e,t){return this.throwIfDisposed(),Mo(this,e,t)},ss.prototype.min=function(e,t){return this.throwIfDisposed(),Lo(this,e,t)},ss.prototype.minimumStrict=function(e){return this.throwIfDisposed(),Op(this,e)},ss.prototype.minimum=function(e){return this.throwIfDisposed(),zo(this,e)};const dd=Fs({mirrorPad_:function(e,t,n){q("reflect"===n||"symmetric"===n,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);const r=As(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");q(t.length===r.rank,()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`);const s="reflect"===n?1:0;for(let a=0;a<r.rank;a++)q(2===t[a].length,()=>"Invalid number of paddings. Must be length of 2 each."),q(t[a][0]>=0&&t[a][0]<=r.shape[a]-s&&t[a][1]>=0&&t[a][1]<=r.shape[a]-s,()=>`Padding in dimension ${a} cannot be greater than or equal to ${r.shape[a]-s} or less than 0 for input of shape `+r.shape);return vs.runKernel(In,{x:r},{paddings:t,mode:n})}});ss.prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),dd(this,e,t)},ss.prototype.modStrict=function(e){return this.throwIfDisposed(),Mp(this,e)},ss.prototype.mod=function(e){return this.throwIfDisposed(),Rp(this,e)},ss.prototype.mulStrict=function(e){return this.throwIfDisposed(),Lp(this,e)},ss.prototype.mul=function(e){return this.throwIfDisposed(),$o(this,e)},ss.prototype.neg=function(){return this.throwIfDisposed(),Xo(this)},ss.prototype.norm=function(e,t,n){return this.throwIfDisposed(),wu(this,e,t,n)},ss.prototype.notEqualStrict=function(e){return this.throwIfDisposed(),rd(this,e)},ss.prototype.notEqual=function(e){return this.throwIfDisposed(),Yo(this,e)},ss.prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),Jo(this,e,t,n)},ss.prototype.onesLike=function(){return this.throwIfDisposed(),el(this)},ss.prototype.pad=function(e,t){return this.throwIfDisposed(),tl(this,e,t)};const fd=Fs({pool_:function(e,t,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=As(e,"x","maxPool");let o=i,l=!1;3===i.rank&&(l=!0,o=Ui(i,[1,i.shape[0],i.shape[1],i.shape[2]])),q(Wi(a,s),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`);const u=Ri(o.shape,t,a,s,r),c=[u.dilationHeight,u.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map((e,n)=>e+(e-1)*(t[n]-1)).map(e=>e-1),r=n.map(e=>Math.floor(e/2)),s=n.map((e,t)=>e-r[t]);return n.map((e,t)=>[r[t],s[t]])}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[d,f]=function(e,t,n){const r=n.map(e=>e[0]),s=n.map(e=>e[1]),a=e.concat(r,s),i=t.map((e,t)=>(e-a[t]%e)%e),o=s.map((e,t)=>e+i[t]);return[t.map((e,t)=>[r[t],o[t]]),t.map((e,t)=>[0,i[t]])]}([u.inHeight,u.inWidth],c,h),m=p?r:"valid",g=p?o:Hc(o,c,d),y=("avg"===n?()=>Gi(g,t,a,m):()=>Do(g,t,a,m))(),b=p?y:Sp(y,c,f);return l?Ui(b,[b.shape[1],b.shape[2],b.shape[3]]):b}});ss.prototype.pool=function(e,t,n,r,s){return this.throwIfDisposed(),fd(this,e,t,n,r,s)},ss.prototype.powStrict=function(e){return this.throwIfDisposed(),zp(this,e)},ss.prototype.pow=function(e){return this.throwIfDisposed(),nl(this,e)},ss.prototype.prelu=function(e){return this.throwIfDisposed(),rl(this,e)};const md=Fs({prod_:function(e,t=null,n=!1){let r=As(e,"x","prod");return"bool"===r.dtype&&(r=$a(r,"int32")),vs.runKernel(zn,{x:r},{axis:t,keepDims:n})}});ss.prototype.prod=function(e,t){return this.throwIfDisposed(),md(this,e,t)};const gd=Fs({reciprocal_:function(e){const t=As(e,"x","reciprocal");return vs.runKernel(Wn,{x:t})}});ss.prototype.reciprocal=function(){return this.throwIfDisposed(),gd(this)},ss.prototype.relu=function(){return this.throwIfDisposed(),cl(this)},ss.prototype.relu6=function(){return this.throwIfDisposed(),Gl(this)},ss.prototype.reshapeAs=function(e){return this.throwIfDisposed(),Ui(this,e.shape)},ss.prototype.reshape=function(e){return this.throwIfDisposed(),Ui(this,e)},ss.prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),mu(this,e,t,n)},ss.prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),gu(this,e,t,n)},ss.prototype.reverse=function(e){return this.throwIfDisposed(),hl(this,e)},ss.prototype.rfft=function(){return this.throwIfDisposed(),Bl(this)};const yd=Fs({round_:function(e){const t=As(e,"x","round");return vs.runKernel(Yn,{x:t})}});ss.prototype.round=function(){return this.throwIfDisposed(),yd(this)},ss.prototype.rsqrt=function(){return this.throwIfDisposed(),xh(this)},ss.prototype.selu=function(){return this.throwIfDisposed(),pl(this)},ss.prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),dl(this,e,t,n,r,s,a)},ss.prototype.sigmoid=function(){return this.throwIfDisposed(),fl(this)};const bd=Fs({sign_:function(e){const t=As(e,"x","sign");return vs.runKernel(sr,{x:t})}});ss.prototype.sign=function(){return this.throwIfDisposed(),bd(this)},ss.prototype.sin=function(){return this.throwIfDisposed(),sh(this)},ss.prototype.sinh=function(){return this.throwIfDisposed(),ih(this)},ss.prototype.slice=function(e,t){return this.throwIfDisposed(),ml(this,e,t)},ss.prototype.softmax=function(e){return this.throwIfDisposed(),wl(this,e)},ss.prototype.softplus=function(){return this.throwIfDisposed(),kl(this)},ss.prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),Hc(this,e,t)},ss.prototype.split=function(e,t){return this.throwIfDisposed(),vl(this,e,t)},ss.prototype.sqrt=function(){return this.throwIfDisposed(),Il(this)},ss.prototype.square=function(){return this.throwIfDisposed(),qo(this)},ss.prototype.squaredDifference=function(e){return this.throwIfDisposed(),Cu(this,e)},ss.prototype.squaredDifferenceStrict=function(e){return this.throwIfDisposed(),Pp(this,e)},ss.prototype.squeeze=function(e){return this.throwIfDisposed(),Nl(this,e)},ss.prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof ss?[this,e]:[this,...e];return Sl(n,t)},ss.prototype.step=function(e){return this.throwIfDisposed(),Hl(this,e)};const xd=Fs({stridedSlice_:function(e,t,n,r,s=0,a=0,i=0,o=0,l=0){const u=As(e,"x","stridedSlice");return vs.runKernel(gr,{x:u},{begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l})}});ss.prototype.stridedSlice=function(e,t,n,r,s,a,i,o){return this.throwIfDisposed(),xd(this,e,t,n,r,s,a,i,o)},ss.prototype.subStrict=function(e){return this.throwIfDisposed(),Bp(this,e)},ss.prototype.sub=function(e){return this.throwIfDisposed(),Eo(this,e)},ss.prototype.sum=function(e,t){return this.throwIfDisposed(),Ao(this,e,t)};const wd=Fs({tan_:function(e){const t=As(e,"x","tan");return vs.runKernel(yr,{x:t})}});ss.prototype.tan=function(){return this.throwIfDisposed(),wd(this)},ss.prototype.tanh=function(){return this.throwIfDisposed(),Cl(this)},ss.prototype.tile=function(e){return this.throwIfDisposed(),yo(this,e)},ss.prototype.toBool=function(){return this.throwIfDisposed(),$a(this,"bool")},ss.prototype.toFloat=function(){return this.throwIfDisposed(),$a(this,"float32")},ss.prototype.toInt=function(){return this.throwIfDisposed(),$a(this,"int32")};const kd=Fs({topk_:function(e,t=1,n=!0){const r=As(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got `+t);const a={x:r},i={k:t,sorted:n},[o,l]=vs.runKernel(wr,a,i);return{values:o,indices:l}}});ss.prototype.topk=function(e,t){return this.throwIfDisposed(),kd(this,e,t)},ss.prototype.transpose=function(e){return this.throwIfDisposed(),_l(this,e)};const vd=Fs({unique_:function(e,t=0){const n=As(e,"x","unique","string_or_numeric");q(n.rank>0,()=>"The input tensor must be at least 1D");const r={x:n},s={axis:t},[a,i]=vs.runKernel(vr,r,s);return{values:a,indices:i}}});let Id;function Nd(){return null==Id&&(Id=vs.backend.epsilon()),Id}ss.prototype.unique=function(e){return this.throwIfDisposed(),vd(this,e)},ss.prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),kh(this,e,t)},ss.prototype.unstack=function(e){return this.throwIfDisposed(),Al(this,e)},ss.prototype.where=function(e,t){return this.throwIfDisposed(),Fl(e,this,t)},ss.prototype.zerosLike=function(){return this.throwIfDisposed(),Dl(this)};class Sd extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Sd.prototype)}}class Cd extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Cd.prototype)}}class Td extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Td.prototype)}}class $d extends Error{constructor(e){super(e),Object.setPrototypeOf(this,$d.prototype)}}class Ed extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Ed.prototype)}}function Ad(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Rd(e,t){if(!e)throw new Ed(t)}function Fd(e,t){let n=0;for(const r of e)r===t&&n++;return n}function Dd(e){return 1===e.length?e[0]:e}function _d(e){return Array.isArray(e)?e:[e]}function Od(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function Md(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase())}Error;let Ld={};function zd(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function Pd(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach(e=>Pd(e));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?Pd(t):e[n]=t.value)}}}function Bd(e,t={},n={},r="object",s=!1){if("string"==typeof e){const s=e;let a;if(s in n)a=n[s];else if(s in Ld)a=Ld[s];else if(a=t[s],null==a)throw new Td(`Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new Td(r+": Improper config format: "+JSON.stringify(a)+".\n'className' and 'config' must set.");const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in Ld?[o,l]=Ld.className:i in t&&([o,l]=t[i]),null==o)throw new Td(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const n of Object.keys(Ld))e[n]=Ld[n];for(const s of Object.keys(n))e[s]=n[s];a.config.customObjects=e;const t=Object.assign({},Ld);for(const s of Object.keys(n))Ld[s]=n[s];Pd(a.config);const r=l(o,a.config,n,s);return Ld=Object.assign({},t),r}{const e=Object.assign({},Ld);for(const r of Object.keys(n))Ld[r]=n[r];const t=new o(a.config);return Ld=Object.assign({},e),t}}}function Wd(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Vd(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Ud(e){if(null==e)throw new Td("Invalid value in obj: "+JSON.stringify(e));for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function Gd(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Td(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Hd(e,t,n=0,r=1/0){return Rd(n>=0),Rd(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every(e=>typeof e===t)}function jd(e,t){Array.isArray(e)?(r.assert(e.length>0,()=>t+" is unexpectedly an empty array."),e.forEach((e,n)=>jd(e,`element ${n+1} of ${t}`))):r.assert(Number.isInteger(e)&&e>0,()=>`Expected ${t} to be a positive integer, but got `+qd(e)+".")}function qd(e){return null===e?"null":Array.isArray(e)?"["+e.map(e=>qd(e)).join(",")+"]":"string"==typeof e?`"${e}"`:""+e}function Kd(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function Xd(e,t){return bi(()=>Il(Ao($o(e,e),t,!0)))}class Yd extends u.Serializable{getConfig(){return{}}}class Jd extends Yd{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return bi(()=>{const t=Xd(e,this.axis),n=Yi(t,0,this.maxValue);return $o(e,uo(n,Ci(Nd(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Jd.className="MaxNorm",u.registerClass(Jd);class Zd extends Yd{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return bi(()=>uo(e,Ci(Nd(),Xd(e,this.axis))))}getConfig(){return{axis:this.axis}}}Zd.className="UnitNorm",u.registerClass(Zd);class Qd extends Yd{apply(e){return cl(e)}}Qd.className="NonNeg",u.registerClass(Qd);class ef extends Yd{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return bi(()=>{const t=Xd(e,this.axis),n=Ci($o(this.rate,Yi(t,this.minValue,this.maxValue)),$o(1-this.rate,t));return $o(e,uo(n,Ci(Nd(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}ef.className="MinMaxNorm",u.registerClass(ef);const tf={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function nf(e){return zd(e)}function rf(e,t={}){return Bd(e,u.SerializationMap.getMap().classNameMap,t,"constraint")}function sf(e){return null==e?null:"string"==typeof e?rf({className:e in tf?tf[e]:e,config:{}}):e instanceof Yd?e:rf(e)}const af=["channelsFirst","channelsLast"],of=["nearest","bilinear"],lf=["valid","same","causal"],uf=["max","avg"],cf=["sum","mul","concat","ave"],hf=new Map;function pf(e){Gd(af,"DataFormat",e)}function df(e){Gd(lf,"PaddingMode",e)}function ff(e){Gd(uf,"PoolMode",e)}const mf=[];function gf(e,t){mf.push(e);try{const e=t();return mf.pop(),e}catch(n){throw mf.pop(),n}}function yf(e){if(!wf(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===mf.length?"":mf.join("/")+"/")+e}function bf(e){if(!wf(e))throw new Error("Not a valid tensor name: '"+e+"'");hf.has(e)||hf.set(e,0);const t=hf.get(e);if(hf.set(e,hf.get(e)+1),t>0){const n=`${e}_${t}`;return hf.set(n,1),n}return e}const xf=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function wf(e){return!!e.match(xf)}function kf(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let s=t;s<n;++s)r*=e[s];return r}function vf(e){return Tl(e=Array.isArray(e)?new Float32Array(e):e)}function If(e){return Lo(vf(e)).dataSync()[0]}function Nf(e){return To(vf(e)).dataSync()[0]}function Sf(e,t){if(t<e)throw new Td(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let r=e;r<t;++r)n.push(r);return n}function Cf(e,t){return e.asType(t)}function Tf(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),e.reshape(n)}function $f(e,t,n){return bi(()=>{switch(e.rank){case 1:return gl(e,t,n);case 2:return yl(e,[t,0],[n,e.shape[1]]);case 3:return bl(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return xl(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return ml(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return ml(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Td("sliceAlongFirstAxis() received an unsupported tensor rank: "+e.rank)}})}function Ef(e,t,n){return bi(()=>{switch(e.rank){case 1:return gl(e,t,n);case 2:return yl(e,[0,t],[e.shape[0],n]);case 3:return bl(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return xl(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new Td("sliceAlongLastAxis() received an unsupported tensor rank: "+e.rank)}})}function Af(e,t,n,r){return bi(()=>{switch(e.rank){case 1:return gl(e,t,n);case 2:switch(r){case 1:return $f(e,t,n);case 2:return Ef(e,t,n);default:throw new Td("The axis is not within the rank of the tensor "+r)}case 3:switch(r){case 1:return $f(e,t,n);case 2:return bl(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return Ef(e,t,n);default:throw new Td("The axis is not within the rank of the tensor "+r)}case 4:switch(r){case 1:return $f(e,t,n);case 2:return xl(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return xl(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return Ef(e,t,n);default:throw new Td("The axis is not within the rank of the tensor "+r)}default:throw new Td("sliceAlongLastAxis() received an unsupported tensor rank: "+e.rank)}})}function Rf(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),Ji(e,t)}function Ff(e,t){switch(e.rank){case 1:return Zi([e,t]);case 2:return Qi([e,t],0);case 3:return eo([e,t],0);case 4:return to([e,t],0);default:throw new Td("concatAlongFirstAxis() received an unsupported tensor rank: "+e.rank)}}function Df(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Td(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return yo(e,t)}function _f(e,t=0,n=1,r,s){return ol(e,t,n,r,s)}function Of(e,t,n,r){if(e.rank<2||t.rank<2)throw new $d(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new $d(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = `+t.shape);if(2===e.rank&&2===t.rank)return c.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?zf(e.rank,r,"channelsLast"):null,activation:n});{const s=e.shape.slice(),a=s.pop();e=e.reshape([-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],h=Array.from({length:t.rank},(e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n);t=t.transpose(h).reshape([l,-1]);const p=[...s,...u];return c.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?zf(e.rank,r,"channelsLast"):null,activation:n}).reshape(p)}}function Mf(e,t,n){return bi(()=>(t=Array.isArray(t)?Tl(t,"int32"):t.toInt(),ko(e,t,n)))}function Lf(e){return $o(e,e)}function zf(e,t,n){const r=t.shape;if(1!==t.rank&&t.rank!==e)throw new Td("Unexpected bias dimensions: "+t.rank+"; expected it to be 1 or "+e);if(5===e){if("channelsFirst"===n)return t.reshape(1===r.length?[1,r[0],1,1,1]:[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return t.reshape(1===r.length?[1,1,1,1,r[0]]:[1].concat(r))}else if(4===e){if("channelsFirst"===n)return t.reshape(1===r.length?[1,r[0],1,1]:[1,r[2],r[0],r[1]]);if("channelsLast"===n)return t.reshape(1===r.length?[1,1,1,r[0]]:[1].concat(r))}else if(3===e){if("channelsFirst"===n)return t.reshape(1===r.length?[1,r[0],1]:[1,r[1],r[0]]);if("channelsLast"===n)return t.reshape(1===r.length?[1,1,r[0]]:[1].concat(r))}else if(e<3)return t;throw new Td("Unsupported input rank by biasAdd: "+t.rank)}function Pf(e,t,n){return bi(()=>(null==n&&(n="channelsLast"),pf(n),e.add(zf(e.rank,t,n))))}function Bf(e,t,n,r){return bi(()=>Ml(e,t,n,r))}function Wf(e,t,n=!1){return n?e():t()}const Vf=["fanIn","fanOut","fanAvg"],Uf=["normal","uniform","truncatedNormal"];class Gf extends u.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Hf extends Gf{apply(e,t){return Zo(e,t)}}Hf.className="Zeros",u.registerClass(Hf);class jf extends Gf{apply(e,t){return Qo(e,t)}}jf.className="Ones",u.registerClass(jf);class qf extends Gf{constructor(e){if(super(),"object"!=typeof e)throw new Td("Expected argument of type ConstantConfig but got "+e);if(void 0===e.value)throw new Td("config must have value set but got "+e);this.value=e.value}apply(e,t){return bi(()=>$o(Ii(this.value),Qo(e,t)))}getConfig(){return{value:this.value}}}qf.className="Constant",u.registerClass(qf);class Kf extends Gf{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return ll(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Kf.className="RandomUniform",u.registerClass(Kf);class Xf extends Gf{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new $d(`randomNormal does not support dType ${t}.`);return _f(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Xf.className="RandomNormal",u.registerClass(Xf);class Yf extends Gf{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new $d(`truncatedNormal does not support dType ${t}.`);return El(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Yf.className="TruncatedNormal",u.registerClass(Yf);class Jf extends Gf{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return bi(()=>{if(2!==e.length||e[0]!==e[1])throw new Td("Identity matrix initializer can only be used for 2D square matrices.");return $o(this.gain,bo(e[0]))})}getConfig(){return{gain:this.gain}}}Jf.className="Identity",u.registerClass(Jf);class Zf extends Gf{constructor(e){if(super(),e.scale<0)throw new Td("scale must be a positive float. Got: "+e.scale);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,Gd(Vf,"FanMode",this.mode),this.distribution=null==e.distribution?"normal":e.distribution,Gd(Uf,"Distribution",this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if(pf(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=kf(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=kf(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=kf(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],s=n[1];let a=this.scale;if(a/="fanIn"===this.mode?Math.max(1,r):"fanOut"===this.mode?Math.max(1,s):Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new $d(`${this.getClassName()} does not support dType ${t}.`);return El(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return ll(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Zf.className="VarianceScaling",u.registerClass(Zf);class Qf extends Zf{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Zf.className}}Qf.className="GlorotUniform",u.registerClass(Qf);class em extends Zf{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Zf.className}}em.className="GlorotNormal",u.registerClass(em);class tm extends Zf{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Zf.className}}tm.className="HeNormal",u.registerClass(tm);class nm extends Zf{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Zf.className}}nm.className="HeUniform",u.registerClass(nm);class rm extends Zf{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Zf.className}}rm.className="LeCunNormal",u.registerClass(rm);class sm extends Zf{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Zf.className}}sm.className="LeCunNormal",u.registerClass(sm);class am extends Gf{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new $d("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return bi(()=>{if(e.length<2)throw new $d("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=_f(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=Eu.gramSchmidt(t);return e[0]>e[1]&&(n=n.transpose()),$o(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}am.className="Orthogonal",u.registerClass(am);const im={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function om(e,t={}){return Bd(e,u.SerializationMap.getMap().classNameMap,t,"initializer")}function lm(e){return zd(e)}function um(e){if("string"==typeof e){const t=e in im?im[e]:e;if("GlorotNormal"===t)return new em;if("GlorotUniform"===t)return new Qf;if("HeNormal"===t)return new tm;if("HeUniform"===t)return new nm;if("LeCunNormal"===t)return new rm;if("LeCunUniform"===t)return new sm;{const e={};return e.className=t,e.config={},om(e)}}return e instanceof Gf?e:om(e)}let cm=0;function hm(){return cm++}const pm={};function dm(e=""){return e in pm||(pm[e]=0),pm[e]+=1,e+pm[e].toString()}function fm(e){return Array.isArray(e)&&Array.isArray(e[0])}function mm(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function gm(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Td("Expected Tensor length to be 1; got "+e.length);t=e[0]}else t=e;return t}function ym(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return(e=e)[0];throw new Td("Expected exactly 1 Shape; got "+e.length)}return e}function bm(e){let t=0;for(const n of e)t+=0===n.shape.length?1:n.shape.reduce((e,t)=>e*t);return t}class xm{constructor(e,t="float32",n="Variable",r=!0,s=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=hm(),this.originalName=yf(n=null==n?"Variable":n),this.name=bf(this.originalName),this.trainable_=r,this.constraint=s,this.val=function(e,t=!0,n,r){return vs.makeVariable(e,t,n,r)}(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function wm(e){return e.map(e=>e.read())}function km(e){e.forEach(e=>{e[0].write(e[1])})}class vm{constructor(e){this.dtype=e.dtype,this.shape=e.shape,this.ndim=null!=e.shape?e.shape.length:e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class Im{constructor(e,t,n,r,s,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=hm(),null!=a&&(this.originalName=yf(a),this.name=bf(this.originalName)),this.rank=t.length}}let Nm=0;class Sm{constructor(e,t){this.callArgs=t,this.id=Nm++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const n of e.inboundLayers)null!=n&&n.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)e.push(null!=t?t.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Cm=0;class Tm extends u.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Cm++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Od(e)+"_"+dm(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}this.initialWeights=null!=e.weights?e.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Cd(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Td(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Dd(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Dd(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Sd("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new Sd("Layer "+this.name+" is not connected, no input to return.");return Dd(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Sd("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new Sd("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return Dd(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=_d(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=_d(this.inputSpec);if(e.length!==t.length)throw new Td(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: `+e);for(let n=0;n<e.length;n++){const r=e[n],s=t[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new Td(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new Td(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new Td(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new Td(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const e=r.shape;for(const t in s.axes){const r=Number(t),a=s.axes[t],i=r>=0?e[r]:e[e.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new Td(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=s.shape)for(let e=0;e<s.shape.length;++e){const t=s.shape[e],a=r.shape[e];if(null!=t&&null!=a&&t!==a)throw new Td(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=_d(e);let r=!0;for(const a of n)if(!(a instanceof Im)){r=!1;break}let s=!0;for(const a of n)if(a instanceof Im){s=!1;break}if(r===s)throw new Td("Arguments to apply() must be all SymbolicTensors or all Tensors");return gf(this.name,()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of _d(e))t.push(n.shape);this.build(Dd(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(e),s){let r=this.call(e,t);const s=_d(r),a=[];for(let e of s)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(r=Dd(a),null!=this.activityRegularizer)throw new $d("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(e){e=_d(e);const t=[];for(const n of e)t.push(n.shape);return Dd(t)}(e),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map((n,r)=>new Im(a,n,this,_d(e),t,this.name,r)):new Im(a,r,this,_d(e),t,this.name),this.addInboundNode(e,s,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new $d("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}})}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(e)+") does not match that of the "+`batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer `+this.name);else{let t=!1;this.batchInputShape.forEach((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)}),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: `+JSON.stringify(this.batchInputShape))}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Sd(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Sd(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Cd(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return bm(this.weights)}build(e){this.built=!0}getWeights(e=!1){return wm(e?this.trainableWeights:this.weights)}setWeights(e){bi(()=>{const t=this.weights;if(t.length!==e.length)throw new Td(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=wm(t);for(let a=0;a<s.length;++a){const i=s[a],o=t[a],l=e[a];if(!r.arraysEqual(i.shape,l.shape))throw new Td(`Layer weight shape ${i.shape} not compatible with provided weight shape `+l.shape);n.push([o,l])}km(n)})}addWeight(e,t,n,r,s,a,i){if(-1!==this._addedWeightNames.indexOf(e))throw new Td(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=um("zeros"));const o=r.apply(t,n),l=new xm(o,n,e,a,i);return o.dispose(),null!=s&&this.addLoss(()=>s.apply(l.read())),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=_d(e),null!=this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach(e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return t}addInboundNode(e,t,n,r,s,a,i=null){const o=_d(e);t=_d(t),n=_d(n),r=_d(r),s=mm(s),a=mm(a);const l=[],u=[],c=[];for(const h of o)l.push(h.sourceLayer),u.push(h.nodeIndex),c.push(h.tensorIndex);new Sm({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let h=0;h<t.length;h++)t[h].sourceLayer=this,t[h].nodeIndex=this.inboundNodes.length-1,t[h].tensorIndex=h}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function $m(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const r=$m(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of r)-1===t.indexOf(e)&&t.push(e)}return t}}}class Em extends Tm{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:dm("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Td("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Td("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Td("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new Im(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new Sm({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Td("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function Am(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Td("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new Em({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}async function Rm(e){if(null==e)return;const t=[],n=[],r=[];for(const s in e){const a=e[s];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(s),r.push(e)}}if(t.length>0){const s=await Promise.all(t);for(let t=0;t<s.length;++t)e[n[t]]=s[t][0];xi(r)}}function Fm(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var Dm;Em.className="InputLayer",u.registerClass(Em),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(Dm||(Dm={}));class _m{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class Om{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class Mm extends _m{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const r in t){const e=t[r];if("number"==typeof e)this.totals.hasOwnProperty(r)||(this.totals[r]=0),this.totals[r]=this.totals[r]+e*n;else{let t;r in this.totals?t=this.totals[r]:this.totals[r]=0;const s=bi(()=>Ci(this.totals[r],$o(e,n)));this.totals[r]=s,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const n of this.params.metrics)null!=this.totals[n]&&("number"==typeof this.totals[n]?t[n]=this.totals[n]/this.seen:bi(()=>{const e=$o(uo(1,this.seen),this.totals[n]);t[n]=e,this.totals[n].dispose(),wi(t[n])}))}}class Lm extends _m{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const n in t)null==this.history[n]&&(this.history[n]=[]),this.history[n].push(t[n])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)"number"!=typeof r[a]&&(e.push(r[a].data()),t.push(s),n.push(a))}const r=await Promise.all(e);for(let s=0;s<r.length;++s)this.history[t[s]][n[s]].dispose(),this.history[t[s]][n[s]]=r[s][0]}}class zm extends _m{constructor(e,t){if(super(),this.currentEpoch=0,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");r.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t){let n,s=r.now();return(...a)=>{const i=r.now();return i-s<t||(s=i,n=e(...a)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await Rm(n),r.push(this.yield(e,t,n))),r.push(Bu()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await Rm(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await Rm(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(Bu()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await Rm(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await Rm(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(Bu()):r.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await Rm(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await Rm(e),await this.trainEnd(e))}}function Pm(e,t){return null==e&&(e={}),e instanceof _m?[e]:Array.isArray(e)&&e[0]instanceof _m?e:_d(e).map(e=>new zm(e,t))}class Bm{constructor(){}static registerCallbackConstructor(e,t){r.assert(e>=0&&Number.isInteger(e),()=>"Verbosity level is expected to be an integer >= 0, but got "+e),Bm.checkForDuplicate(t),null==Bm.constructors[e]&&(Bm.constructors[e]=[]),Bm.constructors[e].push(t)}static checkForDuplicate(e){for(const t in Bm.constructors)Bm.constructors[+t].forEach(t=>{if(t===e)throw new Td("Duplicate callback constructor.")})}static clear(){Bm.constructors={}}static createCallbacks(e){const t=[];for(const n in Bm.constructors){const r=+n;e>=r&&t.push(...Bm.constructors[r])}return t.map(e=>new e)}}function Wm(e,t,n,r,s,a,i,o,l){const u=new Lm,c=[new Mm,...Bm.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new Om(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function Vm(e,t={},n=!1){return Bd(e,u.SerializationMap.getMap().classNameMap,t,"layer",n)}function Um(e,t){return bi(()=>{"float32"!==e.dtype&&(e=e.asType("float32"));const n=Ao(Lf(e),t,!0),r=xo(n.shape,Nd()),s=Il(Oo(n,r));return uo(e,s)})}function Gm(e,t){return bi(()=>Mo(Lf(Eo(t,e)),-1))}function Hm(e,t){return bi(()=>Mo(Si(Eo(t,e)),-1))}function jm(e,t){return bi(()=>{const n=Eo(e,t),r=Yi(Si(e),Nd(),Number.MAX_VALUE),s=Si(uo(n,r));return $o(100,Mo(s,-1))})}function qm(e,t,n=!1){return bi(()=>{if(n)t=wl(t);else{const e=Ao(t,t.shape.length-1,!0);t=uo(t,e)}return t=Yi(t,Nd(),1-Nd()),Xo(Ao($o(e.toFloat(),So(t)),t.shape.length-1))})}function Km(e,t,n=!1){return bi(()=>{const r=wo(function(e){const t=[kf(e.shape)];return e.reshape(t)}(e)).toInt(),s=(t=Yi(t,Nd(),1-Nd())).shape;return qm(Jo(r,s[s.length-1]).reshape(s),t,n)})}function Xm(e,t){return bi(()=>{let n;return n=Yi(t,Nd(),1-Nd()),n=So(uo(n,Eo(1,n))),Mo(function(e,t){if(!r.arraysEqual(e.shape,t.shape))throw new Td(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return bi(()=>{const n=t.relu(),r=t.abs().neg();return n.sub(t.mul(e)).add(r.exp().log1p())})}(e,n),-1)})}function Ym(e,t){return bi(()=>{const n=Um(e,-1),r=Um(t,-1),s=$o(n,r);return Xo(Ao(s,-1))})}Bm.constructors={};const Jm={meanSquaredError:Gm,meanAbsoluteError:Hm,meanAbsolutePercentageError:jm,meanSquaredLogarithmicError:function(e,t){return bi(()=>{const n=Yi(t,Nd(),Number.MAX_VALUE),r=So(Ci(1,n)),s=Yi(e,Nd(),Number.MAX_VALUE),a=So(Ci(1,s));return Mo(Lf(Eo(r,a)),-1)})},squaredHinge:function(e,t){return bi(()=>{const n=Oo(0,Eo(1,$o(e,t)));return Mo(Lf(n),-1)})},hinge:function(e,t){return bi(()=>{const n=Oo(0,Eo(1,$o(e,t)));return Mo(n,-1)})},categoricalHinge:function(e,t){return bi(()=>{const n=Ao($o(e,t),-1),r=To($o(Eo(1,e),t),-1);return Oo(0,Ci(1,Eo(r,n)))})},logcosh:function(e,t){return bi(()=>{const n=Math.log(2),r=Eo(t,e),s=Eo(Ci(r,kl($o(-2,r))),n);return Mo(s,-1)})},categoricalCrossentropy:qm,sparseCategoricalCrossentropy:Km,binaryCrossentropy:Xm,kullbackLeiblerDivergence:function(e,t){return bi(()=>{const n=Yi(e,Nd(),1),r=Yi(t,Nd(),1);return Ao($o(e,So(uo(n,r))),-1)})},poisson:function(e,t){return bi(()=>{const n=So(Ci(Nd(),t));return Mo(Eo(t,$o(e,n)),-1)})},cosineProximity:Ym};function Zm(e){if("string"==typeof e){if(e in Jm)return Jm[e];let t="Unknown loss "+e;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Td(t)}return e}function Qm(e,t){return bi(()=>{const n=$o(.5,el(t)),r=Cf(vo(t,n),e.dtype);return Mo(mo(e,r),-1)})}function eg(e,t){return bi(()=>Cf(mo(Ei(e,-1),Ei(t,-1)),"float32"))}function tg(e,t){return Xm(e,t)}function ng(e,t){return e.rank===t.rank&&(e=e.squeeze([e.rank-1])),(t=t.argMax(-1)).dtype!==e.dtype&&(t=t.asType(e.dtype)),mo(e,t).asType("float32")}const rg=qm,sg=Km,ag={binaryAccuracy:Qm,categoricalAccuracy:eg,precision:function(e,t){return bi(()=>{const n=function(e,t){return bi(()=>Fo(e.equal(1),t.equal(1)).sum().cast("float32"))}(e,t),r=function(e,t){return bi(()=>Fo(e.equal(0),t.equal(1)).sum().cast("float32"))}(e,t),s=n.add(r);return Fl(vo(s,0),n.div(s),0).cast("float32")})},categoricalCrossentropy:rg,sparseCategoricalCrossentropy:sg,mse:Gm,MSE:Gm,mae:Hm,MAE:Hm,mape:jm,MAPE:jm,cosine:Ym};function ig(e){if("string"==typeof e&&e in ag)return ag[e];if("string"!=typeof e&&null!=e)return e;throw new Td("Unknown metric "+e)}function og(e){if(Rd(null!==e,"Unknown LossOrMetricFn "+e),"string"==typeof e)return e;{let t;for(const n of Object.keys(Jm))if(Jm[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(ag))if(ag[n]===e){t=n;break}return void 0!==t?t:e.name}}function lg(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!ug(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function ug(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!ug(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!ug(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function cg(e,t,n=console.log){let r="";for(let s=0;s<e.length;++s)s>0&&(r=r.slice(0,r.length-1)+" "),r+=e[s],r=r.slice(0,t[s]),r+=" ".repeat(t[s]-r.length);n(r)}function hg(e,t,n){let r;try{r=JSON.stringify(e.outputShape)}catch(sO){r="multiple"}cg([`${e.name} (${e.getClassName()})`,r,e.countParams().toString()],t,n)}function pg(e,t,n,r){let s;try{s=JSON.stringify(e.outputShape)}catch(sO){s="multiple"}const a=[];for(const u of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(u)))for(let e=0;e<u.inboundLayers.length;++e)a.push(`${u.inboundLayers[e].name}[${u.nodeIndices[e]}][${u.tensorIndices[e]}]`);const i=e.name,o=e.getClassName(),l=0===a.length?"":a[0];cg([`${i} (${o})`,s,e.countParams().toString(),l],t,r);for(let u=1;u<a.length;++u)cg(["","","",a[u]],t,r)}function dg(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function fg(e,t){if(null===e)return null;if("string"==typeof e)return Md(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];dg(t,s,r)?n.push(r):n.push(fg(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];if("name"===n&&"string"==typeof r)t[n]=r;else{const e=Md(n);t[e]=fg(r,e)}}return t}}function mg(e,t){if(null==e)return null;if("string"==typeof e)return Od(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];dg(t,s,r)?n.push(r):n.push(mg(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];t[Od(n)]="name"!==n&&"className"!==n||"string"!=typeof r?mg(r,n):r}return t}}class gg{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof gg)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new Td(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return $a(t,e.dtype)}catch(sO){throw new Td(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof Im){if(null==this.id2Value[e.id])throw new Td("Nonexistent key: "+e.name);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Td("Feed dict has no SymbolicTensor name: "+e);return this.id2Value[t]}}getMask(e){if(e instanceof Im){if(null==this.id2Value[e.id])throw new Td("Nonexistent key: "+e.name);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Td("Feed dict has no SymbolicTensor name: "+e);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&xi(this.id2Mask)}}const yg={},bg={};function xg(e,t,n,s){const a=null!=n&&n.training,i=Array.isArray(e),o=i?e:[e],l=o.map(e=>e.name),u=[],c=t.names();for(const r of l)-1!==c.indexOf(r)?u.push(t.getValue(r)):u.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const h=l.join(",")+"|"+t.names().join(",");let p,d;if(null==yg[h]){const e=function(e,t){r.assert(null!=e&&e.length>0,()=>"Expected at least one fetch, got none");let n=[],s={};if(1===e.length){const r=kg(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=kg(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const t in i)null==s[t]&&(s[t]=new Set),i[t].forEach(e=>s[t].add(e))}}return{sorted:n,recipientCounts:wg(s)}}(o,t);p=e.sorted,d=e.recipientCounts,yg[h]=p,bg[h]=d}p=yg[h],d={},a||Object.assign(d,bg[h]);const f=new gg(t);for(let r=0;r<p.length;++r){if(null!=s){const e=yi().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const e=p[r],i=e.sourceLayer;if(i instanceof Em)continue;const o=[],c=[],h=[];let m=!1;for(const n of e.inputs){const e=f.getValue(n),r=f.getMask(n);o.push(e),c.push(r),null!=r&&(m=!0),a||(d[n.name]--,0!==d[n.name]||t.hasKey(n)||-1!==l.indexOf(n.name)||e.isDisposed||!0===n.sourceLayer.stateful||h.push(e))}m&&((n=n||{}).mask=c[0]);const g=_d(i.apply(o,n));let y=null;i.supportsMasking&&(y=i.computeMask(o,c));const b=vg(e),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){f.hasKey(x[t])||f.add(x[t],g[t],Array.isArray(y)?y[0]:y);const e=l.indexOf(x[t].name);-1!==e&&(u[e]=g[t])}a||xi(h)}return f.disposeMasks(),i?u:u[0]}function wg(e){const t={};for(const n in e)t[n]=e[n].size;return t}function kg(e,t){const n=new Set,r=[],s={};for(const o of t.names())n.add(o);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),r.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==s[t.name]&&(s[t.name]=new Set),s[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:r,recipientMap:s}}function vg(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class Ig extends Tm{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=dm(e)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(e.inputs)?e.inputs.slice():[e.inputs],this.outputs=Array.isArray(e.outputs)?e.outputs.slice():[e.outputs],Vd(this.inputs).length!==this.inputs.length)throw new Td("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+this.inputs.map(e=>e.name));Vd(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+this.outputs.map(e=>e.name)),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const y of this.outputs){const e=y.nodeIndex,t=y.tensorIndex;this.outputLayers.push(y.sourceLayer),this.outputLayersNodeIndices.push(e),this.outputLayersTensorIndices.push(t)}for(const y of this.inputs){const e=y.sourceLayer,t=y.nodeIndex,n=y.tensorIndex;Rd(0===t,"input layer has >1 nodes"),Rd(0===n,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(t),this.inputLayersTensorIndices.push(n)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let y=0;y<this.inputLayers.length;y++){const t=this.inputLayers[y];if(!(t instanceof Em))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${y} (0-based) originates from layer type ${t.getClassName()}.`);this.inputNames.push(t.name),this.feedInputShapes.push(t.batchInputShape),this.feedInputNames.push(t.name)}for(const y of this.outputLayers)this.outputNames.push(y.name);this.internalInputShapes=this.inputs.map(e=>e.shape),this.internalOutputShapes=this.outputs.map(e=>e.shape);const t={},n={},r={},s={},a={},i=[],o=(e,t,n,r,s,l)=>{null!=r&&null!=s&&null!=l||(r=e.sourceLayer,s=e.nodeIndex,l=e.tensorIndex);const u=r.inboundNodes[s];if(-1!==n.indexOf(u))throw new Cd(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(Ig.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let a=0;a<c;a++)o(u.inputTensors[a],t,n,u.inboundLayers[a],u.nodeIndices[a],u.tensorIndices[a]);for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const y of this.outputs)o(y,l,u);const c=i.slice().reverse();for(const y of c){n[y.id]=y,y.id in t||(t[y.id]=0);let e=t[y.id];e=Math.max(e,null==r[y.outboundLayer.id]?0:r[y.outboundLayer.id]),r[y.outboundLayer.id]=e,s[y.outboundLayer.id]=y.outboundLayer,t[y.id]=e;for(let r=0;r<y.inboundLayers.length;r++){const s=y.inboundLayers[r].inboundNodes[y.nodeIndices[r]];t[s.id]=Math.max(e+1,null==t[s.id]?0:t[s.id]),n[s.id]=s}}const h={};for(const y in t){const e=t[y];e in h||(h[e]=[]),h[e].push(n[y])}const p={};for(const y in r){const e=r[y];e in p||(p[e]=[]),p[e].push(s[y])}let d=Object.keys(p).map(e=>parseInt(e,10)).sort(Wd);this.layers=[];for(const y of d){const e=p[y];e.sort((e,t)=>{const n=a[e.id],r=a[t.id];return n<r?-1:n>r?1:0});for(const t of e)t instanceof Ig&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=p,d=Object.keys(h).map(e=>parseInt(e,10)).sort(Wd);const f=this.inputs.slice(),m=[];for(const y of d)for(const e of h[y]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new Cd("Graph disconnected: cannot obtain value for tensor "+n+` at layer "${t.name}". The following previous layers were accessed without issue: `+m);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map(e=>e.name);for(const y of g){const e=g.filter(e=>e===y).length;if(1!==e)throw new Cd(`The name "${y}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Sm({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(e=>null),outputMasks:this.outputs.map(e=>null),inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs.map(e=>e.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{t._trainableWeights.forEach(t=>t.trainable=e)}),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Td("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let r=0;for(const a of this.layers)for(const e of a.weights){if(null!=n[e.originalName])throw new Td("Duplicate weight name: "+e.originalName);n[e.originalName]=e,r++}const s=[];for(const a in e){let r=a;if(null==n[a]){const e=a.split("/");r=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[r])s.push([n[r],e[a]]);else if(t)throw new Td("Provided weight data has no target variable: "+a);delete n[r]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Td(`${e.length} of ${r} weights are not set: `+e)}km(s)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 2.8.4",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=mg(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return bi(()=>{e=_d(e);const n=new gg;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return xg(this.outputs,n,t)})}computeMask(e,t){return bi(()=>{let n;return e=_d(e),n=null==t?Ad(null,e.length):_d(t),this.runInternalGraph(e,n)[1]})}computeOutputShape(e){const t=mm(e);if(t.length!==this.inputLayers.length)throw new Td(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let i=0;i<t.length;i++)n[this.inputLayers[i].name+"_0_0"]=t[i];const r=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(Wd);if(r.length>1)for(const i of r){const e=this.nodesByDepth[i];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map(e=>e.id).indexOf(e.id))continue;const r=[];for(let i=0;i<t.inboundLayers.length;i++)r.push(n[`${t.inboundLayers[i].name}_${t.nodeIndices[i]}_${t.tensorIndices[i]}`]);const s=mm(e.computeOutputShape(Dd(r))),a=e.inboundNodes.indexOf(t);for(let t=0;t<s.length;t++)n[`${e.name}_${a}_${t}`]=s[t]}}const s=[],a=[];for(let i=0;i<this.outputLayers.length;i++)a.push(`${this.outputLayers[i].name}_${this.outputLayersNodeIndices[i]}_${this.outputLayersTensorIndices[i]}`);for(let i=0;i<a.length;i++){const e=a[i];Rd(e in n),s.push(n[e])}return Dd(s)}runInternalGraph(e,t){null==t&&(t=Ad(null,e.length));const n={};for(let o=0;o<this.inputs.length;++o)n[this.inputs[o].id]=[e[o],t[o]];const r=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(Wd);for(const o of r){const e=this.nodesByDepth[o];for(const t of e){const e=t.outboundLayer,r=t.inputTensors,s=t.outputTensors,a=new Array;for(const t of r)t.id in n&&a.push(n[t.id]);if(a.length===r.length){let r,i,o,l,u={};if(null!=t.callArgs&&(u=t.callArgs),1===a.length){const[t,n]=a[0];null==u.mask&&(u.mask=n),o=_d(e.call(t,u)),l=_d(e.computeMask(t,n)),r=[t],i=[n]}else r=a.map(e=>e[0]),i=a.map(e=>e[1]),null==u.mask&&(u.mask=i),o=_d(e.call(r,u)),l=_d(e.computeMask(r,i));if(e.activityRegularizer)throw new $d("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<s.length;++e)n[s[e].id]=[o[e],l[e]]}}}const s=[],a=[],i=[];for(const o of this.outputs){Rd(o.id in n,`Could not compute output ${o.name} : ${o.id}`);const[e,t]=n[o.id];i.push(e.shape),s.push(e),a.push(t)}return[s,a,i]}buildNodeConversionMap(e){const t={};let n;for(const r of this.layers){n=r instanceof Ig?1:0;for(let e=0;e<r.inboundNodes.length;e++){const s=Ig.nodeKey(r,e);this.containerNodes.has(s)&&(t[s]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Td(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Td("Provide either a layer name or layer index");for(const n of this.layers)if(n.name===e)return n;throw new Td("No such layer: "+e)}calculateLosses(){return bi(()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const r=Ig.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e})}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const a of this.layers){const e=a.getClassName(),r=a.getConfig(),s=[];for(let n=0;n<a.inboundNodes.length;n++){const e=a.inboundNodes[n],r=Ig.nodeKey(a,n);let i={};if(this.containerNodes.has(r)){if(e.callArgs)try{JSON.stringify(e.callArgs),i=e.callArgs}catch(sO){console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: `+e.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),i={}}if(e.inboundLayers.length>0){const n=[];for(let r=0;r<e.inboundLayers.length;r++){const s=e.inboundLayers[r],a=e.tensorIndices[r];let o=t[Ig.nodeKey(s,e.nodeIndices[r])];null==o&&(o=0),n.push([s.name,o,a,i])}s.push(n)}}}const i={};i.name=a.name,i.className=e,i.config=r,i.inboundNodes=s,n.push(i)}e.layers=n;const r=[];for(let a=0;a<this.inputLayers.length;a++){const e=this.inputLayers[a],n=Ig.nodeKey(e,this.inputLayersNodeIndices[a]);if(!this.containerNodes.has(n))continue;let s=t[n];null==s&&(s=0),r.push([e.name,s,this.inputLayersTensorIndices[a]])}e.inputLayers=r;const s=[];for(let a=0;a<this.outputLayers.length;a++){const e=this.outputLayers[a],n=Ig.nodeKey(e,this.outputLayersNodeIndices[a]);if(!this.containerNodes.has(n))continue;let r=t[n];null==r&&(r=0),s.push([e.name,r,this.outputLayersTensorIndices[a]])}return e.outputLayers=s,e}static fromConfig(e,t,n={},r=!1){const s={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let r;for(const a of t){const o=a[0],l=a[1],u=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(e,t);const c=s[o];if(c.inboundNodes.length<=l)return void i(e,t);n.push(c.inboundNodes[l].outputTensors[u])}n.length>0&&e.apply(Dd(n),r)}function l(e){const n=e.name,a=Vm(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a,e.inboundNodes.forEach(e=>{if(!(e instanceof Array))throw new Td("Corrupted configuration, expected array for nodeData: "+e);i(a,e)})}const u=t.name,c=t.layers;for(const m of c)l(m);for(;!Ud(a);)for(const e of c){const t=s[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const m of d){const e=m[0],t=m[1],n=m[2];Rd(e in s),h.push(s[e].inboundNodes[t].outputTensors[n])}const f=t.outputLayers;for(const m of f){const e=m[0],t=m[1],n=m[2];Rd(e in s),p.push(s[e].inboundNodes[t].outputTensors[n])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new Td("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){bi(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates()})})}}function Ng(e,t){return function(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>null);if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided classWeight is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach(t=>{n.push(t in e?e[t]:null)}),n}throw new Error(`The model has multiple (${r}) outputs, so classWeight must be either an array with ${r} elements or an object with ${t} keys. Provided classWeight not understood: ${JSON.stringify(e)}`)}(e,t)}async function Sg(e,t,n,r){if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=bi(()=>{if(1===e.shape.length)return e.clone();if(2===e.shape.length){if(e.shape[1]>1)return e.argMax(1);if(1===e.shape[1])return e.reshape([e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),r=Array.from(await t.data());xi(t);const s=[];return r.forEach(e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);s.push(n[e])}),Tl(s,"float32")}return null}function Cg(e,t){return $o(e,t)}function Tg(e,t){let n,s;n=t.xs,s=t.ys,r.assert(null!=n&&null!=s,()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+t);const a=$g("input",e.inputNames,n),i=$g("output",e.outputNames,s),o=a[0].shape[0];r.assert(a.length===e.inputs.length,()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: `+JSON.stringify(e.inputNames)+")"),r.assert(i.length===e.outputs.length,()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: `+JSON.stringify(e.outputNames)+")");for(let l=0;l<a.length;l++)r.assert(a[l].shape[0]===o,()=>`Batch size mismatch: input ${e.inputNames[l]} has ${a[l].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`);for(let l=0;l<i.length;l++)r.assert(i[l].shape[0]===o,()=>`Batch size mismatch: output ${e.outputNames[l]} has ${i[l].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`);return{xs:a,ys:i}}function $g(e,t,n){if(n instanceof ss)return[n];if(Array.isArray(n))return r.assert(n.length===t.length,()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`),n;{const r=[];for(const s of t){if(null==n[s])throw new Td(`The feature data generated by the dataset lacks the required ${e} key '${s}'.`);r.push(n[s])}return r}}function Eg(e){return"function"==typeof e.iterator}function Ag(e){r.assert(e>0&&Number.isInteger(e),()=>"batchSize is required to be a positive integer, but got "+e)}function Rg(e,t,n){return null==e?[null]:Array.isArray(e)?e.map(e=>$f(e,t,n-t)):$f(e,t,n-t)}function Fg(e,t){return bi(()=>null==e?null:Array.isArray(e)?e.map(e=>Fg(e,t)):Mf(e,"int32"===t.dtype?t:t.toInt()))}function Dg(e,t){const n=[];let r=0,s=null;for(;r<e;)s=r+t,s>=e&&(s=e),n.push([r,s]),r=s;return n}function _g(e){const t=[];e instanceof ss&&(e=[e]);for(let n=0;n<e.length;++n){const r=e[n];if(1===r.rank)t.push(Tf(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r)}}return t}function Og(e,t){if(null==e)return;const n=[];if(t instanceof ss)n.push(t.id);else if(Array.isArray(t))t.forEach(e=>n.push(e.id));else if(null!=t)for(const s in t)n.push(t[s].id);const r=[];if(e instanceof ss)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach(e=>{-1===n.indexOf(e.id)&&r.push(e)});else if(null!=e)for(const s in e){const t=e[s];-1===n.indexOf(t.id)&&r.push(t)}r.forEach(e=>{e.isDisposed||e.dispose()})}function Mg(e){return Array.isArray(e)}function Lg(e){return!function(e){return e instanceof ss}(e)&&!Mg(e)}function zg(e,t,n,r=!0,s=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(Mg(e)&&e.length>0)t=!0;else if(Lg(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Td(`Error when checking model ${s} expected no data, but got `+e)}return[]}if(null==e)return t.map(e=>null);let a;if(Lg(e)){e=e,a=[];for(const n of t){if(null==e[n])throw new Td(`No data provided for "${n}". Need data for each key in: `+t);a.push(e[n])}}else if(Mg(e)){if((e=e).length!==t.length)throw new Td(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): `+e);a=e}else{if(e=e,t.length>1)throw new Td(`The model ${s} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape `+e.shape);a=[e]}if(a=_g(a),null!=n)for(let i=0;i<t.length;++i){if(null==n[i])continue;const e=a[i];if(e.shape.length!==n[i].length)throw new Td(`Error when checking ${s}: expected ${t[i]} to have ${n[i].length} dimension(s). but got array with shape `+e.shape);for(let a=0;a<n[i].length;++a){if(0===a&&!r)continue;const o=e.shape[a],l=n[i][a];if(null!=l&&l>=0&&o!==l)throw new Td(`Error when checking ${s}: expected ${t[i]} to have shape [${n[i]}], but got array with shape [${e.shape}].`)}}return a}function Pg(e,t,n,r=!0,s=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new Td(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new Td(`The model expects ${t.length} ${s} Tensors, but only received one Tensor. Found: array with shape `+JSON.stringify(e.shape)+".");a=[e]}if(null!=n)for(let i=0;i<t.length;++i){if(null==n[i])continue;const e=a[i];if(e.shape.length!==n[i].length)throw new Td(`Error when checking ${s}: expected ${t[i]} to have ${n[i].length} dimension(s), but got array with shape `+JSON.stringify(e.shape));for(let a=0;a<n[i].length;++a){if(0===a&&!r)continue;const o=e.shape[a],l=n[i][a];if(null!=l&&l!==o)throw new Td(`Error when checking ${s}: expected ${t[i]} to have shape ${JSON.stringify(n[i])} but got array with shape ${JSON.stringify(e.shape)}.`)}}}class Bg extends Ig{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Td("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,r=console.log){const s=function(e){let t=!0;const n=[],r=[];for(const s in e.nodesByDepth)n.push(e.nodesByDepth[s]);for(const s of n){if(s.length>1||1===s.length&&s[0].inboundLayers.length>1){t=!1;break}r.push(...s)}if(t)for(const s of e.layers){let e=!1;for(const n of s.inboundNodes)if(-1!==r.indexOf(n)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let i;if(s?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(e=>Math.floor(t*e))),!s){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}r("_".repeat(t)),cg(a,n,r),r("=".repeat(t));const o=e.layers;for(let c=0;c<o.length;++c)s?hg(o[c],n,r):pg(o[c],n,i,r),r((c===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=bm(null!=e.collectedTrainableWeights?e.collectedTrainableWeights:e.trainableWeights),t}(e),u=bm(e.nonTrainableWeights);r("Total params: "+(l+u)),r("Trainable params: "+l),r("Non-trainable params: "+u),r("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>zu.adagrad(.01),Adadelta:()=>zu.adadelta(1,.95,Nd()),Adam:()=>zu.adam(.001,.9,.999,Nd()),Adamax:()=>zu.adamax(.002,.9,.999,Nd(),0),RMSProp:()=>zu.rmsprop(.001,.9,0,Nd()),SGD:()=>zu.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Td("Unknown Optimizer "+e)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Ni))throw new Td("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Td(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);t=e.loss.map(e=>Zm(e))}else{const n=Zm(e.loss);this.outputs.forEach(e=>{t.push(n)})}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new Td(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: `+this.outputNames);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(Zm(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let a=0;a<this.outputs.length;++a){const e=this.internalOutputShapes[a];this.feedOutputNames.push(this.outputNames[a]),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[a])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],gf("loss",()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}});const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>[]);let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+e);n=e}if(Array.isArray(n))return t.map(e=>n);{const e=[];for(const r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),s=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};gf("metric",()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,r,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let s;1===t[t.length-1]||this.lossFunctions[e]===Xm?-1!==["accuracy","acc"].indexOf(i)?r=Qm:-1!==["crossentropy","ce"].indexOf(i)&&(r=tg):this.lossFunctions[e]===Km?-1!==["accuracy","acc"].indexOf(i)?r=ng:-1!==["crossentropy","ce"].indexOf(i)&&(r=sg):-1!==["accuracy","acc"].indexOf(i)?r=eg:-1!==["crossentropy","ce"].indexOf(i)&&(r=rg),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const e=ig(i);a=e,n=""+og(i)}let t;gf(n,()=>{t=a}),s(e,n,t)}})(r[e])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const r=null==n.batchSize?32:n.batchSize;Ag(r);const s=this.standardizeUserDataXY(e,t,!0,r);try{const a=s[0].concat(s[1]);return this.makeTestFunction(),Dd(this.testLoop(this.testFunction,a,r,n.verbose,n.steps))}finally{Og(s[0],e),Og(s[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,a=e.testFunction;let i=[];if(n.verbose>0)throw new $d("Verbose mode is not implemented yet.");r.assert(!s||n.batches>0&&Number.isInteger(n.batches),()=>"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches));const o="function"==typeof t.next?t:await t.iterator();let l=0,u=0;for(;!s||u<n.batches;){const t=await o.next();if(i=bi(()=>{if(t.value){const{xs:n,ys:r}=Tg(e,t.value),s=n.concat(r),o=bi(()=>a(s));if(xi(s),0===u)for(let e=0;e<o.length;++e)i.push(Ii(0));const c=s[0].shape[0];for(let e=0;e<o.length;++e){const t=o[e],n=i[e];i[e]=bi(()=>Ci(i[e],$o(c,t))),u>0&&xi(n)}xi(o),l+=c,++u}return i}),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let r=0;r<i.length;++r){const e=i[r];i[r]=uo(i[r],l),xi(e)}return Dd(i)}(this,e,t)}checkNumSamples(e,t,n,r="steps"){let s;if(null!=n){if(s=null,null!=t)throw new Td(`If ${r} is set, batchSize must be null or undefined.Got batchSize = `+t)}else{if(null==e)throw new Td("Either the input data should have a defined shape, or "+r+" shoud be specified.");s=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return s}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Td("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),r=this.retrieveSymbolicTensors(n?t:[t]),s=new gg;if(e instanceof ss&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Td(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)s.add(this.inputs[t],e[t])}else for(const i of this.inputs){const t=e[i.name];if(null==t)throw new Td("No value is provided for the model's input "+i.name);s.add(i,t)}const a=xg(r,s);return n?a:a[0]}retrieveSymbolicTensors(e){const t=Ad(null,e.length);let n=e.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map(e=>e.name);for(let r=0;r<e.length;++r){const i=a.indexOf(e[r]);if(-1!==i&&(t[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach((t,r)=>{null==t&&n.push(e[r])}),new Td("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(n))}return t}predictLoop(e,t=32,n=!1){return bi(()=>{const r=this.checkNumSamples(e);if(n)throw new $d("Verbose predictLoop() is not implemented yet.");const s=Dg(r,t),a=this.outputs.map(e=>[]);for(let t=0;t<s.length;++t)bi(()=>{const n=Rg(e,s[t][0],s[t][1]),r=[];if(Array.isArray(n))for(let e=0;e<n.length;++e)r.push({key:this.inputs[e],value:n[e]});else r.push({key:this.inputs[0],value:n});const a=new gg(r);return xg(this.outputs,a)}).forEach((e,t)=>a[t].push(e));return Dd(a.map(e=>Ji(e,0)))})}predict(e,t={}){const n=_g(e);Pg(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==t.batchSize?32:t.batchSize;return Ag(r),this.predictLoop(n,r)}finally{Og(n,e)}}predictOnBatch(e){Pg(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new Cd("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let r=0;r<this.feedOutputShapes.length;++r){const e=this.feedOutputShapes[r];a.push(this.feedLossFns[r]===Km?e.slice(0,e.length-1).concat([1]):e)}if(function(e,t,n){const s=Vd(e.map(e=>e.shape[0]));s.sort();const a=Vd(t.map(e=>e.shape[0]));if(a.sort(),s.length>1)throw new Td("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map(e=>e.shape)));if(a.length>1)throw new Td("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map(e=>e.shape)));if(s.length>0&&a.length>0&&!r.arraysEqual(s,a))throw new Td(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${a[0]} target sample(s).`)}(e=zg(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=zg(t,this.feedOutputNames,a,!1,"target")),function(e,t,n){const r=[Gm,Xm,qm];for(let s=0;s<e.length;++s){const a=e[s],i=t[s],o=n[s];if(null!=i){if(i===qm&&1===a.shape[a.shape.length-1])throw new Td(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const r=e[n],s=t[n];if(null!=s&&r!==s)throw new Td(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new Td(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=r){const e=Ng(r,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await Sg(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,r=0,s){return bi(()=>{const a=this.checkNumSamples(t,n,s,"steps"),i=[];if(r>0)throw new $d("Verbose mode is not implemented yet.");if(null!=s)throw new $d("steps mode in testLoop() is not implemented yet");{const r=Dg(a,n),s=Tl(Sf(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],l=$f(s,a,o-a),u=Fg(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(Ii(0));for(let e=0;e<c.length;++e)i[e]=Ci(i[e],$o(o-a,c[e]))}for(let e=0;e<i.length;++e)i[e]=uo(i[e],a)}return i})}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const r=e[n];let s=r;Fd(e,r)>1&&(s+="_"+Fd(e.slice(0,n),r)),t.push(s)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(e=>e.read());return[this.optimizer_.minimize(()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new gg(e),o=xg(this.outputs,i,{training:!0});let l;for(let n=0;n<this.lossFunctions.length;++n){let e=(0,this.lossFunctions[n])(r[n],o[n]);null!=s[n]&&(e=Cg(e,s[n]));const a=Mo(e);t.push(a),l=0===n?e:Ci(l,e)}for(let n=0;n<this.metricsTensors.length;++n){let e;if(this.outputs.length>1&&n<this.outputs.length)e=t[n];else{const t=this.metricsTensors[n][1];e=Mo((0,this.metricsTensors[n][0])(r[t],o[t]))}wi(e),a.push(e)}return l=Mo(l),this.calculateLosses().forEach(e=>{l=Ci(l,e)}),l},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>bi(()=>{const t=[];let n;const r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:r[e]});const i=new gg(a),o=xg(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const r=Mo((0,this.lossFunctions[e])(s[e],o[e]));n=0===e?r:Ci(n,r),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][1],r=Mo((0,this.metricsTensors[e][0])(s[n],o[n]));t.push(r)}return t})}async fit(e,t,n={}){return async function(e,t,n,s={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,i,o,l,u,c,h;e.isTraining=!0;try{const p=null==s.batchSize?32:s.batchSize;Ag(p);const d=!1,f=await e.standardizeUserData(t,n,s.sampleWeight,s.classWeight,d,p);a=f[0],i=f[1],h=f[2];let m,g=!1;if(null!=s.validationData&&s.validationData.length>0){if(g=!0,2!==s.validationData.length)throw 3===s.validationData.length?new $d("validationData including sample weights is not supported yet."):new Td("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+s.validationData+" is invalid.");o=s.validationData[0],l=s.validationData[1];const t=!0,n=await e.standardizeUserData(o,l,null,null,t,p);u=n[0],c=n[1],m=u.concat(c)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){g=!0;const e=Math.floor(a[0].shape[0]*(1-s.validationSplit)),t=a[0].shape[0];u=Rg(a,e,t),a=Rg(a,0,e),c=Rg(i,e,t),i=Rg(i,0,e),m=u.concat(c)}else null!=s.validationSteps&&(g=!0);const y=a.concat(i).concat(h);e.checkTrainableWeightsConsistency();const b=e.makeTrainFunction(),x=e.getDedupedMetricsNames();let w,k;g?(e.makeTestFunction(),w=e.testFunction,k=x.slice().concat(x.map(e=>"val_"+e))):(w=null,m=[],k=x.slice());const v=Pm(s.callbacks,s.yieldEvery);return await async function(e,t,n,s,a,i,o,l,u,c,h,p,d,f,m){null==a&&(a=32),null==i&&(i=1),null==h&&(h=!0),null==d&&(d=0);let g=!1;null!=u&&null!=c&&(g=!0);const y=e.checkNumSamples(n,a,null,"steps_per_epoch");let b;null!=y&&(b=Sf(0,y)),null==o&&(o=1);const{callbackList:x,history:w}=Wm(l,o,i,d,y,null,a,g,p);x.setModel(e),e.history=w,await x.onTrainBegin(),e.stopTraining_=!1;for(let k=d;k<i;++k){await x.onEpochBegin(k);const i={};{if("batch"===h)throw new $d("batch shuffling is not implemneted yet");h&&r.shuffle(b);const o=Tl(b),l=Dg(y,a);for(let r=0;r<l.length;++r){const h={};if(await x.onBatchBegin(r,h),bi(()=>{const p=l[r][0],d=l[r][1],f=$f(o,p,d-p);h.batch=r,h.size=d-p;const m=Fg(n,f),y=t(m);for(let e=0;e<s.length;++e){const t=y[e];h[s[e]]=t,wi(t)}if(r===l.length-1&&g){const t=e.testLoop(u,c,a);for(let e=0;e<s.length;++e){const n=s[e],r=t[e];wi(r),i["val_"+n]=r}}}),await x.onBatchEnd(r,h),Fm(h),e.stopTraining_)break}o.dispose()}if(await x.onEpochEnd(k,i),e.stopTraining_)break}return await x.onTrainEnd(),await e.history.syncData(),e.history}(e,b,y,x,p,s.epochs,s.verbose,v,w,m,s.shuffle,k,s.initialEpoch)}finally{e.isTraining=!1,Og(a,t),Og(i,n),Og(u,o),Og(c,l),null!=h&&xi(h)}}(this,e,t,n)}async fitDataset(e,t){return async function(e,t,n){const s=null!=n.batchesPerEpoch;if(r.assert(null!=e.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),r.assert(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),r.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs),r.assert(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch),r.assert(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const a=null!=n.validationData;let i,o;if(a)if(Eg(n.validationData))r.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches);else{const e=function(e){if(3===e.length)throw new $d("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);i=e.xs,o=e.ys}const l=e.makeTrainFunction(),u=e.getDedupedMetricsNames();let c;c=a?u.slice().concat(u.map(e=>"val_"+e)):u.slice();const h=Pm(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:d,history:f}=Wm(h,p,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,a,c);d.setModel(e),e.history=f,await d.onTrainBegin(),e.stopTraining_=!1;let m=null==n.initialEpoch?0:n.initialEpoch,g=await t.iterator();for(;m<n.epochs;){const r={};await d.onEpochBegin(m);let c=0,h=0;for(s||(g=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await g.next();if(s&&t.done){console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+c+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:r,ys:s}=Tg(e,t.value),a={};a.batch=h,a.size=r[0].shape[0],await d.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=Ng(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await Sg(s[e],null,t[e]))}const o=r.concat(s).concat(i),p=l(o);xi(o);for(let e=0;e<u.length;++e){const t=p[e];a[u[e]]=t,wi(t)}await d.onBatchEnd(h,a),Fm(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(a){let t;t=Eg(n.validationData)?_d(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):_d(e.evaluate(i,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)r["val_"+e.metricsNames[n]]=t[n]}break}if(e.stopTraining_)break}if(await d.onEpochEnd(m,r),m++,e.stopTraining_)break}return await d.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const o of a){const e=await o.data();i.push(e[0])}return xi(a),Dd(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let a=0;a<r.length;++a)n&&!r[a].trainable||t.push({name:r[a].originalName,tensor:s[a]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=yi().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-yi().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Od(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(e=>Od(e))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const r of t){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");e[r]=Od(n[r])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Od(og(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>Od(og(e)));{const e={};for(const t in this.metrics)e[t]=Od(og(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=Vm(fg(e.optimizer_config));let n,r;if("string"==typeof e.loss)n=Md(e.loss);else if(Array.isArray(e.loss))n=e.loss.map(e=>Md(e));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=Md(e.loss[t])}if(Array.isArray(e.metrics))r=e.metrics.map(e=>Md(e));else if(null!=e.metrics){r={};for(const t in e.metrics)r[t]=Md(e.metrics[t])}this.compile({loss:n,metrics:r,optimizer:t})}async save(e,t){if("string"==typeof e){const t=i.getSaveHandlers(e);if(0===t.length)throw new Td(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Td(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Td("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await i.encodeWeights(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.8.4",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:s}=await i.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...s),n.data=i.concatenateArrayBuffers([n.data,t])}return null!=this.userDefinedMetadata&&(lg(this.userDefinedMetadata,this.name,!0),r.userDefinedMetadata=this.userDefinedMetadata),r.weightData=n.data,r.weightSpecs=n.specs,e.save(r)}setUserDefinedMetadata(e){lg(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}Bg.className="Model",u.registerClass(Bg);class Wg extends Bg{}Wg.className="Functional",u.registerClass(Wg);class Vg extends Bg{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:dm("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(e=>e<0))throw new Td("Negative dimension size caused by adding layer "+e.name+" with input shape ["+e.inboundNodes[0].inputTensors[0].shape+"]")}add(e){const t=e instanceof Vg||e instanceof Bg;let n;if(t){if(n=e,1!==n.outputs.length)throw new Td("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Td("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Td("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=Am({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Td(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Td("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=$m(this.outputs[0])}this.inboundNodes=[],new Sm({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Ad(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(ym(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Bg({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Cd("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new Cd("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new Cd("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new Cd("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let a,i={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Td("Legacy serialization format not supported yet.");a=t}else r.assert(null!=t.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=t.layers,delete t.layers,i=t;const o=new e(i);if(!(o instanceof Vg))throw new $d("Sequential.fromConfig called on non-Sequential input: "+o);for(const r of a){const e=Vm(r,void 0,s);s&&e.setFastWeightInitDuringBuild(!0),o.add(e)}return o}set stopTraining(e){if(null==this.model)throw new Td("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Td("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}function Ug(e){return Am(e)}Vg.className="Sequential",u.registerClass(Vg);class Gg extends u.Serializable{getConfig(){return{}}}class Hg extends Gg{apply(e,t=1){return function(e,t=1){if(1!==t)throw new $d(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return co(e)}(e,t)}}Hg.className="elu",u.registerClass(Hg);class jg extends Gg{apply(e){return pl(e)}}jg.className="selu",u.registerClass(jg);class qg extends Gg{apply(e){return cl(e)}}qg.className="relu",u.registerClass(qg);class Kg extends Gg{apply(e){return bi(()=>zo(6,cl(e)))}}Kg.className="relu6",u.registerClass(Kg);class Xg extends Gg{apply(e){return e}}Xg.className="linear",u.registerClass(Xg);class Yg extends Gg{apply(e){return fl(e)}}Yg.className="sigmoid",u.registerClass(Yg);class Jg extends Gg{apply(e){return function(e){return bi(()=>{const t=Ci(.5,$o(.2,e));return Yi(t,0,1)})}(e)}}Jg.className="hardSigmoid",u.registerClass(Jg);class Zg extends Gg{apply(e){return kl(e)}}Zg.className="softplus",u.registerClass(Zg);class Qg extends Gg{apply(e){return function(e){return bi(()=>uo(e,Si(e).add(1)))}(e)}}Qg.className="softsign",u.registerClass(Qg);class ey extends Gg{apply(e){return Cl(e)}}ey.className="tanh",u.registerClass(ey);class ty extends Gg{apply(e,t=-1){return wl(e,t)}}ty.className="softmax",u.registerClass(ty);class ny extends Gg{apply(e,t=-1){return Ro(e,t)}}ny.className="logSoftmax",u.registerClass(ny);class ry extends Gg{apply(e,t=1){return bi(()=>fl(e.mul(t)).mul(e))}}function sy(e){return e.getClassName()}function ay(e,t={}){return Bd(e,u.SerializationMap.getMap().classNameMap,t,"activation")}function iy(e){if(null==e)return ay({className:"linear",config:{}});if("string"==typeof e){const t={};return t.className=e,t.config={},ay(t)}return e instanceof Gg?e:ay(e)}ry.className="swish",u.registerClass(ry);class oy extends u.Serializable{}class ly extends oy{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+e)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return bi(()=>{let t=Zo([1]);return this.hasL1&&(t=Ci(t,Ao($o(this.l1,Si(e))))),this.hasL2&&(t=Ci(t,Ao($o(this.l2,Lf(e))))),t.asScalar()})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}ly.className="L1L2",u.registerClass(ly);const uy={l1l2:"L1L2"};function cy(e){return zd(e)}function hy(e,t={}){return Bd(e,u.SerializationMap.getMap().classNameMap,t,"regularizer")}function py(e){return null==e?null:"string"==typeof e?hy({className:e in uy?uy[e]:e,config:{}}):e instanceof oy?e:hy(e)}class dy extends Tm{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=gm(e);let n=cl(e);return null!=this.maxValue&&(n=Yi(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}dy.className="ReLU",u.registerClass(dy);class fy extends Tm{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=gm(e);return No(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}fy.className="LeakyReLU",u.registerClass(fy);class my extends Tm{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=um(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=py(e.alphaRegularizer),this.alphaConstraint=sf(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Td("Expected sharedAxes to be a number or an array of numbers, but got "+e.sharedAxes);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=ym(e)).slice(1);if(null!=this.sharedAxes)for(const r of this.sharedAxes)t[r-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let r=1;r<e.length;++r)n[r]=e[r];this.inputSpec=[new vm({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=gm(e),rl(e,this.alpha.read())}getConfig(){const e={alphaInitializer:lm(this.alphaInitializer),alphaRegularizer:cy(this.alphaRegularizer),alphaConstraint:nf(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}my.className="PReLU",u.registerClass(my);class gy extends Tm{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new $d(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=gm(e);return co(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}gy.className="ELU",u.registerClass(gy);class yy extends Tm{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=gm(e);return n.mul(Cf(n.greater(this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}yy.className="ThresholdedReLU",u.registerClass(yy);class by extends Tm{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new ty).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=gm(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function xy(e,t,n){if("number"==typeof e)return Ad(e,t);if(e.length!==t)throw new Td(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const a=e[s];if((r=a)!==parseInt(r.toString(),10))throw new Td(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number `+a)}return e;var r}function wy(e,t,n,r,s=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(s-1))+1,Math.floor((a+r-1)/r)}function ky(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+Nf([n-t,0]);else{if("same"!==r)throw new Td(`Unsupport padding mode: ${r}.`);e*=t}return e}function vy(e,t){return bi(()=>(pf(t),"channelsFirst"===t?_l(e,[0,2,3,1]):e))}function Iy(e,t){return bi(()=>(pf(t),"channelsFirst"===t?_l(e,[0,2,3,4,1]):e))}function Ny(e,t,n,r=[1,1],s="valid",a,i,o=null){return bi(()=>{if(null==a&&(a="channelsLast"),pf(a),3!==e.rank&&4!==e.rank)throw new Td(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Td(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=vy(e,a);if("causal"===s)throw new $d("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=c.conv2d({x:l,filter:t,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=_l(l,[0,3,1,2])),l})}by.className="Softmax",u.registerClass(by);class Sy extends Tm{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Sy.verifyArgs(t),this.rank=e,jd(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new $d(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=xy(t.kernelSize,e,"kernelSize"),this.strides=xy(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,df(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,pf(this.dataFormat),this.activation=iy(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=um(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=sf(t.biasConstraint),this.biasRegularizer=py(t.biasRegularizer),this.activityRegularizer=py(t.activityRegularizer),this.dilationRate=xy(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Td("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(this.dilationRate));if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Td("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(this.dilationRate))}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Td("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(this.dilationRate))}static verifyArgs(e){if(Rd("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!Hd(e.kernelSize,"number",1,3))throw new Td(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:sy(this.activation),useBias:this.useBias,biasInitializer:lm(this.biasInitializer),biasRegularizer:cy(this.biasRegularizer),activityRegularizer:cy(this.activityRegularizer),biasConstraint:nf(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Cy extends Sy{constructor(e,t){super(e,t),this.kernel=null,Cy.verifyArgs(t),this.filters=t.filters,jd(this.filters,"filters"),this.kernelInitializer=um(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=sf(t.kernelConstraint),this.kernelRegularizer=py(t.kernelRegularizer)}build(e){e=ym(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Td("The channel dimension of the input should be defined. Found "+e[t]);const n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return bi(()=>{let t;e=gm(e);const n=null==this.bias?null:this.bias.read(),r=Kd(this.activation.getClassName());if(null!=r&&2===this.rank)t=Ny(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=function(e,t,n,r=1,s="valid",a,i=1){return bi(()=>{if(null==a&&(a="channelsLast"),pf(a),3!==e.shape.length)throw new Td("The input of a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead.");if(3!==t.shape.length)throw new Td("The kernel for a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new Td("The bias for a conv1dWithBias operation should be 1, but is "+t.shape.length+" instead");if("channelsFirst"===a&&(e=_l(e,[0,2,1])),"causal"===s)throw new $d("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=ro(e,t,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=Pf(o,n)),o})}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=Ny(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new $d("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,r=[1,1,1],s="valid",a,i){return bi(()=>{if(null==a&&(a="channelsLast"),pf(a),4!==e.rank&&5!==e.rank)throw new Td("conv3dWithBias expects input to be of rank 4 or 5, but received "+e.rank+".");if(4!==t.rank&&5!==t.rank)throw new Td("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+e.rank+".");let o=Iy(e,a);if("causal"===s)throw new $d("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=io(o,t,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=Pf(o,n)),"channelsFirst"===a&&(o=_l(o,[0,4,1,2,3])),o})}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t})}computeOutputShape(e){e=ym(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let s=0;s<n.length;++s){const e=wy(n[s],this.kernelSize[s],this.padding,this.strides[s],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[s]);t.push(e)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t),r.push(this.filters)):(r.push(this.filters),r=r.concat(t)),r}getConfig(){const e={filters:this.filters,kernelInitializer:lm(this.kernelInitializer),kernelRegularizer:cy(this.kernelRegularizer),kernelConstraint:nf(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Td("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(e.filters))}}class Ty extends Cy{constructor(e){super(2,e),Ty.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Hd(e.kernelSize,"number",1,2))throw new Td(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Ty.className="Conv2D",u.registerClass(Ty);class $y extends Cy{constructor(e){super(3,e),$y.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Td(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}$y.className="Conv3D",u.registerClass($y);class Ey extends Ty{constructor(e){if(super(e),this.inputSpec=[new vm({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Td("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+this.padding)}build(e){if(4!==(e=ym(e)).length)throw new Td("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Td("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new vm({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return bi(()=>{let t=gm(e);if(4!==t.shape.length)throw new Td("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+t.shape.length);const n=t.shape;let r,s;"channelsFirst"===this.dataFormat?(r=2,s=3):(r=1,s=2);const a=n[s],i=this.kernelSize[1],o=this.strides[1],l=[n[0],ky(n[r],this.strides[0],this.kernelSize[0],this.padding),ky(a,o,i,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=_l(t,[0,2,3,1]));let u=ao(t,this.kernel.read(),l,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(u=_l(u,[0,3,1,2])),null!=this.bias&&(u=Pf(u,this.bias.read(),this.dataFormat)),null!=this.activation&&(u=this.activation.apply(u)),u})}computeOutputShape(e){const t=(e=ym(e)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[r]=ky(t[r],o,a,this.padding),t[s]=ky(t[s],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Ey.className="Conv2DTranspose",u.registerClass(Ey);class Ay extends Cy{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Td("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Td("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Td(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received `+JSON.stringify(t.padding));this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=um(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=py(t.depthwiseRegularizer),this.depthwiseConstraint=sf(t.depthwiseConstraint),this.pointwiseInitializer=um(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=py(t.pointwiseRegularizer),this.pointwiseConstraint=sf(t.pointwiseConstraint)}build(e){if((e=ym(e)).length<this.rank+2)throw new Td(`Inputs to SeparableConv${this.rank}D should have rank `+(this.rank+2)+", but received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Td("The channel dimension of the inputs should be defined, but found "+JSON.stringify(e[t]));const n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let i=0;i<this.rank;++i)s.push(1);s.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):null,this.inputSpec=[new vm({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return bi(()=>{let t;if(e=gm(e),1===this.rank)throw new $d("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=_l(e,[0,2,3,1])),t=dl(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Pf(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=_l(t,[0,3,1,2])),t})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=lm(this.depthwiseInitializer),e.pointwiseInitializer=lm(this.pointwiseInitializer),e.depthwiseRegularizer=cy(this.depthwiseRegularizer),e.pointwiseRegularizer=cy(this.pointwiseRegularizer),e.depthwiseConstraint=nf(this.depthwiseConstraint),e.pointwiseConstraint=nf(this.pointwiseConstraint),e}}Ay.className="SeparableConv";class Ry extends Ay{constructor(e){super(2,e)}}Ry.className="SeparableConv2D",u.registerClass(Ry);class Fy extends Cy{constructor(e){super(1,e),Fy.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Hd(e.kernelSize,"number",1,1))throw new Td(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Fy.className="Conv1D",u.registerClass(Fy);class Dy extends Tm{constructor(e){super(e),this.cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return bi(()=>{if(e=gm(e),"channelsLast"===this.dataFormat){const t=Af(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Af(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=Af(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Af(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Dy.className="Cropping2D",u.registerClass(Dy);class _y extends Tm{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,pf(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,Gd(of,"InterpolationFormat",this.interpolation)}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}call(e,t){return bi(()=>{let t=gm(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=_l(t,[0,2,3,1]);const e=this.size[0]*n[2],r=this.size[1]*n[3],s="nearest"===this.interpolation?t.resizeNearestNeighbor([e,r]):t.resizeBilinear([e,r]);return _l(s,[0,3,1,2])}{const e=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?t.resizeNearestNeighbor([e,r]):t.resizeBilinear([e,r])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}_y.className="UpSampling2D",u.registerClass(_y);class Oy extends Sy{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=um(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=sf(e.depthwiseConstraint),this.depthwiseRegularizer=py(e.depthwiseRegularizer)}build(e){if((e=ym(e)).length<4)throw new Td(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Td(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,t){return bi(()=>{let t=function(e,t,n=[1,1],r="valid",s,a){return bi(()=>{null==s&&(s="channelsLast"),pf(s);let i=vy(e,s);if(4!==e.rank)throw new Td("Input for depthwiseConv2d is required to be 4-D, but is instead "+e.rank+"-D");if(4!==t.rank)throw new Td("depthwiseKernel is required to be 4-D, but is instead "+t.rank+"-D");return i=oo(i,t,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=_l(i,[0,3,1,2])),i})}(e=gm(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=Pf(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t})}computeOutputShape(e){e=ym(e);const t="channelsFirst"===this.dataFormat?e[3]:e[2],n="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=wy("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),s=wy(t,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],n,r,s]:[e[0],r,s,n]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=lm(this.depthwiseInitializer),e.depthwiseRegularizer=cy(this.depthwiseRegularizer),e.depthwiseConstraint=nf(this.depthwiseRegularizer),e}}function My(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new Td("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function s(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=s(t),constants:n=s(n)}}function Ly(e,t,n,r=!1,s,a,i=!1,o=!1){return bi(()=>{const l=t.shape.length;if(l<3)throw new Td(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(Sf(2,l));if(t=_l(t,u),null!=a)throw new $d("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=s.asType("bool").asType("float32")).rank===l-1&&(s=go(s,-1)),s=_l(s,u)),r&&(t=hl(t,0),null!=s&&(s=hl(s,0)));const c=[];let h,p=n;const d=t.shape[0],f=Al(t);let m,g;null!=s&&(m=Al(s));for(let t=0;t<d;++t){const n=f[t],r=bi(()=>e(n,p));if(null==s)h=r[0],p=r[1];else{const e=bi(()=>{const e=m[t],n=el(e).sub(e);return{output:r[0].mul(e).add(p[0].mul(n)),newStates:p.map((t,s)=>r[1][s].mul(e).add(t.mul(n)))}});h=e.output,p=e.newStates}o&&c.push(h)}return o&&(g=Sl(c,1)),[h,g,p]})}Oy.className="DepthwiseConv2D",u.registerClass(Oy);class zy extends Tm{constructor(e){let t;if(super(e),null==e.cell)throw new Td("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new jy({cells:e.cell}):e.cell,null==t.stateSize)throw new Td("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new vm({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?Sf(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(e=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){fm(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let r;if(r=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const r of t)n.push([e[0],r]);return[r].concat(n)}return r}computeMask(e,t){return bi(()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map(e=>null);return[e].concat(t)}return e})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new $d("Constants support is not implemented in RNN yet.");fm(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new vm({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let a;if(this.cell.build(s),a=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!r.arraysEqual(this.stateSpec.map(e=>e.shape[e.shape.length-1]),a))throw new Td(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is `+this.cell.stateSize)}else this.stateSpec=a.map(e=>new vm({shape:[null,e]}));this.stateful&&this.resetStates()}resetStates(e,t=!1){bi(()=>{if(!this.stateful)throw new Sd("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Td("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(e=>Zo([n,e])):[Zo([n,this.cell.stateSize])];else if(null==e)xi(this.states_),null!=this.keptStates&&(xi(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>Zo([n,e])):this.states_[0]=Zo([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Td(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: `+e);!0===t?this.keptStates.push(this.states_.slice()):xi(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],a=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,i=[n,a];if(!r.arraysEqual(s.shape,i))throw new Td(`State ${t} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map(e=>wi(e.clone()))})}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=My(e,n,r,this.numConstants);e=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new vm({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=r&&(t.constants=r,a=a.concat(r),this.numConstants=r.length),a[0]instanceof Im){const n=[e].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,t);return this.inputSpec=s,o}return super.apply(e,t)}call(e,t){return bi(()=>{const n=null==t?null:t.mask,r=null==t?null:t.training;let s=null==t?null:t.initialState;e=gm(e),null==s&&(s=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new Td(`RNN Layer has ${a} state(s) but was passed `+s.length+" initial state(s).");this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=Ly((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]},e,s,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h})}getInitialState(e){return bi(()=>{let t=Zo(e.shape);return t=Ao(t,[1,2]),t=Tf(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(e=>e>1?Df(t,[1,e]):t):this.cell.stateSize>1?[Df(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===zy.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const r=Vm(t.cell,n);return new e(Object.assign(t,{cell:r}))}}zy.className="RNN",u.registerClass(zy);class Py extends Tm{}class By extends Py{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,jd(this.units,"units"),this.activation=iy(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=um(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=um(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=um(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=py(e.kernelRegularizer),this.recurrentRegularizer=py(e.recurrentRegularizer),this.biasRegularizer=py(e.biasRegularizer),this.kernelConstraint=sf(e.kernelConstraint),this.recurrentConstraint=sf(e.recurrentConstraint),this.biasConstraint=sf(e.biasConstraint),this.dropout=If([1,Nf([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=If([1,Nf([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=ym(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,t){return bi(()=>{if(2!==(e=e).length)throw new Td(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const r=null!=t.training&&t.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=qy({ones:()=>el(e),rate:this.dropout,training:r})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=qy({ones:()=>el(n),rate:this.recurrentDropout,training:r}));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=Of(null!=a?$o(e,a):e,this.kernel.read()),null!=this.bias&&(s=Pf(s,this.bias.read())),null!=i&&(n=$o(n,i));let o=Ci(s,Of(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:sy(this.activation),useBias:this.useBias,kernelInitializer:lm(this.kernelInitializer),recurrentInitializer:lm(this.recurrentInitializer),biasInitializer:lm(this.biasInitializer),kernelRegularizer:cy(this.kernelRegularizer),recurrentRegularizer:cy(this.recurrentRegularizer),biasRegularizer:cy(this.biasRegularizer),activityRegularizer:cy(this.activityRegularizer),kernelConstraint:nf(this.kernelConstraint),recurrentConstraint:nf(this.recurrentConstraint),biasConstraint:nf(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}By.className="SimpleRNNCell",u.registerClass(By);class Wy extends zy{constructor(e){e.cell=new By(e),super(e)}call(e,t){return bi(()=>(null!=this.cell.dropoutMask&&(xi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(xi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})))}static fromConfig(e,t){return new e(t)}}Wy.className="SimpleRNN",u.registerClass(Wy);class Vy extends Py{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Td("GRUCell does not support reset_after parameter set to true.");this.units=e.units,jd(this.units,"units"),this.activation=iy(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=iy(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=um(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=um(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=um(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=py(e.kernelRegularizer),this.recurrentRegularizer=py(e.recurrentRegularizer),this.biasRegularizer=py(e.biasRegularizer),this.kernelConstraint=sf(e.kernelConstraint),this.recurrentConstraint=sf(e.recurrentConstraint),this.biasConstraint=sf(e.biasConstraint),this.dropout=If([1,Nf([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=If([1,Nf([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=ym(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,t){return bi(()=>{if(2!==(e=e).length)throw new Td("GRUCell expects 2 input Tensors (inputs, h, c), got "+e.length+".");const n=null!=t.training&&t.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=qy({ones:()=>el(e),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=qy({ones:()=>el(r),rate:this.recurrentDropout,training:n,count:3}));const s=this.recurrentDropoutMask;let a,i,o;0<this.dropout&&this.dropout<1&&(e=$o(e,this.dropoutMask[0]));let l=Of(e,this.kernel.read());this.useBias&&(l=Pf(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=$o(r,s[0]));const u=this.recurrentKernel.read(),[c,h]=vl(u,[2*this.units,this.units],u.rank-1),p=Of(r,c),[d,f,m]=vl(l,3,l.rank-1),[g,y]=vl(p,2,p.rank-1);a=this.recurrentActivation.apply(Ci(d,g)),i=this.recurrentActivation.apply(Ci(f,y));const b=Of($o(i,r),h);o=this.activation.apply(Ci(m,b));const x=Ci($o(a,r),$o(Ci(1,Xo(a)),o));return[x,x]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:sy(this.activation),recurrentActivation:sy(this.recurrentActivation),useBias:this.useBias,kernelInitializer:lm(this.kernelInitializer),recurrentInitializer:lm(this.recurrentInitializer),biasInitializer:lm(this.biasInitializer),kernelRegularizer:cy(this.kernelRegularizer),recurrentRegularizer:cy(this.recurrentRegularizer),biasRegularizer:cy(this.biasRegularizer),activityRegularizer:cy(this.activityRegularizer),kernelConstraint:nf(this.kernelConstraint),recurrentConstraint:nf(this.recurrentConstraint),biasConstraint:nf(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}Vy.className="GRUCell",u.registerClass(Vy);class Uy extends zy{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Vy(e),super(e)}call(e,t){return bi(()=>(null!=this.cell.dropoutMask&&(xi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(xi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Uy.className="GRU",u.registerClass(Uy);class Gy extends Py{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,jd(this.units,"units"),this.activation=iy(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=iy(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=um(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=um(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=um(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=py(e.kernelRegularizer),this.recurrentRegularizer=py(e.recurrentRegularizer),this.biasRegularizer=py(e.biasRegularizer),this.kernelConstraint=sf(e.kernelConstraint),this.recurrentConstraint=sf(e.recurrentConstraint),this.biasConstraint=sf(e.biasConstraint),this.dropout=If([1,Nf([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=If([1,Nf([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;let n;if(e=ym(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,r=this.units;n=new((t=class extends Gf{apply(t,n){const s=e.apply([r]),a=(new jf).apply([r]),i=e.apply([2*r]);return Ff(Ff(s,a),i)}}).className="CustomInit",t)}else n=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,n,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return bi(()=>{const n=null!=t.training&&t.training;if(3!==(e=e).length)throw new Td("LSTMCell expects 3 input Tensors (inputs, h, c), got "+e.length+".");let r=e[1];const s=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=qy({ones:()=>el(e),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=qy({ones:()=>el(r),rate:this.recurrentDropout,training:n,count:4}));const a=this.recurrentDropoutMask;let i,o,l,u;0<this.dropout&&this.dropout<1&&(e=$o(e,this.dropoutMask[0]));let c=Of(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=$o(r,a[0])),c=Ci(c,Of(r,this.recurrentKernel.read())),this.useBias&&(c=Pf(c,this.bias.read()));const[h,p,d,f]=vl(c,4,c.rank-1);i=this.recurrentActivation.apply(h),o=this.recurrentActivation.apply(p),l=Ci($o(o,s),$o(i,this.activation.apply(d))),u=this.recurrentActivation.apply(f);const m=$o(u,this.activation.apply(l));return[m,m,l]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:sy(this.activation),recurrentActivation:sy(this.recurrentActivation),useBias:this.useBias,kernelInitializer:lm(this.kernelInitializer),recurrentInitializer:lm(this.recurrentInitializer),biasInitializer:lm(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:cy(this.kernelRegularizer),recurrentRegularizer:cy(this.recurrentRegularizer),biasRegularizer:cy(this.biasRegularizer),activityRegularizer:cy(this.activityRegularizer),kernelConstraint:nf(this.kernelConstraint),recurrentConstraint:nf(this.recurrentConstraint),biasConstraint:nf(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}Gy.className="LSTMCell",u.registerClass(Gy);class Hy extends zy{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Gy(e),super(e)}call(e,t){return bi(()=>(null!=this.cell.dropoutMask&&(xi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(xi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Hy.className="LSTM",u.registerClass(Hy);class jy extends Py{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return bi(()=>{let n=(e=e).slice(1);const r=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?r.push(n.splice(0,e.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),s.push(a.slice(1))}n=[];for(const e of s.slice().reverse())n.push(...e);return[a[0]].concat(n)})}build(e){let t;fm(e)&&(e=e[0]),e=e,this.cells.forEach((n,r)=>{gf("RNNCell_"+r,()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){const e=super.getConfig(),t=this.cells.map(e=>({className:e.getClassName(),config:e.getConfig()}));return Object.assign({},e,{cells:t})}static fromConfig(e,t,n={}){const r=[];for(const s of t.cells)r.push(Vm(s,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return wm(e)}setWeights(e){const t=[];for(const n of this.cells){const r=e.splice(n.weights.length);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}km(t)}}function qy(e){const{ones:t,rate:n,training:r=!1,count:s=1}=e,a=()=>Bf(t(),n),i=()=>Wf(a,t,r);return!s||s<=1?wi(i().clone()):Array(s).fill(void 0).map(i).map(e=>wi(e.clone()))}jy.className="StackedRNNCells",u.registerClass(jy);class Ky extends zy{constructor(e){if(e.unroll)throw new $d("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new $d("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new vm({ndim:5})]}call(e,t){return bi(()=>{if(null!=this.cell.dropoutMask&&(xi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(xi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Td("ConvRNN2D cell does not support constants");return super.call(e,{mask:null==t?null:t.mask,training:null==t?null:t.training,initialState:null==t?null:t.initialState})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return bi(()=>{const{stateSize:t}=this.cell,n=this.computeSingleOutputShape(e.shape),r=Zo([n[0],...n.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]})}resetStates(e,t=!1){bi(()=>{if(!this.stateful)throw new Sd("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),a=[s[0],...s.slice(2)];if(null==n[0])throw new Td("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(()=>Zo(a)):[Zo(a)];else if(null==e)xi(this.states_),null!=this.keptStates&&(xi(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>Zo(a)):this.states_[0]=Zo(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Td(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: `+e);t?this.keptStates.push(this.states_.slice()):xi(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=a;if(!r.arraysEqual(n.shape,s))throw new Td(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map(e=>wi(e.clone()))})}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?4:3],u=wy(e[o?3:2],r[0],s,a[0],i[0]),c=wy(l,r[1],s,a[1],i[1]);return[...e.slice(0,2),...o?[n,u,c]:[u,c,n]]}}Ky.className="ConvRNN2D";class Xy extends Gy{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,jd(this.filters,"filters"),this.kernelSize=xy(n,2,"kernelSize"),this.kernelSize.forEach(e=>jd(e,"kernelSize")),this.strides=xy(r||1,2,"strides"),this.strides.forEach(e=>jd(e,"strides")),this.padding=s||"valid",df(this.padding),this.dataFormat=a||"channelsLast",pf(this.dataFormat),this.dilationRate=xy(i||1,2,"dilationRate"),this.dilationRate.forEach(e=>jd(e,"dilationRate"))}build(e){var t;e=ym(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new Td("The channel dimension of the input should be defined. Found "+e[n]);const r=this.kernelSize.concat([e[n],4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const s=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",s,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;e=new((t=class extends Gf{apply(e,t){return Rf([n.apply([r]),Qo([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return bi(()=>{if(3!==e.length)throw new Td("ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got "+e.length+".");const n=t.training||!1,r=e[0],s=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=qy({ones:()=>el(r),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?$o(t[n],e):e;let l=o(r,i,0),u=o(r,i,1),c=o(r,i,2),h=o(r,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=qy({ones:()=>el(s),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(s,p,0),f=o(s,p,1),m=o(s,p,2),g=o(s,p,3);const[y,b,x,w]=vl(this.kernel.read(),4,3),[k,v,I,N]=this.useBias?vl(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,k,this.padding),u=this.inputConv(u,b,v,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,N,this.padding);const[S,C,T,$]=vl(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,S),f=this.recurrentConv(f,C),m=this.recurrentConv(m,T),g=this.recurrentConv(g,$);const E=this.recurrentActivation.apply(Ci(l,d)),A=this.recurrentActivation.apply(Ci(u,f)),R=Ci($o(A,a),$o(E,this.activation.apply(Ci(c,m)))),F=$o(this.recurrentActivation.apply(Ci(h,g)),this.activation.apply(R));return[F,F,R]})}getConfig(){const e=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n}(super.getConfig(),["units"]);return Object.assign({},e,{filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides})}inputConv(e,t,n,r){const s=no(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Pf(s,n,this.dataFormat):s}recurrentConv(e,t){return no(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Xy.className="ConvLSTM2DCell",u.registerClass(Xy);class Yy extends Ky{constructor(e){const t=new Xy(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}Yy.className="ConvLSTM2D",u.registerClass(Yy);class Jy extends Tm{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let r=0;r<this.noiseShape.length;++r)n.push(null==this.noiseShape[r]?t[r]:this.noiseShape[r]);return n}call(e,t){return bi(()=>{this.invokeCallHook(e,t);const n=gm(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,r=this.getNoiseShape(n);return Wf(()=>Bf(n,this.rate,r,this.seed),()=>n,e)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Jy.className="Dropout",u.registerClass(Jy);class Zy extends Jy{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}Zy.className="SpatialDropout1D",u.registerClass(Zy);class Qy extends Tm{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,jd(this.units,"units"),this.activation=iy(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=um(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=um(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=sf(e.kernelConstraint),this.biasConstraint=sf(e.biasConstraint),this.kernelRegularizer=py(e.kernelRegularizer),this.biasRegularizer=py(e.biasRegularizer),this.activityRegularizer=py(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=ym(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=ym(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return bi(()=>{this.invokeCallHook(e,t);const n=gm(e),r=Kd(this.activation.getClassName());let s;return null!=r?s=Of(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=Of(n,this.kernel.read()),null!=this.bias&&(s=Pf(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s})}getConfig(){const e={units:this.units,activation:sy(this.activation),useBias:this.useBias,kernelInitializer:lm(this.kernelInitializer),biasInitializer:lm(this.biasInitializer),kernelRegularizer:cy(this.kernelRegularizer),biasRegularizer:cy(this.biasRegularizer),activityRegularizer:cy(this.activityRegularizer),kernelConstraint:nf(this.kernelConstraint),biasConstraint:nf(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Qy.className="Dense",u.registerClass(Qy);class eb extends Tm{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=ym(e);for(const t of e.slice(1))if(null==t)throw new Td(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],kf(e,1)]}call(e,t){return bi(()=>{this.invokeCallHook(e,t);let n=gm(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=n.transpose(e)}return function(e){if(e.rank<=1)throw new Td(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],kf(e.shape,1)];return e.reshape(t)}(n)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}eb.className="Flatten",u.registerClass(eb);class tb extends Tm{constructor(e){super(e),this.supportsMasking=!0,this.activation=iy(e.activation)}call(e,t){return bi(()=>{this.invokeCallHook(e,t);const n=gm(e);return this.activation.apply(n)})}getConfig(){const e={activation:sy(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}tb.className="Activation",u.registerClass(tb);class nb extends Tm{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return bi(()=>{return e=gm(e),t=e,n=this.n,bi(()=>{if(2!==t.shape.length)throw new Td(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return Df(Tf(t,1),[1,n,1])});var t,n})}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}nb.className="RepeatVector",u.registerClass(nb);class rb extends Tm{constructor(e){super(e),this.targetShape=e.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let s=1,a=null;for(let o=0;o<r.length;++o){const e=r[o];if(this.isUnknown(e)){if(null!==a)throw new Td("Can only specifiy one unknown dimension.");a=o}else s*=e}const i=kf(e);if(null!==a){if(0===s||i%s!=0)throw new Td(n);r[a]=i/s}else if(i!==s)throw new Td(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return bi(()=>{this.invokeCallHook(e,t);const n=gm(e),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return n.reshape(s)})}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}rb.className="Reshape",u.registerClass(rb);class sb extends Tm{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+e.dims+" instead.");const t=Sf(1,e.dims.length+1);if(!r.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new vm({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=ym(e)).slice();return this.dims.forEach((n,r)=>{t[r+1]=e[n]}),t}call(e,t){return _l(gm(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}sb.className="Permute",u.registerClass(sb);class ab extends Tm{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=gm(e);return $i(Yo(n,this.maskValue),-1)}call(e,t){return bi(()=>{this.invokeCallHook(e,t);const n=gm(e),r=$i(Yo(n,this.maskValue),-1,!0);return n.mul(r.asType(n.dtype))})}}ab.className="Masking",u.registerClass(ab);class ib extends Tm{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=null==e.inputLength?[t,null]:[t].concat(_d(e.inputLength))}this.inputDim=e.inputDim,jd(this.inputDim,"inputDim"),this.outputDim=e.outputDim,jd(this.outputDim,"outputDim"),this.embeddingsInitializer=um(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=py(e.embeddingsRegularizer),this.activityRegularizer=py(e.activityRegularizer),this.embeddingsConstraint=sf(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return bi(()=>this.maskZero?(e=gm(e),Yo(e,Dl(e))):null)}computeOutputShape(e){if(e=ym(e),null==this.inputLength)return[...e,this.outputDim];const t=_d(this.inputLength);if(t.length!==e.length-1)throw new Td(`"inputLength" is ${this.inputLength}, but received input shape has shape `+e);{let n=0;for(let r=0;r<t.length;++r){const s=t[r],a=e[r+1];if(null!=s&&null!=a&&s!==a)throw new Td(`"inputLength" is ${this.inputLength}, but received input shape has shape `+e);null==s&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return bi(()=>{this.invokeCallHook(e,t);let n=gm(e);return"int32"!==n.dtype&&(n=Cf(n,"int32")),Mf(this.embeddings.read(),n.as1D()).reshape(ym(this.computeOutputShape(n.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:lm(this.embeddingsInitializer),embeddingsRegularizer:cy(this.embeddingsRegularizer),activityRegularizer:cy(this.activityRegularizer),embeddingsConstraint:nf(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}ib.className="Embedding",u.registerClass(ib);class ob extends Tm{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new $d}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const s=e[e.length-t.length+r],a=t[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new Td("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(s)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[ym(e)]),(e=e).length<2)throw new Td(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const s of e)null!=s&&null!==s[0]&&t.push(s[0]);if(t=Vd(t),t.length>1)throw new Td(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let s=1;s<e.length;++s){const t=null==e[s]?null:e[s].slice(1);n=this.computeElementwiseOpOutputShape(n,t)}const r=e.map(e=>e.length);this.reshapeRequired=-1!==e.indexOf(null)||1!==Vd(r).length}call(e,t){return bi(()=>{if(e=e,this.reshapeRequired){const t=[],n=e.map(e=>e.rank);if(-1===n.indexOf(null)){const r=Nf(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=Tf(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const a of e){const e=a.rank;if(null==e){const e=a.shape,r=e[0],s=e.slice(1).concat([r]);let i=a.reshape([r].concat(kf(e.slice(1))));i=_l(i,[1,0]),i=i.reshape(s),t.push(i),n=!0}else if(e>1){const r=Sf(1,e).concat([0]);t.push(_l(a,r)),n=!0}else t.push(a)}let r=this.mergeFunction(t);const s=r.rank;if(n)if(null==s){const e=r.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));r=_l(r.reshape([-1,t]),[1,0]).reshape(n)}else if(s>1){const e=[s-1].concat(Sf(0,s-1));r=_l(r,e)}return r}}return this.mergeFunction(e)})}computeOutputShape(e){let t;t=null==(e=e)[0]?null:e[0].slice(1);for(let r=1;r<e.length;++r){const n=null==e[r]?null:e[r].slice(1);t=this.computeElementwiseOpOutputShape(t,n)}let n=[];for(const r of e)null!=r&&null!==r[0]&&n.push(r[0]);return n=Vd(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return bi(()=>{if(null==t)return null;if(!Array.isArray(t))throw new Td("`mask` should be an Array");if(!Array.isArray(e))throw new Td("`inputs` should be an Array");if(t.length!==e.length)throw new Td(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every(e=>null==e))return null;let n=(t=t.map(e=>null==e?e:go(e,0)))[0];for(let e=1;e<t.length-1;++e)n=Fo(n,t[e]);return n})}}class lb extends ob{constructor(e){super(e)}mergeFunction(e){return bi(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Ci(t,e[n]);return t})}}lb.className="Add",u.registerClass(lb);class ub extends ob{constructor(e){super(e)}mergeFunction(e){return bi(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=$o(t,e[n]);return t})}}ub.className="Multiply",u.registerClass(ub);class cb extends ob{constructor(e){super(e)}mergeFunction(e){return bi(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Ci(t,e[n]);return $o(1/e.length,t)})}}cb.className="Average",u.registerClass(cb);class hb extends ob{constructor(e){super(e)}mergeFunction(e){return bi(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Oo(t,e[n]);return t})}}hb.className="Maximum",u.registerClass(hb);class pb extends ob{constructor(e){super(e)}mergeFunction(e){return bi(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=zo(t,e[n]);return t})}}pb.className="Minimum",u.registerClass(pb);class db extends ob{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new Td("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const r of e)if(null!=r){t=!1;break}if(t)return;const n=[];for(let s=0;s<e.length;++s){const t=e[s].slice();t.splice(this.axis,1);let a=!1;for(const e of n)if(r.arraysEqual(e,t)){a=!0;break}a||n.push(t)}if(n.length>1)throw new Td("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return bi(()=>Rf(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Td("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const s of t.slice(1)){if(null==n[r]||null==s[r]){n[r]=null;break}n[r]+=s[r]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Td("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Td("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Td(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return bi(()=>{let n=!0;if(t.forEach(e=>{null==e||(n=!1)}),n)return null;const r=[];for(let a=0;a<e.length;++a)r.push(null==t[a]?el(e[a]).asType("bool"):t[a].rank<e[a].rank?go(t[a],-1):t[a]);const s=Ji(r,this.axis);return Ti(s,-1,!1)})}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function fb(e,t){for(;e<0;)e+=t;return e}db.className="Concatenate",u.registerClass(db);class mb extends ob{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){r.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new $d("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new Td(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new Td(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map((t,n)=>fb(t,e[n].shape.length)):[fb(this.axes,n.shape.length),fb(this.axes,s.shape.length)],this.normalize&&(n=Um(n,t[0]),s=Um(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new $d("batchDot is not implemented for tensors of 4D or higher rank yet");if(r.assert(e.shape.length>=2,()=>"batchDot requires the rank of x to be >= 2, but got "+e.shape.length),r.assert(e.shape.length>=2,()=>"batchDot requires the rank of y to be >= 2, but got "+t.shape.length),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new $d("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,a=t.shape.length;null==n&&(n=[s-1,a-2]);const i=n;return bi(()=>{let n,r;if(s>a){n=s-a;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else if(a>s){n=a-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else n=0;if(r=2===e.shape.length&&2===t.shape.length?i[0]===i[1]?e.mul(t).sum(i[0]):e.transpose([1,0]).mul(t).sum(i[1]):e.matMul(t,i[0]!==e.shape.length-1,i[1]===t.shape.length-1),n>0){let e;e=s>a?s+a-3:s-1;const t=[];for(let r=e;r<e+n;++r)t.push(r);r=r.squeeze(t)}return 1===r.shape.length&&(r=r.expandDims(1)),r})}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[fb(this.axes,e.length),fb(this.axes,t.length)],n}computeOutputShape(e){r.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new $d("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const a=t.concat(n);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}mb.className="Dot",u.registerClass(mb);class gb extends Tm{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return bi(()=>{this.invokeCallHook(e,t);const n=gm(e);return Wf(()=>_f(n.shape,0,this.stddev).add(n),()=>n,t.training||!1)})}}gb.className="GaussianNoise",u.registerClass(gb);class yb extends Tm{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return bi(()=>{this.invokeCallHook(e,t);const n=gm(e);return this.rate>0&&this.rate<1?Wf(()=>{const e=Math.sqrt(this.rate/(1-this.rate));return n.mul(_f(n.shape,1,e))},()=>n,t.training||!1):n})}}yb.className="GaussianDropout",u.registerClass(yb);class bb extends Tm{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||gm(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return bi(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return Wf(()=>{const t=gm(e),r=-1.7580993408473766;let s=Io(ll(n),this.rate);s=Cf(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate;return t.mul(s).add(s.add(-1).mul(r)).mul(a).add(i)},()=>gm(e),t.training||!1)}return e})}}function xb(e,t,n,r,s,a=.001){let i;if(2===e.rank)i=qi(e,t,n,r,s,a);else if(3===e.rank)i=Ki(e,t,n,r,s,a);else{if(4!==e.rank)throw new $d(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=Xi(e,t,n,r,s,a)}return i}bb.className="AlphaDropout",u.registerClass(bb);class wb extends Tm{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=um(e.betaInitializer||"zeros"),this.gammaInitializer=um(e.gammaInitializer||"ones"),this.movingMeanInitializer=um(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=um(e.movingVarianceInitializer||"ones"),this.betaConstraint=sf(e.betaConstraint),this.gammaConstraint=sf(e.gammaConstraint),this.betaRegularizer=py(e.betaRegularizer),this.gammaRegularizer=py(e.gammaRegularizer)}build(e){e=ym(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Td(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape `+JSON.stringify(e)+".");this.inputSpec=[new vm({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return bi(()=>{const n=null!=t.training&&t.training,s=gm(e),a=s.shape,i=a.length,o=Sf(0,i),l=this.axis>=0?this.axis:this.axis+i;o.splice(l,1);const u=Ad(1,i);u[l]=a[l];const c=o.slice();c.sort();const h=!r.arraysEqual(c,Sf(0,i).slice(0,i-1));if(!n)return(()=>{if(h){const e=this.movingMean.read().reshape(u),t=this.movingVariance.read().reshape(u),n=this.center?this.beta.read().reshape(u):null,r=this.scale?this.gamma.read().reshape(u):null;return xb(s,e,t,n,r,this.epsilon)}return xb(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[p,d,f]=function(e,t,n,s,a=.001){return r.arraysEqual(s.slice().sort(),Sf(0,e.rank-1))?function(e,t,n,r,s=.001){return bi(()=>{const a=Ko(e,r),i=a.mean,o=a.variance;return[xb(e,i,o,n,t,s),i,o]})}(e,t,n,s,a):function(e,t,n,r,s=.001){return bi(()=>{const a=Ko(e,r),i=a.mean,o=a.variance,l=[];for(const t of Sf(0,e.rank))-1!==r.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=i.reshape(l),c=o.reshape(l),h=null==t?null:t.reshape(l),p=null==n?null:n.reshape(l);return[xb(e,u,c,p,h,s),i,o]})}(e,t,n,s,a)}(s,this.gamma.read(),this.beta.read(),o,this.epsilon),m=(e,t,n)=>{bi(()=>{const r=1-n,s=e.read(),a=s.sub(t).mul(r);e.write(s.sub(a))})};return(()=>{m(this.movingMean,d,this.momentum),m(this.movingVariance,f,this.momentum)})(),p})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:lm(this.betaInitializer),gammaInitializer:lm(this.gammaInitializer),movingMeanInitializer:lm(this.movingMeanInitializer),movingVarianceInitializer:lm(this.movingVarianceInitializer),betaRegularizer:cy(this.betaRegularizer),gammaRegularizer:cy(this.gammaRegularizer),betaConstraint:nf(this.betaConstraint),gammaConstraint:nf(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}wb.className="BatchNormalization",u.registerClass(wb);class kb extends Tm{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error("Expected axis to be an integer, but received "+this.axis)}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(this.axis));for(const e of this.axis)if(!Number.isInteger(e))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(this.axis))}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=um(e.betaInitializer||"zeros"),this.gammaInitializer=um(e.gammaInitializer||"ones"),this.betaRegularizer=py(e.betaRegularizer),this.gammaRegularizer=py(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=ym(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let r=0;r<this.axis.length;++r)this.axis[r]<0&&(this.axis[r]+=t);for(const r of this.axis)if(r<0||r>=t)throw new Error("Invalid axis: "+r);if(this.axis.length!==Vd(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);const n=this.axis.map(t=>e[t]);this.gamma=this.scale?this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(e,t){const n=gm(e),r=n.shape,s=r.length;return bi(()=>{let{mean:e,variance:t}=Ko(n,this.axis,!0);const a=Ad(1,s);for(const n of this.axis)a[n]=r[n];const i=e=>null!=e&&e.shape.length!==s&&this.axis!==[s-1]?e.reshape(a):e;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let n=0;n<s;++n)-1!==this.axis.indexOf(n)?(u.push(r[n]),c.push(1)):(u.push(1),c.push(r[n]));return e=e.tile(u),t=t.tile(u),o=o.tile(c),l=l.tile(c),xb(n,e,t,l,o,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:lm(this.betaInitializer),gammaInitializer:lm(this.gammaInitializer),betaRegularizer:cy(this.betaRegularizer),gammaRegularizer:cy(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}kb.className="LayerNormalization",u.registerClass(kb);class vb extends Tm{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Td(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Td(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Td(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new vm({ndim:4})]}computeOutputShape(e){let t,n;return e=ym(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return bi(()=>{return t=gm(e),n=this.padding,r=this.dataFormat,bi(()=>{if(4!==t.rank)throw new Td("temporalPadding expects input tensor to be 4-D, but received a "+t.rank+"-D tensor.");if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Td("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new Td(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],tl(t,e)});var t,n,r})}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Ib(e,t,n,r,s,a){return bi(()=>{let i;pf(s),ff(a),df(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=vy(e,s);const o="same"===r?"same":"valid";return i="max"===a?Do(e,t,n,o):Gi(e,t,n,o),"channelsFirst"===s&&(i=_l(i,[0,3,1,2])),i})}function Nb(e,t,n,r,s,a){return bi(()=>{let i;pf(s),ff(a),df(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=Iy(e,s);const o="same"===r?"same":"valid";return i="max"===a?_o(e,t,n,o):Hi(e,t,n,o),"channelsFirst"===s&&(i=_l(i,[0,4,1,2,3])),i})}vb.className="ZeroPadding2D",u.registerClass(vb);class Sb extends Tm{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Td("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(e.poolSize));this.poolSize=e.poolSize}if(jd(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Td("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(e.strides));this.strides=e.strides}jd(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,df(this.padding),this.inputSpec=[new vm({ndim:3})]}computeOutputShape(e){const t=wy((e=ym(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return bi(()=>{this.invokeCallHook(e,t),e=Tf(gm(e),2);const n=this.poolingFunction(gm(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Nl(n,[2])})}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class Cb extends Sb{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return pf(s),df(r),Ib(e,t,n,r,s,"max")}}Cb.className="MaxPooling1D",u.registerClass(Cb);class Tb extends Sb{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return pf(s),df(r),Ib(e,t,n,r,s,"avg")}}Tb.className="AveragePooling1D",u.registerClass(Tb);class $b extends Tm{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Td("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+e.strides.length+".");this.strides=e.strides}else this.strides=[e.strides,e.strides];jd(this.poolSize,"poolSize"),jd(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,pf(this.dataFormat),df(this.padding),this.inputSpec=[new vm({ndim:4})]}computeOutputShape(e){e=ym(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=wy(t,this.poolSize[0],this.padding,this.strides[0]),n=wy(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return bi(()=>(this.invokeCallHook(e,t),this.poolingFunction(gm(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Eb extends $b{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return pf(s),df(r),Ib(e,t,n,r,s,"max")}}Eb.className="MaxPooling2D",u.registerClass(Eb);class Ab extends $b{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return pf(s),df(r),Ib(e,t,n,r,s,"avg")}}Ab.className="AveragePooling2D",u.registerClass(Ab);class Rb extends Tm{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Td("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+e.strides.length+".");this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];jd(this.poolSize,"poolSize"),jd(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,pf(this.dataFormat),df(this.padding),this.inputSpec=[new vm({ndim:5})]}computeOutputShape(e){e=ym(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=wy(t,this.poolSize[0],this.padding,this.strides[0]),n=wy(n,this.poolSize[1],this.padding,this.strides[1]),r=wy(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return bi(()=>(this.invokeCallHook(e,t),this.poolingFunction(gm(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Fb extends Rb{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return pf(s),df(r),Nb(e,t,n,r,s,"max")}}Fb.className="MaxPooling3D",u.registerClass(Fb);class Db extends Rb{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return pf(s),df(r),Nb(e,t,n,r,s,"avg")}}Db.className="AveragePooling3D",u.registerClass(Db);class _b extends Tm{constructor(e){super(e),this.inputSpec=[new vm({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new $d}}class Ob extends _b{constructor(e){super(e||{})}call(e,t){return bi(()=>{const t=gm(e);return Mo(t,1)})}}Ob.className="GlobalAveragePooling1D",u.registerClass(Ob);class Mb extends _b{constructor(e){super(e||{})}call(e,t){return bi(()=>{const t=gm(e);return To(t,1)})}}Mb.className="GlobalMaxPooling1D",u.registerClass(Mb);class Lb extends Tm{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,pf(this.dataFormat),this.inputSpec=[new vm({ndim:4})]}computeOutputShape(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new $d}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class zb extends Lb{call(e,t){return bi(()=>{const t=gm(e);return Mo(t,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}zb.className="GlobalAveragePooling2D",u.registerClass(zb);class Pb extends Lb{call(e,t){return bi(()=>{const t=gm(e);return To(t,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}Pb.className="GlobalMaxPooling2D",u.registerClass(Pb);class Bb extends Tm{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=Vm(t.layer,n);delete t.layer;const s={layer:r};return Object.assign(s,t),new e(s)}}class Wb extends Bb{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=ym(e)).length<3)throw new Td("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(e));this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=ym(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t);return[n[0],e[1]].concat(n.slice(1))}call(e,t){return bi(()=>Ly((e,n)=>[gm(this.layer.call(e,t)),[]],e=gm(e),[],!1,null,null,!1,!0)[1])}}Wb.className="TimeDistributed",u.registerClass(Wb);class Vb extends Bb{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=Vm(n),t.goBackwards=!0!==t.goBackwards;const r={};if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=Vm(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,Gd(cf,"BidirectionalMergeMode",this.mergeMode),e.weights)throw new $d("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,t)),this.backwardLayer.setWeights(e.slice(t))}computeOutputShape(e){let t,n,r,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),t=s[0]):t=s[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):Dd(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=My(e,n,r,this.numConstants);if(e=s.inputs,n=s.initialState,r=s.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Td("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const r=n.map(e=>new vm({shape:e.shape}));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),i.push(...r)}if(null!=r)throw new $d("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof Im;for(const l of a)if(l instanceof Im!==o)throw new Td("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,t);return this.inputSpec=s,o}return super.apply(e,t)}call(e,t){return bi(()=>{const n=t.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(e,t),s=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),s=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=hl(s,1)),"concat"===this.mergeMode?i=Rf([r,s]):"sum"===this.mergeMode?i=Ci(r,s):"ave"===this.mergeMode?i=$o(.5,Ci(r,s)):"mul"===this.mergeMode?i=$o(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){gf(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),gf(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map(e=>null);return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=Vm(t.layer);if(delete t.layer,null!=t.numConstants)throw new $d("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}function Ub(e){return new Em(e)}function Gb(e){return new gy(e)}function Hb(e){return new dy(e)}function jb(e){return new fy(e)}function qb(e){return new my(e)}function Kb(e){return new by(e)}function Xb(e){return new yy(e)}function Yb(e){return new Fy(e)}function Jb(e){return new Ty(e)}function Zb(e){return new Ey(e)}function Qb(e){return new $y(e)}function ex(e){return new Ry(e)}function tx(e){return new Dy(e)}function nx(e){return new _y(e)}function rx(e){return new Oy(e)}function sx(e){return new tb(e)}function ax(e){return new Qy(e)}function ix(e){return new Jy(e)}function ox(e){return new Zy(e)}function lx(e){return new eb(e)}function ux(e){return new nb(e)}function cx(e){return new rb(e)}function hx(e){return new sb(e)}function px(e){return new ib(e)}function dx(e){return new lb(e)}function fx(e){return new cb(e)}function mx(e){return new db(e)}function gx(e){return new hb(e)}function yx(e){return new pb(e)}function bx(e){return new ub(e)}function xx(e){return new mb(e)}function wx(e){return new wb(e)}function kx(e){return new kb(e)}function vx(e){return new vb(e)}function Ix(e){return new Tb(e)}function Nx(e){return Ix(e)}function Sx(e){return Ix(e)}function Cx(e){return new Ab(e)}function Tx(e){return Cx(e)}function $x(e){return Cx(e)}function Ex(e){return new Db(e)}function Ax(e){return Ex(e)}function Rx(e){return Ex(e)}function Fx(e){return new Ob(e)}function Dx(e){return new zb(e)}function _x(e){return new Mb(e)}function Ox(e){return new Pb(e)}function Mx(e){return new Cb(e)}function Lx(e){return new Eb(e)}function zx(e){return new Fb(e)}function Px(e){return new Uy(e)}function Bx(e){return new Vy(e)}function Wx(e){return new Hy(e)}function Vx(e){return new Gy(e)}function Ux(e){return new Wy(e)}function Gx(e){return new By(e)}function Hx(e){return new Yy(e)}function jx(e){return new Xy(e)}function qx(e){return new zy(e)}function Kx(e){return new jy(e)}function Xx(e){return new Vb(e)}function Yx(e){return new Wb(e)}Vb.className="Bidirectional",u.registerClass(Vb);const Jx=_x,Zx=Ox,Qx=Mx,ew=Lx;function tw(e){return new gb(e)}function nw(e){return new yb(e)}function rw(e){return new bb(e)}function sw(e){return new ab(e)}var aw,iw;!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(aw||(aw={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(iw||(iw={}));const ow=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],lw=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],uw=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],cw=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],hw=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],pw=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],dw=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],fw=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],mw=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}],gw=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],yw=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],bw=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],xw=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],ww=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],kw=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],vw=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Iw=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];Fs({addN_:function(e){q(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),q(e.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+e.length);const t=e.map((e,t)=>As(e,"tensors"+t,"addN")),n=t[0];return t.forEach(e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!Q(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}),vs.runKernel(Ue,t)}}),Fs({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a=As(e,"x","maxPoolWithArgmax"),i=vs.runKernel(xn,{x:a},{filterSize:t,strides:n,pad:r,includeBatchInIndex:s});return{result:i[0],indexes:i[1]}}}),Fs({multinomial_:function(e,t,n,r=!1){const s=As(e,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);n=n||Math.random();const o=1===i?Ui(s,[1,-1]):s,l=vs.runKernel(Sn,{logits:o},{numSamples:t,seed:n,normalized:r});return 1===i?Ui(l,[l.size]):l}}),Fs({bincount_:function(e,t,n){const r=As(e,"x","bincount"),s=As(t,"weights","bincount");return q("int32"===r.dtype,()=>"Error in bincount: input dtype must be int32, but got "+r.dtype),q(n>=0,()=>`size must be non-negative, but got ${n}.`),q(s.size===r.size||0===s.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: `+s.shape+"."),vs.runKernel(at,{x:r,weights:s},{size:n})}}),Fs({denseBincount_:function(e,t,n,r=!1){const s=As(e,"x","denseBincount"),a=As(t,"weights","denseBincount");return q("int32"===s.dtype,()=>"Error in denseBincount: input dtype must be int32, but got "+s.dtype),q(s.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`),q(n>=0,()=>`size must be non-negative, but got ${n}.`),q(a.size===s.size||0===a.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: `+a.shape+"."),vs.runKernel(vt,{x:s,weights:a},{size:n,binaryOutput:r})}}),Fs({scatterND_:function(e,t,n){const r=As(e,"indices","scatterND","int32"),s=As(t,"updates","scatterND");return Qu(s,r,n),vs.runKernel(Zn,{indices:r,updates:s},{shape:n})}}),Fs({gatherND_:function(e,t){const n=As(t,"indices","gatherND","int32"),r=As(e,"x","gatherND");return vs.runKernel(jt,{params:r,indices:n})}});var Nw,Sw=n("YSVl");function Cw(e,t,n=new Map,r=new Set){if(null==e)return null;if(r.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(Aw(e)){const s=Array.isArray(e)?[]:{};r.add(e);for(const a in e){const i=Cw(e[a],t,n,r);s[a]=i}return r.delete(e),s}throw new Error("Can't recurse into non-iterable type: "+e)}return n.set(e,s.value),s.value}function Tw(e,t=Ew){return $w(e,t)}function $w(e,t,n=new Set){const r=e[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(Aw(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=$w(e.map(e=>e[a]),t,n);s[a]=r}return n.delete(r),s}throw new Error("Can't recurse into non-iterable type: "+r)}return s.value}function Ew(e){return null===e?null:Aw(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function Aw(e){return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof ss))}function Rw(e){return Cw(e,Fw)}function Fw(e){return e instanceof ss?{value:e.clone(),recurse:!1}:Aw(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class Dw{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class _w extends Dw{constructor(){super(_w.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let r=0;r<n;r++)t[r]=this.get(this.wrap(this.begin+r));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}_w.INITIAL_CAPACITY=32;class Ow{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new Gw(this,e)}filter(e){return new Vw(this,e)}map(e){return new Uw(this,e)}mapAsync(e){return new Hw(this,e)}serialMapAsync(e){return new Hw(this,e).serial()}flatmap(e){return new qw(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile(e=>!0===e)}rowMajorBatch(e,t=!0){return new Ww(this,e,t)}columnMajorBatch(e,t=!0,n=Ew){return this.rowMajorBatch(e,t).map(e=>Tw(e,n))}concatenate(e,t){return new Kw(new Mw([this,e]),t)}take(e){return e<0||null==e?this:new Bw(this,e)}skip(e){return e<0||null==e?this:new Pw(this,e)}prefetch(e){return new Xw(this,e)}shuffle(e,t){return new Yw(this,e,t)}serial(){return new zw(this)}}class Mw extends Ow{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:Rw(e),done:!1}}}class Lw extends Ow{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message="Error thrown while iterating through a dataset: "+e.message,e}}}class zw extends Ow{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Serial"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class Pw extends Ow{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Skip"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;xi(e.value)}return this.upstream.next()}}class Bw extends Ow{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return this.upstream.summary()+" -> Take"}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Ww extends Ow{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> RowMajorBatch"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class Vw extends Ow{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Filter"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;xi(e.value)}}}class Uw extends Ow{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return this.upstream.summary()+" -> Map"}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=s.getTensorsInContainer(e.value),n=this.transform(e.value),r=s.getTensorsInContainer(n);for(const a of t)s.isTensorInList(a,r)||a.dispose();return{value:n,done:!1}}}class Gw extends Ow{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> handleErrors"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class Hw extends Ow{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return this.upstream.summary()+" -> AsyncMap"}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=s.getTensorsInContainer(e.value),n=await this.transform(e.value),r=s.getTensorsInContainer(n);for(const a of t)s.isTensorInList(a,r)||a.dispose();return{value:n,done:!1}}}class jw extends Ow{constructor(){super(),this.outputQueue=new _w,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!(await this.pump()))return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class qw extends jw{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return this.upstream.summary()+" -> Flatmap"}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=s.getTensorsInContainer(e.value),n=this.transform(e.value),r=s.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const a of t)s.isTensorInList(a,r)||a.dispose();return!0}}class Kw extends Ow{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(Nw||(Nw={}));class Xw extends Ow{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new Dw(t)}summary(){return this.upstream.summary()+" -> Prefetch"}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class Yw extends Xw{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=Sw.alea(n||r.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Jw{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return r.assert(e>0,()=>"batchSize needs to be positive, but it is\n      "+e),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),Zw(async()=>(await n.iterator()).columnMajorBatch(e,t,Qw),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,Zw(async()=>(await t.iterator()).concatenate(await e.iterator()),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,Zw(async()=>(await t.iterator()).filter(t=>bi(()=>e(t))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return Zw(async()=>(await t.iterator()).map(t=>bi(()=>e(t))),this.size)}mapAsync(e){const t=this;return Zw(async()=>(await t.iterator()).mapAsync(e),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return Zw(async()=>(await t.iterator()).prefetch(e),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,Zw(async()=>{return n=(r=async()=>({value:await t.iterator(),done:!1}),new Lw(r)).take(e),new Kw(n,undefined);var n,r},n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,Zw(async()=>(await t.iterator()).skip(e),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,a=Sw.alea(t||r.now().toString());return Zw(async()=>{let t=a.int32();return n&&(t+=a.int32()),(await s.iterator()).shuffle(e,t.toString())},this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,Zw(async()=>(await t.iterator()).take(e),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Zw(e,t=null){return new class extends Jw{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function Qw(e){return null===e?null:null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof ss||r.isTypedArray(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof ss?Sl(e):Os(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}function ek(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&r.assert("complex64"!==e.dtype,()=>t+" does not support complex64 tensors in the CPU backend.")})}Jw.MAX_BUFFER_SIZE=1e4,Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const tk=d.whereImpl;class nk extends P{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new z(this,gi())}write(e,t,n){this.firstUse&&(this.firstUse=!1,_e().get("IS_NODE")&&p.warn("\n============================\nHi there \ud83d\udc4b. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&r.isString(n[0])){const a=n.map(e=>r.encodeString(e));s=this.write(a,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,r){this.data.set(e,{values:t,dtype:r,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return p.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map(e=>r.decodeString(e))}catch(s){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ta(e.shape,e.dtype,n)}makeOutput(e,t,n){const r=this.write(e,t,n);return gi().makeTensorFromDataId(r,t,n,this)}disposeData(e){if(this.data.has(e)){const{complexTensorInfos:t}=this.data.get(e);null!=t&&(this.disposeData(t.real.dataId),this.disposeData(t.imag.dataId)),this.data.delete(e)}}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.data.has(t)){const e=this.data.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}async time(e){const t=r.now();return e(),{kernelMs:r.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){ek([e],"where");const t=this.readSync(e.dataId);return tk(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function rk(e,t,n){return({inputs:s,attrs:a,backend:i})=>{const{x:o}=s;if(ek(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const l=i,u=l.data.get(o.dataId).values,c=r.sizeFromShape(o.shape),h=n||o.dtype,p=r.getArrayFromDType(h,c);for(let e=0;e<c;++e)p[e]=t(u[e],a);return l.makeTensorInfo(o.shape,h,p)}}function sk(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;if(ek(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,s);return o.makeTensorInfo(i.shape,u,c)}}ki("cpu",()=>new nk,1);const ak=rk(Ft,e=>e>=0?e:Math.exp(e)-1),ik={kernelName:Ft,backendName:"cpu",kernelFunc:ak};function ok(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const lk={kernelName:Xt,backendName:"cpu",kernelFunc:ok};function uk(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:i}=s;ek([a],"leakyRelu");const o=r.sizeFromShape(a.shape),l=n.data.get(a.dataId).values,u=r.getTypedArrayFromDType("float32",o);for(let r=0;r<l.length;r++)u[r]=l[r]<0?i*l[r]:l[r];return n.makeTensorInfo(a.shape,"float32",u)}const ck={kernelName:tn,backendName:"cpu",kernelFunc:uk};function hk(e){return(t,n,s,a,i)=>{const o=p.assertAndGetBroadcastShape(t,n),l=o.length,u=r.computeStrides(o),c=r.sizeFromShape(o),h=r.getTypedArrayFromDType(i,c),d=t.length,f=n.length,m=r.computeStrides(t),g=r.computeStrides(n),y=p.getBroadcastDims(t,o),b=p.getBroadcastDims(n,o);if(y.length+b.length===0)for(let r=0;r<h.length;++r)h[r]=e(s[r%s.length],a[r%a.length]);else for(let p=0;p<h.length;++p){const t=r.indexToLoc(p,l,u),n=t.slice(-d);y.forEach(e=>n[e]=0);const i=r.locToIndex(n,d,m),o=t.slice(-f);b.forEach(e=>o[e]=0);const c=r.locToIndex(o,f,g);h[p]=e(s[i],a[c])}return[h,o]}}const pk=hk((e,t)=>e<0?t*e:e);function dk(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;ek([r,s],"prelu");const a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,[o,l]=pk(r.shape,s.shape,a,i,r.dtype);return n.makeTensorInfo(l,r.dtype,o)}const fk={kernelName:Ln,backendName:"cpu",kernelFunc:dk},mk=rk(Vn,e=>Math.max(0,e)),gk={kernelName:Vn,backendName:"cpu",kernelFunc:mk},yk=rk(Kn,e=>Math.min(Math.max(0,e),6)),bk={kernelName:Kn,backendName:"cpu",kernelFunc:yk};function xk(e,t,n,r,s){if("linear"===n)return ok({inputs:{x:t},backend:e});if("relu"===n)return mk({inputs:{x:t},backend:e});if("elu"===n)return ak({inputs:{x:t},backend:e});if("relu6"===n)return yk({inputs:{x:t},backend:e});if("prelu"===n)return dk({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return uk({inputs:{x:t},backend:e,attrs:{alpha:s}});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function wk(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,o=n.makeTensorInfo(r.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",i)},o}const kk={kernelName:ut,backendName:"cpu",kernelFunc:wk};function vk(e,t,n="float32"){if("complex64"===n)return wk({inputs:{real:vk(e,t,"float32"),imag:vk(e,t,"float32")},backend:e});const s=r.makeZerosTypedArray(r.sizeFromShape(t),n);return e.makeTensorInfo(t,n,s)}function Ik(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const Nk={kernelName:Bn,backendName:"cpu",kernelFunc:Ik};function Sk(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dtype:i}=s;if("complex64"===i){if("complex64"===a.dtype)return ok({inputs:{x:a},backend:n});const e=vk(n,a.shape,a.dtype),t=Sk({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),r=wk({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===a.dtype){const e=Ik({inputs:{input:a},backend:n}),t=Sk({inputs:{x:e},backend:n,attrs:{dtype:i}});return n.disposeIntermediateTensorInfo(e),t}if(!r.hasEncodingLoss(a.dtype,i)){const e=ok({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i){const e=n.data.get(a.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(a.shape,"int32",t)}if("bool"===i){const e=n.data.get(a.dataId).values,t=r.toTypedArray([0],a.dtype),[s,i]=hk((e,t)=>e!==t?1:0)(a.shape,[],e,t,"bool");return n.makeTensorInfo(i,"bool",s)}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}const Ck={kernelName:it,backendName:"cpu",kernelFunc:Sk};function Tk(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a:a,b:i}=n,o=s;ek([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c=r||a.dtype,[h,p]=t(a.shape,i.shape,l,u,c);return o.makeTensorInfo(p,c,h)}:({inputs:e,backend:s})=>{const{a:a,b:i}=e,o=s;if("complex64"===a.dtype||"complex64"===i.dtype){const e=Sk({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),r=t.complexTensorInfos.imag,s=o.data.get(t.complexTensorInfos.real.dataId).values,l=o.data.get(r.dataId).values,u=Sk({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),c=o.data.get(u.dataId),h=c.complexTensorInfos.imag,p=o.data.get(c.complexTensorInfos.real.dataId).values,d=o.data.get(h.dataId).values,[f,m,g]=n(a.shape,i.shape,s,l,p,d),y=o.makeTensorInfo(g,"float32",f),b=o.makeTensorInfo(g,"float32",m),x=wk({inputs:{real:y,imag:b},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(u),o.disposeIntermediateTensorInfo(y),o.disposeIntermediateTensorInfo(b),x}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,s=r||a.dtype,[l,u]=t(a.shape,i.shape,e,n,s);return o.makeTensorInfo(u,s,l)}}}function $k(e){return(t,n,s,a,i,o)=>{const l=p.assertAndGetBroadcastShape(t,n),u=r.sizeFromShape(l),c=l.length,h=r.computeStrides(l),d=r.getTypedArrayFromDType("float32",u),f=r.getTypedArrayFromDType("float32",u),m=p.getBroadcastDims(t,l),g=p.getBroadcastDims(n,l),y=p.mergeRealAndImagArrays(s,a),b=p.mergeRealAndImagArrays(i,o),x=t.length,w=r.computeStrides(t),k=n.length,v=r.computeStrides(n);if(m.length+g.length===0)for(let r=0;r<d.length;r++){const t=r%y.length,n=r%b.length,s=e(y[2*t],y[2*t+1],b[2*n],b[2*n+1]);d[r]=s.real,f[r]=s.imag}else for(let p=0;p<d.length;p++){const t=r.indexToLoc(p,c,h),n=t.slice(-x);m.forEach(e=>n[e]=0);const s=r.locToIndex(n,x,w),a=t.slice(-k);g.forEach(e=>a[e]=0);const i=r.locToIndex(a,k,v),o=e(y[2*s],y[2*s+1],b[2*i],b[2*i+1]);d[p]=o.real,f[p]=o.imag}return[d,f,l]}}const Ek=hk((e,t)=>e+t),Ak=$k((e,t,n,r)=>({real:e+n,imag:t+r})),Rk=Tk(Ve,Ek,Ak),Fk={kernelName:Ve,backendName:"cpu",kernelFunc:Rk};function Dk(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:i}=s,o=r.sizeFromShape(a.shape),l=r.inferFromImplicitShape(i,o),u=r.sizeFromShape(l);r.assert(o===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${a.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`),n.incRef(a.dataId);const c=n.data.get(a.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.imag;c.complexTensorInfos.real.shape=l,e.shape=l}return{dataId:a.dataId,shape:l,dtype:a.dtype}}const _k={kernelName:Un,backendName:"cpu",kernelFunc:Dk};function Ok(e){const{inputs:t,backend:n,attrs:s}=e,{a:a,b:i}=t,{transposeA:o,transposeB:l}=s;ek([a,i],"matMul");const u=a.shape.length,c=i.shape.length,h=o?a.shape[u-2]:a.shape[u-1],p=l?i.shape[c-1]:i.shape[c-2],d=o?a.shape[u-1]:a.shape[u-2],f=l?i.shape[c-2]:i.shape[c-1],m=a.shape.slice(0,-2),g=i.shape.slice(0,-2),y=r.sizeFromShape(m),b=r.sizeFromShape(g);r.assert(u>=2&&c>=2&&(y===b||1===y||1===b),()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${m}) and (${g}).`);const x=(y>b?a.shape.slice(0,-2):i.shape.slice(0,-2)).concat([d,f]);r.assert(h===p,()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${a.shape} and ${i.shape} and transposeA=${o} and transposeB=${l} must match.`);const w=l?[b,f,p]:[b,p,f],k=Dk({inputs:{x:a},backend:n,attrs:{shape:o?[y,h,d]:[y,d,h]}}),v=Dk({inputs:{x:i},backend:n,attrs:{shape:w}}),I=o?k.shape[1]:k.shape[2],N=o?k.shape[2]:k.shape[1],S=l?v.shape[1]:v.shape[2],C=Math.max(y,b),T=n.data.get(k.dataId).values,$=n.data.get(v.dataId).values,E=r.computeStrides(k.shape),A=r.computeStrides(v.shape),[R,F,D]=o?[E[0],1,E[1]]:[E[0],E[1],1],[_,O,M]=l?[1,A[1],A[0]]:[A[1],1,A[0]],L=N*S,z=Ta([C,N,S],k.dtype),P=z.values,B=n.blockSize;for(let r=0;r<C;r++)for(let e=0;e<N;e+=B)for(let t=0;t<S;t+=B)for(let n=0;n<I;n+=B){const s=Math.min(e+B,N),a=Math.min(t+B,S),i=Math.min(n+B,I);for(let o=e;o<s;o++)for(let e=t;e<a;e++){let t=0;for(let s=n;s<i;s++){const n=Math.min(r,y-1)*R,a=Math.min(r,b-1)*M;t+=T[n+o*F+s*D]*$[s*_+e*O+a]}P[r*L+(o*S+e)]+=t}}return n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(x,z.dtype,z.values)}const Mk={kernelName:rt,backendName:"cpu",kernelFunc:Ok},Lk={kernelName:Er,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=r;let p,d,f;const m=[];p=Ok({inputs:{a:s,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=Rk({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=xk(n,p,c,o,h),m.push(p),p=f);for(const g of m)n.disposeIntermediateTensorInfo(g);return p}};function zk(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const Pk={kernelName:Pe,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;ek(t,"abs");let s=new Float32Array(r.sizeFromShape(t.shape));return s=zk(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,"float32")}},Bk=rk(Be,e=>Math.acos(e)),Wk={kernelName:Be,backendName:"cpu",kernelFunc:Bk},Vk=rk(We,e=>Math.acosh(e)),Uk={kernelName:We,backendName:"cpu",kernelFunc:Vk},Gk={kernelName:Ue,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;ek(t,"addN");const s=r.map(e=>n.data.get(e.dataId).values),a=Ta(r[0].shape,r[0].dtype),i=a.values;for(let o=0;o<r.length;o++){const e=s[o];for(let t=0;t<i.length;t++)i[t]+=e[t]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function Hk(e,t,n,s,a){const i=t.length,o=r.sizeFromShape(t),l=r.computeStrides(t),u=r.computeStrides(a),c=r.getTypedArrayFromDType(n,r.sizeFromShape(a));for(let h=0;h<o;++h){const t=r.indexToLoc(h,i,l),n=new Array(t.length);for(let e=0;e<n.length;e++)n[e]=t[s[e]];c[r.locToIndex(n,i,u)]=e[h]}return c}function jk(e){const{inputs:t,attrs:n,backend:r}=e,{x:s}=t,{perm:a}=n;ek(s,"transpose");const i=new Array(s.shape.length);for(let l=0;l<i.length;l++)i[l]=s.shape[a[l]];const o=Hk(r.data.get(s.dataId).values,s.shape,s.dtype,a,i);return{dataId:r.write(o,i,s.dtype),shape:i,dtype:s.dtype}}const qk={kernelName:kr,backendName:"cpu",kernelFunc:jk},Kk={kernelName:Ge,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;ek(a,"all");const l=r.parseAxisParam(i,a.shape);let u=l;const c=p.getAxesPermutation(u,a.shape.length);let h=a;null!=c&&(h=jk({inputs:{x:a},backend:n,attrs:{perm:c}}),u=p.getInnerMostAxes(u.length,a.shape.length)),p.assertAxesAreInnerMostDims("all",u,h.shape.length);const[d,f]=p.computeOutAndReduceShapes(h.shape,u),m=r.sizeFromShape(f),g=r.makeZerosTypedArray(r.sizeFromShape(d),h.dtype),y=n.data.get(h.dataId).values;for(let r=0;r<g.length;++r){const e=r*m;let t=y[e];for(let n=0;n<m;++n){const r=y[e+n];t=t&&r}g[r]=t}null!=c&&n.disposeIntermediateTensorInfo(h);const b=n.makeTensorInfo(d,h.dtype,g);if(o){const e=Dk({inputs:{x:b},backend:n,attrs:{shape:p.expandShapeToKeepDim(d,l)}});return n.disposeIntermediateTensorInfo(b),e}return b}},Xk={kernelName:He,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;ek(a,"any");const l=r.parseAxisParam(i,a.shape);let u=l;const c=p.getAxesPermutation(u,a.shape.length);let h=a;null!=c&&(h=jk({inputs:{x:a},backend:n,attrs:{perm:c}}),u=p.getInnerMostAxes(u.length,a.shape.length)),p.assertAxesAreInnerMostDims("any",u,h.shape.length);const[d,f]=p.computeOutAndReduceShapes(h.shape,u),m=r.sizeFromShape(f),g=r.makeZerosTypedArray(r.sizeFromShape(d),h.dtype),y=n.data.get(h.dataId).values;for(let r=0;r<g.length;++r){const e=r*m;let t=y[e];for(let n=0;n<m;++n){const r=y[e+n];t=t||r}g[r]=t}null!=c&&n.disposeIntermediateTensorInfo(h);const b=n.makeTensorInfo(d,h.dtype,g);if(o){const e=Dk({inputs:{x:b},backend:n,attrs:{shape:p.expandShapeToKeepDim(d,l)}});return n.disposeIntermediateTensorInfo(b),e}return b}},Yk={kernelName:je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;ek(a,"argMax");let o=r.parseAxisParam(i,a.shape);const l=p.getAxesPermutation(o,a.shape.length);let u=a;const c=[];null!=l&&(u=jk({inputs:{x:a},backend:n,attrs:{perm:l}}),c.push(u),o=p.getInnerMostAxes(o.length,u.shape.length)),o=[o[0]],p.assertAxesAreInnerMostDims("argMax",o,u.shape.length);const[h,d]=p.computeOutAndReduceShapes(u.shape,o),f=r.sizeFromShape(h),m=r.makeZerosTypedArray(f,"int32"),g=r.sizeFromShape(d),y=n.data.get(u.dataId).values;for(let r=0;r<m.length;++r){const e=r*g;let t=y[e],n=0;for(let r=0;r<g;++r){const s=y[e+r];s>t&&(t=s,n=r)}m[r]=n}return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(h,"int32",m)}},Jk={kernelName:qe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;ek(a,"argMin");let o=r.parseAxisParam(i,a.shape);const l=p.getAxesPermutation(o,a.shape.length);let u=a;const c=[];null!=l&&(u=jk({inputs:{x:a},backend:n,attrs:{perm:l}}),c.push(u),o=p.getInnerMostAxes(o.length,u.shape.length)),o=[o[0]],p.assertAxesAreInnerMostDims("argMin",o,u.shape.length);const[h,d]=p.computeOutAndReduceShapes(u.shape,o),f=r.sizeFromShape(h),m=r.makeZerosTypedArray(f,"int32"),g=r.sizeFromShape(d),y=n.data.get(u.dataId).values;for(let r=0;r<m.length;++r){const e=r*g;let t=y[e],n=0;for(let r=0;r<g;++r){const s=y[e+r];s<t&&(t=s,n=r)}m[r]=n}return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(h,"int32",m)}},Zk=rk(Ke,e=>Math.asin(e)),Qk={kernelName:Ke,backendName:"cpu",kernelFunc:Zk},ev=rk(Xe,e=>Math.asinh(e)),tv={kernelName:Xe,backendName:"cpu",kernelFunc:ev},nv=rk(Ye,e=>Math.atan(e)),rv={kernelName:Ye,backendName:"cpu",kernelFunc:nv},sv=hk((e,t)=>Math.atan2(e,t)),av=Tk(Ze,sv),iv={kernelName:Ze,backendName:"cpu",kernelFunc:av},ov=rk(Je,e=>Math.atanh(e)),lv={kernelName:Je,backendName:"cpu",kernelFunc:ov};function uv(e,t,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,l=s.dilationHeight,u=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,p=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Ta(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let w=0;w<s.batchSize;++w){const t=w*y,n=w*r[0];for(let m=0;m<s.inChannels;++m)for(let y=0;y<s.outHeight;++y){const w=y*i-p,k=Math.max(0,w),v=Math.min(s.inHeight,c+w),I=t+y*b;for(let t=0;t<s.outWidth;++t){const i=t*o-d,c=Math.max(0,i),p=Math.min(s.inWidth,h+i);let y=f,b=0,w=0;for(let t=k;t<v;t+=l){const s=n+t*r[1];for(let t=c;t<p;t+=u){const n=e[s+t*r[2]+m];"max"===a&&n>y?y=n:"avg"===a&&(b+=n,w++)}if(isNaN(y))break}g[I+t*x+m]="avg"===a?b/w:y}}}return m}function cv(e,t,n,r,s=!1,a=!1){const i=Ta(r.outShape,"int32"),o=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,p=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=Ta(t,n,e);for(let g=0;g<r.batchSize;++g)for(let e=0;e<r.inChannels;++e)for(let t=0;t<r.outHeight;++t){const n=t*o-d;let y=n;for(;y<0;)y+=u;const b=Math.min(r.inHeight,h+n);for(let o=0;o<r.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(r.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,k=-1;for(let t=y;t<b;t+=u){const i=t-n;for(let n=d;n<x;n+=c){const o=n-h,l=m.get(g,t,n,e);l>w&&(w=l,k=s?a?((g*r.inHeight+t)*r.inWidth+n)*r.inChannels+e:(t*r.inWidth+n)*r.inChannels+e:i*p+o)}}i.set(k,g,t,o,e)}}return i}function hv(e,t,n,r,s,a){const i=s.strideDepth,o=s.strideHeight,l=s.strideWidth,u=s.dilationDepth,c=s.dilationHeight,h=s.dilationWidth,p=s.effectiveFilterDepth,d=s.effectiveFilterHeight,f=s.effectiveFilterWidth,m=s.padInfo.front,g=s.padInfo.top,y=s.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Ta(s.outShape,n),w=x.values,k=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],v=s.outShape[2]*s.outShape[3]*s.outShape[4],I=s.outShape[3]*s.outShape[4],N=s.outShape[4];for(let S=0;S<s.batchSize;++S){const t=S*k,n=S*r[0];for(let x=0;x<s.inChannels;++x)for(let k=0;k<s.outDepth;++k){const S=k*i-m;let C=S;for(;C<0;)C+=u;const T=Math.min(s.inDepth,p+S),$=t+k*v;for(let t=0;t<s.outHeight;++t){const i=t*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(s.inHeight,d+i),k=$+t*I;for(let t=0;t<s.outWidth;++t){const i=t*l-y;let o=i;for(;o<0;)o+=h;const d=Math.min(s.inWidth,f+i),g=k+t*N;let v=b,I=0,S=0;for(let t=C;t<T;t+=u){const s=n+t*r[1];for(let t=p;t<m;t+=c){const n=s+t*r[2];for(let t=o;t<d;t+=h){const s=e[n+t*r[3]+x];if("max"===a&&s>v?v=s:"avg"===a&&(I+=s,S++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+x]="avg"===a?I/S:v}}}}return x}const pv={kernelName:Qe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;ek(a,"avgPool");const{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;r.assert(p.eitherStridesOrDilationsAreOne(o,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=p.computePool2DInfo(a.shape,i,o,1,l,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&r.arraysEqual(c.inShape,c.outShape))h=ok({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=r.computeStrides(a.shape),s=uv(e,0,a.dtype,t,c,"avg");h=n.makeTensorInfo(c.outShape,a.dtype,s.values)}return h}},dv={kernelName:tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u,dataFormat:c,dilations:h}=s;ek(a,"avgPool3d");let d=h;null==d&&(d=[1,1,1]);const f=p.computePool3DInfo(a.shape,i,o,d,l,u,c),m=hv(n.data.get(a.dataId).values,0,a.dtype,r.computeStrides(a.shape),f,"avg");return n.makeTensorInfo(m.shape,"float32",m.values)}},fv={kernelName:nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:i,strides:o,pad:l,dilations:u,dimRoundingMode:c}=r;ek([s,a],"avgPool3DGrad");const h=p.computePool3DInfo(a.shape,i,o,u,l,c),d=h.strideDepth,f=h.strideHeight,m=h.strideWidth,g=h.filterDepth,y=h.filterHeight,b=h.filterWidth,x=h.dilationDepth,w=h.dilationHeight,k=h.dilationWidth,v=h.effectiveFilterDepth,I=h.effectiveFilterHeight,N=h.effectiveFilterWidth,S=v-1-h.padInfo.front,C=N-1-h.padInfo.left,T=I-1-h.padInfo.top,$=Ta(a.shape,"float32"),E=1/(g*y*b),A=n.bufferSync(s);for(let p=0;p<h.batchSize;++p)for(let e=0;e<h.inChannels;++e)for(let t=0;t<h.inDepth;++t)for(let n=0;n<h.inHeight;++n)for(let r=0;r<h.inWidth;++r){const s=t-S,a=n-T,i=r-C;let o=0;for(let t=0;t<v;t+=x){const n=(s+t)/d;if(!(n<0||n>=h.outDepth||Math.floor(n)!==n))for(let t=0;t<I;t+=w){const r=(a+t)/f;if(!(r<0||r>=h.outHeight||Math.floor(r)!==r))for(let t=0;t<N;t+=k){const s=(i+t)/m;s<0||s>=h.outWidth||Math.floor(s)!==s||(o+=A.get(p,n,r,s,e))}}}$.set(o*E,p,t,n,r,e)}return n.makeTensorInfo($.shape,$.dtype,$.values)}},mv={kernelName:et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a;ek([s,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=r,c=p.computePool2DInfo(i.shape,o,l,1,u),h=c.strideHeight,d=c.strideWidth,f=c.filterHeight,m=c.filterWidth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterHeight,x=c.effectiveFilterWidth,w=x-1-c.padInfo.left,k=b-1-c.padInfo.top,v=Ta(i.shape,"float32"),I=1/(f*m),N=n.data.get(s.dataId).values,S=Ta(s.shape,"float32",N);for(let p=0;p<c.batchSize;++p)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inHeight;++t)for(let n=0;n<c.inWidth;++n){const r=t-k,s=n-w;let a=0;for(let t=0;t<b;t+=g){const n=(r+t)/h;if(!(n<0||n>=c.outHeight||Math.floor(n)!==n))for(let t=0;t<x;t+=y){const r=(s+t)/d;r<0||r>=c.outWidth||Math.floor(r)!==r||(a+=S.get(p,n,r,e))}}v.set(a*I,p,t,n,e)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},gv={kernelName:Gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,scale:i,offset:o,mean:l,variance:u}=t;r.assert(l.shape.length===u.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),r.assert(null==o||l.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),r.assert(null==i||l.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),ek([a,l,u,i,o],"batchNorm");let{varianceEpsilon:c}=s;null==c&&(c=.001);const h=n.data.get(a.dataId).values,p=n.data.get(l.dataId).values,d=n.data.get(u.dataId).values,f=i?n.data.get(i.dataId).values:new Float32Array([1]),m=o?n.data.get(o.dataId).values:new Float32Array([0]),g=new Float32Array(h.length),y=m.length,b=f.length,x=d.length,w=p.length;let k=0,v=0,I=0,N=0;for(let r=0;r<h.length;++r)g[r]=m[k++]+(h[r]-p[v++])*f[I++]/Math.sqrt(d[N++]+c),k>=y&&(k=0),v>=w&&(v=0),I>=b&&(I=0),N>=x&&(N=0);return n.makeTensorInfo(a.shape,a.dtype,g)}};function yv(e,t,n,s,a){const i=l.isSliceContinous(s,t,n),o=r.sizeFromShape(n),u=r.computeStrides(s);if(i){const n=l.computeFlatOffset(t,u);return"string"===a?e.slice(n,n+o):e.subarray(n,n+o)}const c=Ta(s,a,"string"===a?p.fromUint8ToStringArray(e):e),h=Ta(n,a);for(let r=0;r<h.size;++r){const e=h.indexToLoc(r),n=e.map((e,n)=>e+t[n]);h.set(c.get(...n),...e)}return"string"===a?p.fromStringArrayToUint8(h.values):h.values}function bv(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:i}=r;ek(s,"slice");const[o,u]=l.parseSliceParams(s,a,i);l.assertParamsValid(s,o,u);const c=yv(n.data.get(s.dataId).values,o,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,c)}const xv={kernelName:tr,backendName:"cpu",kernelFunc:bv},wv={kernelName:st,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:i}=r;ek([s],"batchToSpaceND");const o=a.reduce((e,t)=>e*t),l=p.getReshaped(s.shape,a,o),u=p.getPermuted(l.length,a.length),c=p.getReshapedPermuted(s.shape,a,o),h=p.getSliceBeginCoords(i,a.length),d=p.getSliceSize(c,i,a.length),f=Dk({inputs:{x:s},backend:n,attrs:{shape:l}}),m=jk({inputs:{x:f},backend:n,attrs:{perm:u}}),g=Dk({inputs:{x:m},backend:n,attrs:{shape:c}}),y=bv({inputs:{x:g},backend:n,attrs:{begin:h,size:d}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}};function kv(e,t,n,s,a){const i=r.sizeFromShape(s),o=r.makeZerosTypedArray(a,n);for(let r=0;r<e.length;r++){const n=e[r];if(n<0)throw new Error("Input x must be non-negative!");n>=a||(o[n]+=i>0?t[r]:1)}return o}function vv(e,t,n,r=!1){const s=e.shape[0],a=e.shape[1],i=Ta([s,n],t.dtype);for(let o=0;o<s;o++)for(let s=0;s<a;s++){const a=e.get(o,s);if(a<0)throw new Error("Input x must be non-negative!");a>=n||i.set(r?1:t.size>0?i.get(o,a)+t.get(o,s):i.get(o,a)+1,o,a)}return i}const Iv={kernelName:at,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i}=r,o=kv(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}};function Nv(e){return(t,n,s)=>{const a=r.getTypedArrayFromDType(n,t.length);for(let r=0;r<t.length;++r)a[r]=e(t[r],s);return a}}const Sv=Nv(e=>Math.ceil(e)),Cv=sk(ot,Sv),Tv={kernelName:ot,backendName:"cpu",kernelFunc:Cv},$v=rk(lt,(e,t)=>e>t.clipValueMax?t.clipValueMax:e<t.clipValueMin?t.clipValueMin:e),Ev={kernelName:lt,backendName:"cpu",kernelFunc:$v},Av={kernelName:ct,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(r.sizeFromShape(t.shape)),a=n.data.get(t.dataId),i=a.complexTensorInfos.imag,o=n.data.get(a.complexTensorInfos.real.dataId).values,l=n.data.get(i.dataId).values;for(let r=0;r<o.length;r++)s[r]=Math.hypot(o[r],l[r]);return n.makeOutput(s,t.shape,"float32")}};function Rv(e,t,n,s){const a=r.getArrayFromDType(n,r.sizeFromShape(t));if(s&&"string"!==n){let t=0;e.forEach(e=>{const n=r.sizeFromShape(e.shape);a.set(e.vals,t),t+=n})}else{let r=0;e.forEach(e=>{const s="string"===n?p.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+r;for(let t=0;t<e.shape[1];++t)a[o+t]=s[i++]}r+=e.shape[1]})}return a}function Fv(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const Dv={kernelName:Jt,backendName:"cpu",kernelFunc:Fv};function _v(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,i=r.parseAxisParam(a,t[0].shape)[0];let o=p.computeOutShape(t.map(e=>e.shape),i);if(0===r.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const l=t.filter(e=>r.sizeFromShape(e.shape)>0);if(1===l.length)return ok({inputs:{x:l[0]},backend:n});const u=l.map(e=>e.shape);if(p.assertParamsConsistent(u,i),"complex64"===l[0].dtype){const e=l.map(e=>Ik({inputs:{input:e},backend:n})),t=l.map(e=>Fv({inputs:{input:e},backend:n})),r=_v({inputs:e,backend:n,attrs:{axis:i}}),s=_v({inputs:t,backend:n,attrs:{axis:i}}),a=wk({inputs:{real:r,imag:s},backend:n});return e.forEach(e=>n.disposeIntermediateTensorInfo(e)),t.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),a}const c=l.map(e=>{const t=r.sizeFromShape(e.shape.slice(i));return Dk({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),h=c.map(e=>({vals:n.data.get(e.dataId).values,shape:e.shape}));o=p.computeOutShape(c.map(e=>e.shape),1);const d=Rv(h,o,t[0].dtype,1===c[0].shape[0]),f=p.computeOutShape(l.map(e=>e.shape),i),m=n.makeTensorInfo(f,t[0].dtype,d);return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),m}const Ov={kernelName:ht,backendName:"cpu",kernelFunc:_v};function Mv(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:l,dataFormat:u,dilations:c,dimRoundingMode:h}=s;ek([a,i],"conv2d");const d=p.convertConv2DDataFormat(u),f=p.computeConv2DInfo(a.shape,i.shape,o,c,l,h,!1,d),m=f.filterHeight,g=f.filterWidth,y=f.dilationHeight,b=f.dilationWidth,x=f.padInfo.left,w=f.padInfo.top,k="channelsLast"===f.dataFormat,v=new es(f.outShape,a.dtype),I=r.computeStrides(a.shape),N=r.computeStrides(i.shape),S=I[0],C=k?I[1]:I[2],T=k?I[2]:1,$=k?1:I[1],E=v.strides[0],A=k?v.strides[1]:v.strides[2],R=k?v.strides[2]:1,F=k?1:v.strides[1],D=n.data.get(a.dataId).values,_=n.data.get(i.dataId).values,O=v.values;for(let r=0;r<f.batchSize;++r){const e=r*S,t=r*E;for(let n=0;n<f.outHeight;++n){const r=t+n*A,s=n*f.strideHeight-w;for(let t=0;t<m;++t){const n=s+t*y;if(n<0||n>=f.inHeight)continue;const a=t*N[0],i=e+n*C;for(let e=0;e<f.outWidth;++e){const t=r+e*R,n=e*f.strideWidth-x;for(let e=0;e<g;++e){const r=n+e*b;if(r<0||r>=f.inWidth)continue;const s=i+r*T;let o=a+e*N[1];for(let e=0;e<f.inChannels;++e){const n=D[s+e*$];for(let e=0;e<f.outChannels;++e)O[t+e*F]+=n*_[o+e];o+=f.outChannels}}}}}}return n.makeTensorInfo(v.shape,v.dtype,O)}const Lv={kernelName:pt,backendName:"cpu",kernelFunc:Mv},zv={kernelName:dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=r;ek([s,a],"conv2dBackpropFilter");const h=p.convertConv2DDataFormat(l),d=p.computeConv2DInfo(s.shape,c,i,1,o,u,!1,h),{strideHeight:f,strideWidth:m,filterHeight:g,filterWidth:y}=d,b="channelsLast"===d.dataFormat,x=new es(d.filterShape,"float32"),w=d.padInfo.left,k=d.padInfo.top,v=n.data.get(s.dataId).values,I=n.data.get(a.dataId).values,N=new es(s.shape,s.dtype,v),S=new es(a.shape,a.dtype,I);for(let p=0;p<g;++p){const e=Math.max(0,Math.ceil((k-p)/f)),t=Math.min(d.outHeight,(d.inHeight+k-p)/f);for(let n=0;n<y;++n){const r=Math.max(0,Math.ceil((w-n)/m)),s=Math.min(d.outWidth,(d.inWidth+w-n)/m);for(let a=0;a<d.inChannels;++a)for(let i=0;i<d.outChannels;++i){let o=0;for(let l=0;l<d.batchSize;++l)for(let u=e;u<t;++u){const e=p+u*f-k;for(let t=r;t<s;++t){const r=n+t*m-w;o+=b?N.get(l,e,r,a)*S.get(l,u,t,i):N.get(l,a,e,r)*S.get(l,i,u,t)}}x.set(o,p,n,a,i)}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},Pv={kernelName:ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{inputShape:o,strides:l,pad:u,dataFormat:c,dimRoundingMode:h}=s;ek([a,i],"conv2dBackpropInput");const d=r.computeStrides(i.shape),f=r.computeStrides(a.shape);let m=p.convertConv2DDataFormat(c);const g=p.computeConv2DInfo(o,i.shape,l,1,u,h,!1,m),y=new es(g.inShape,"float32"),b=y.values,x=n.data.get(a.dataId).values,w=n.data.get(i.dataId).values,[k,v,I]=d,{batchSize:N,filterHeight:S,filterWidth:C,inChannels:T,inHeight:$,inWidth:E,outChannels:A,outHeight:R,outWidth:F,strideHeight:D,strideWidth:_}=g;m=g.dataFormat;const O=S-1-g.padInfo.top,M=C-1-g.padInfo.left,L="channelsLast"===m,z=y.strides[0],P=L?y.strides[1]:y.strides[2],B=L?y.strides[2]:1,W=L?1:y.strides[1],V=f[0],U=L?f[1]:f[2],G=L?f[2]:1,H=L?1:f[1];for(let r=0;r<N;++r)for(let e=0;e<T;++e)for(let t=0;t<$;++t){const n=t-O,s=Math.max(0,Math.ceil(n/D)),a=Math.min(R,(S+n)/D);for(let i=0;i<E;++i){const o=i-M,l=Math.max(0,Math.ceil(o/_)),u=Math.min(F,(C+o)/_);let c=0;for(let t=s;t<a;++t){const s=t*D-n;for(let n=l;n<u;++n){const a=V*r+U*t+G*n,i=k*(S-1-s)+v*(C-1-(n*_-o))+I*e;for(let e=0;e<A;++e)c+=x[a+H*e]*w[i+e]}}b[z*r+P*t+B*i+W*e]=c}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},Bv={kernelName:mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:l,dilations:u}=s;ek([a,i],"conv3d");const c=p.computeConv3DInfo(a.shape,i.shape,o,u,l),{filterDepth:h,filterHeight:d,filterWidth:f,dilationDepth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=c,x=b.front,w=b.left,k=b.top,v=new es(c.outShape,a.dtype),I=n.data.get(a.dataId).values,N=n.data.get(i.dataId).values,S=v.values,C=r.computeStrides(a.shape),T=r.computeStrides(i.shape);for(let r=0;r<c.batchSize;++r){const e=r*C[0],t=r*v.strides[0];for(let n=0;n<c.outDepth;++n){const r=t+n*v.strides[1],s=n*c.strideDepth-x;for(let t=0;t<h;++t){const n=s+t*m;if(n<0||n>=c.inDepth)continue;const a=t*T[0],i=e+n*C[1];for(let e=0;e<c.outHeight;++e){const t=r+e*v.strides[2],n=e*c.strideHeight-k;for(let e=0;e<d;++e){const r=n+e*g;if(r<0||r>=c.inHeight)continue;const s=a+e*T[1],o=i+r*C[2];for(let e=0;e<c.outWidth;++e){const n=t+e*c.outChannels,r=e*c.strideWidth-w;for(let e=0;e<f;++e){const t=r+e*y;if(t<0||t>=c.inWidth)continue;const a=o+t*c.inChannels;let i=s+e*T[2];for(let e=0;e<c.inChannels;++e){const t=I[a+e];for(let e=0;e<c.outChannels;++e)S[n+e]+=t*N[i+e];i+=c.outChannels}}}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},Wv={kernelName:gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:i}=t,{strides:o,pad:l,filterShape:u}=s;ek([a,i],"conv3dBackpropFilterV2");const c=r.computeStrides(a.shape),h=r.computeStrides(i.shape),d=p.computeConv3DInfo(a.shape,u,o,1,l),f=d.strideDepth,m=d.strideHeight,g=d.strideWidth,y=d.filterDepth,b=d.filterHeight,x=d.filterWidth,w=new es(d.filterShape,"float32"),k=w.values,[v,I,N,S]=w.strides,C=n.data.get(i.dataId).values,[T,$,E,A]=h,R=n.data.get(a.dataId).values,[F,D,_,O]=c,M=d.padInfo.front,L=d.padInfo.left,z=d.padInfo.top;for(let r=0;r<y;++r){const e=Math.max(0,Math.ceil((M-r)/f)),t=Math.min(d.outDepth,(d.inDepth+M-r)/f),n=r*v;for(let s=0;s<b;++s){const a=Math.max(0,Math.ceil((z-s)/m)),i=Math.min(d.outHeight,(d.inHeight+z-s)/m),o=s*I+n;for(let n=0;n<x;++n){const l=Math.max(0,Math.ceil((L-n)/g)),u=Math.min(d.outWidth,(d.inWidth+L-n)/g),c=n*N+o;for(let o=0;o<d.inChannels;++o){const h=o*S+c;for(let c=0;c<d.outChannels;++c){let p=0;for(let h=0;h<d.batchSize;++h){const d=h*F,y=h*T;for(let h=e;h<t;++h){const e=(r+h*f-M)*D+d,t=h*$+y;for(let r=a;r<i;++r){const a=(s+r*m-z)*_+e,i=r*E+t;for(let e=l;e<u;++e)p+=R[(n+e*g-L)*O+a+o]*C[e*A+i+c]}}}k[h+c]=p}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},Vv={kernelName:yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{pad:o,strides:l,inputShape:u}=s;ek([a],"conv3dBackpropInputV2");const c=r.computeStrides(a.shape),h=r.computeStrides(i.shape),d=p.computeConv3DInfo(u,i.shape,l,1,o),f=new es(d.inShape,"float32"),m=f.values,[g,y,b,x]=f.strides,w=n.data.get(a.dataId).values,[k,v,I,N]=c,S=n.data.get(i.dataId).values,[C,T,$,E]=h,{batchSize:A,filterDepth:R,filterHeight:F,filterWidth:D,inChannels:_,inDepth:O,inHeight:M,inWidth:L,outChannels:z,outDepth:P,outHeight:B,outWidth:W,strideDepth:V,strideHeight:U,strideWidth:G}=d,H=R-1-d.padInfo.front,j=F-1-d.padInfo.top,q=D-1-d.padInfo.left;for(let r=0;r<A;++r)for(let e=0;e<_;++e)for(let t=0;t<O;++t){const n=t-H,s=Math.max(0,Math.ceil(n/V)),a=Math.min(P,(R+n)/V);for(let i=0;i<M;++i){const o=i-j,l=Math.max(0,Math.ceil(o/U)),u=Math.min(B,(F+o)/U);for(let c=0;c<L;++c){const h=c-q,p=Math.max(0,Math.ceil(h/G)),d=Math.min(W,(D+h)/G);let f=0;for(let t=s;t<a;++t){const s=t*V-n;for(let n=l;n<u;++n){const a=n*U-o;for(let i=p;i<d;++i){const o=k*r+v*t+I*n+N*i,l=C*(R-1-s)+T*(F-1-a)+$*(D-1-(i*G-h))+E*e;for(let e=0;e<z;++e)f+=w[o+e]*S[l+e]}}}m[g*r+y*t+b*i+x*c+e]=f}}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},Uv=rk(bt,e=>Math.cos(e)),Gv={kernelName:bt,backendName:"cpu",kernelFunc:Uv},Hv=rk(xt,e=>Math.cosh(e)),jv={kernelName:xt,backendName:"cpu",kernelFunc:Hv},qv={kernelName:kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:i,boxInd:o}=t,{cropSize:l,method:u,extrapolationValue:c}=s,[h,p,d,f]=a.shape,m=i.shape[0],[g,y]=l,b=Ta([m,g,y,f],"float32"),x=n.data.get(i.dataId).values,w=n.data.get(o.dataId).values,k=n.data.get(a.dataId).values,v=r.computeStrides(a.shape),I=r.computeStrides(b.shape);for(let r=0;r<m;r++){const e=4*r,t=x[e],n=x[e+1],s=x[e+2],a=x[e+3],i=w[r];if(i>=h)continue;const o=g>1?(s-t)*(p-1)/(g-1):0,l=y>1?(a-n)*(d-1)/(y-1):0;for(let h=0;h<g;h++){const e=g>1?t*(p-1)+h*o:.5*(t+s)*(p-1);if(e<0||e>p-1)for(let t=0;t<y;t++)for(let e=0;e<f;e++)b.values[e+t*I[2]+h*I[1]+r*I[0]]=c;else if("bilinear"===u){const t=Math.floor(e),s=Math.ceil(e),o=e-t;for(let e=0;e<y;e++){const u=y>1?n*(d-1)+e*l:.5*(n+a)*(d-1);if(u<0||u>d-1){for(let t=0;t<f;t++)b.values[t+e*I[2]+h*I[1]+r*I[0]]=c;continue}const p=Math.floor(u),m=Math.ceil(u),g=u-p;for(let n=0;n<f;n++){let a=n+p*v[2]+t*v[1]+i*v[0];const l=k[a];a=n+m*v[2]+t*v[1]+i*v[0];const u=k[a];a=n+p*v[2]+s*v[1]+i*v[0];const c=k[a];a=n+m*v[2]+s*v[1]+i*v[0];const d=k[a],f=l+(u-l)*g;a=n+e*I[2]+h*I[1]+r*I[0],b.values[a]=f+(c+(d-c)*g-f)*o}}}else for(let t=0;t<y;++t){const s=y>1?n*(d-1)+t*l:.5*(n+a)*(d-1);if(s<0||s>d-1){for(let e=0;e<f;e++)b.values[e+t*I[2]+h*I[1]+r*I[0]]=c;continue}const o=Math.round(s),u=Math.round(e);for(let e=0;e<f;e++)b.values[e+t*I[2]+h*I[1]+r*I[0]]=k[e+o*v[2]+u*v[1]+i*v[0]]}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},Kv={kernelName:wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,exclusive:o,reverse:l}=s;ek(a,"cumsum");const u=p.getAxesPermutation([i],a.shape.length);let c=a;null!=u&&(c=jk({inputs:{x:a},backend:n,attrs:{perm:u}}));const h=p.getInnerMostAxes(1,a.shape.length)[0];if(h!==c.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${c.shape.length-1} but got axis=${h}`);const d=ps(c.dtype,"int32"),f=r.makeZerosTypedArray(r.sizeFromShape(c.shape),d),m=n.data.get(c.dataId).values,g=c.shape[c.shape.length-1],y=l?(e,t)=>e+g-t-1:(e,t)=>e+t;for(let r=0;r<m.length;r+=g)for(let e=0;e<g;e++){const t=y(r,e);if(0===e)f[t]=o?0:m[t];else{const n=y(r,e-1);f[t]=o?m[n]+f[n]:m[t]+f[n]}}const b=n.makeTensorInfo(c.shape,d,f);if(null!=u){const e=jk({inputs:{x:b},backend:n,attrs:{perm:p.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(c),e}return b}},Xv={kernelName:vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i,binaryOutput:o}=r;if(1===s.shape.length){const e=kv(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===s.shape.length){const e=vv(n.bufferSync(s),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+s.shape.length+".")}},Yv={kernelName:It,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:i,dataFormat:o}=s;r.assert("NHWC"===o,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+o),r.assert(i>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+i);const l=a.shape[0],u=a.shape[1],c=a.shape[2],h=a.shape[3],p=u*i,d=c*i,f=h/(i*i),m=n.data.get(a.dataId).values,g=new Float32Array(l*p*d*f);let y=0;for(let r=0;r<l;++r)for(let e=0;e<p;++e){const t=Math.floor(e/i),n=e%i;for(let e=0;e<d;++e){const s=Math.floor(e/i),a=(n*i+e%i)*f;for(let e=0;e<f;++e)g[y++]=m[e+a+h*(s+c*(t+u*r))]}}return n.makeTensorInfo([l,p,d,f],a.dtype,g)}};function Jv(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:l,dilations:u,dimRoundingMode:c}=s;ek([a,i],"depthwiseConv2DNative");const h=r.computeStrides(a.shape),d=r.computeStrides(i.shape);let f=u;null==f&&(f=[1,1]),r.assert(p.eitherStridesOrDilationsAreOne(o,f),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${f}'`);const m=p.computeConv2DInfo(a.shape,i.shape,o,f,l,c,!0),{filterHeight:g,filterWidth:y,dilationHeight:b,dilationWidth:x,padInfo:w}=m,k=w.left,v=w.top,I=m.outChannels/m.inChannels,N=new es(m.outShape,a.dtype),S=n.data.get(a.dataId).values,C=n.data.get(i.dataId).values,T=N.values;for(let r=0;r<m.batchSize;++r){const e=r*h[0],t=r*N.strides[0];for(let n=0;n<m.outHeight;++n){const r=t+n*N.strides[1],s=n*m.strideHeight-k;for(let t=0;t<g;++t){const n=s+t*b;if(n<0||n>=m.inHeight)continue;const a=t*d[0],i=e+n*h[1];for(let e=0;e<m.outWidth;++e){const t=r+e*N.strides[2],n=e*m.strideWidth-v;for(let e=0;e<y;++e){const r=n+e*x;if(r<0||r>=m.inWidth)continue;const s=i+r*m.inChannels;let o=t,l=a+e*d[1];for(let e=0;e<m.inChannels;++e){const t=S[s+e];for(let e=0;e<I;++e)T[o+e]+=t*C[l+e];o+=I,l+=I}}}}}}return n.makeTensorInfo(N.shape,N.dtype,N.values)}const Zv={kernelName:Nt,backendName:"cpu",kernelFunc:Jv},Qv={kernelName:St,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=r;ek([s,a],"depthwiseConv2dNativeBackpropFilter");const h=p.computeConv2DInfo(s.shape,c,i,o,l,u,!0),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=h,y=new es(h.filterShape,"float32"),b=h.padInfo.left,x=h.padInfo.top,w=h.outChannels/h.inChannels,k=n.data.get(s.dataId).values,v=new es(s.shape,s.dtype,k),I=n.data.get(a.dataId).values,N=new es(a.shape,a.dtype,I);for(let p=0;p<m;++p){const e=Math.max(0,Math.ceil((x-p)/d)),t=Math.min(h.outHeight,(h.inHeight+x-p)/d);for(let n=0;n<g;++n){const r=Math.max(0,Math.ceil((b-n)/f)),s=Math.min(h.outWidth,(h.inWidth+b-n)/f);for(let a=0;a<h.outChannels;++a){const i=Math.trunc(a/w),o=a%w;let l=0;for(let u=0;u<h.batchSize;++u)for(let o=e;o<t;++o){const e=p+o*d-x;for(let t=r;t<s;++t)l+=v.get(u,e,n+t*f-b,i)*N.get(u,o,t,a)}y.set(l,p,n,i,o)}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},eI={kernelName:Ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:i}=t,{strides:o,dilations:l,pad:u,dimRoundingMode:c,inputShape:h}=s;ek([a,i],"depthwiseConv2DNativeBackpropInput");const d=r.computeStrides(a.shape),f=r.computeStrides(i.shape),m=p.computeConv2DInfo(h,i.shape,o,l,u,c,!0),g=new es(m.inShape,"float32"),y=g.values,[b,x,w]=g.strides,k=n.data.get(a.dataId).values,[v,I,N]=d,S=n.data.get(i.dataId).values,[C,T,$]=f,{batchSize:E,filterHeight:A,filterWidth:R,inChannels:F,inHeight:D,inWidth:_,outChannels:O,outHeight:M,outWidth:L,strideHeight:z,strideWidth:P}=m,B=A-1-m.padInfo.top,W=R-1-m.padInfo.left,V=O/F;for(let r=0;r<E;++r)for(let e=0;e<F;++e)for(let t=0;t<D;++t){const n=t-B,s=Math.max(0,Math.ceil(n/z)),a=Math.min(M,(A+n)/z);for(let i=0;i<_;++i){const o=i-W,l=Math.max(0,Math.ceil(o/P)),u=Math.min(L,(R+o)/P);let c=0;for(let t=s;t<a;++t){const s=t*z-n;for(let n=l;n<u;++n){const a=v*r+I*t+N*n,i=C*(A-1-s)+T*(R-1-(n*P-o))+$*e;for(let t=0;t<V;++t)c+=k[a+(e*V+t)]*S[i+t]}}y[b*r+x*t+w*i+e]=c}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},tI={kernelName:Tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=r.sizeFromShape(s.shape),i=n.data.get(s.dataId).values,o=Ta([a,a],s.dtype),l=o.values;for(let r=0;r<i.length;r++)l[r*a+r]=i[r];const u=[...s.shape,...s.shape];return n.makeTensorInfo(u,o.dtype,o.values)}},nI={kernelName:$t,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=u.data.get(s.dataId).values,h=s.shape.length,d=u.data.get(a.dataId).values,f=a.shape.length,{batchSize:m,inHeight:g,inWidth:y,inChannels:b,outHeight:x,outWidth:w,padInfo:k,strideHeight:v,strideWidth:I,filterHeight:N,filterWidth:S,dilationHeight:C,dilationWidth:T,outShape:$}=p.computeDilation2DInfo(s.shape,a.shape,i,o,"NHWC",l),E=r.sizeFromShape($),A=$.length,R=r.getArrayFromDType(s.dtype,E);for(let p=0;p<m;++p)for(let e=0;e<x;++e){const t=e*v-k.top;for(let n=0;n<w;++n){const i=n*I-k.left;for(let o=0;o<b;++o){let l=Number.MIN_SAFE_INTEGER;for(let e=0;e<N;++e){const n=t+e*C;if(n>=0&&n<g)for(let t=0;t<S;++t){const u=i+t*T;if(u>=0&&u<y){const i=r.locToIndex([p,n,u,o],h,r.computeStrides(s.shape)),m=r.locToIndex([e,t,o],f,r.computeStrides(a.shape)),g=c[i]+d[m];g>l&&(l=g)}}}R[r.locToIndex([p,e,n,o],A,r.computeStrides($))]=l}}}return{dataId:u.write(r.toTypedArray(R,s.dtype),$,s.dtype),shape:$,dtype:s.dtype}}},rI={kernelName:At,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:i}=e,{strides:o,pad:l,dilations:u}=n,c=t,h=r.toNestedArray(s.shape,c.data.get(s.dataId).values),d=r.toNestedArray(a.shape,c.data.get(a.dataId).values),{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:k,strideWidth:v,filterHeight:I,filterWidth:N,dilationHeight:S,dilationWidth:C,outShape:T}=p.computeDilation2DInfo(s.shape,a.shape,o,l,"NHWC",u);r.assert(i.rank===T.length,()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${T.length}, but got `+i.rank);const $=r.toNestedArray(T,c.data.get(i.dataId).values),E=r.makeZerosNestedTypedArray(a.shape,a.dtype);for(let r=0;r<f;++r)for(let e=0;e<b;++e){const t=e*k-w.top;for(let n=0;n<x;++n){const s=n*v-w.left;for(let a=0;a<y;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let e=0;e<I;++e){const n=t+e*S;if(n>=0&&n<m)for(let t=0;t<N;++t){const u=s+t*C;if(u>=0&&u<g){const s=h[r][n][u][a]+d[e][t][a];s>i&&(i=s,o=e,l=t)}}}E[o][l][a]+=$[r][e][n][a]}}}return{dataId:c.write(r.toTypedArray(E,s.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},sI={kernelName:Et,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:i}=e,{strides:o,pad:l,dilations:u}=n,c=t,h=r.toNestedArray(s.shape,c.data.get(s.dataId).values),d=r.toNestedArray(a.shape,c.data.get(a.dataId).values),{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:k,strideWidth:v,filterHeight:I,filterWidth:N,dilationHeight:S,dilationWidth:C,outShape:T}=p.computeDilation2DInfo(s.shape,a.shape,o,l,"NHWC",u);r.assert(i.rank===T.length,()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${T.length}, but got `+i.rank);const $=r.toNestedArray(T,c.data.get(i.dataId).values),E=r.makeZerosNestedTypedArray(s.shape,s.dtype);for(let r=0;r<f;++r)for(let e=0;e<b;++e){const t=e*k-w.top;for(let n=0;n<x;++n){const s=n*v-w.left;for(let a=0;a<y;++a){let i=Number.MIN_SAFE_INTEGER,o=t<0?0:t,l=s<0?0:s;for(let e=0;e<I;++e){const n=t+e*S;if(n>=0&&n<m)for(let t=0;t<N;++t){const u=s+t*C;if(u>=0&&u<g){const s=h[r][n][u][a]+d[e][t][a];s>i&&(i=s,o=n,l=u)}}}E[r][o][l][a]+=$[r][e][n][a]}}}return{dataId:c.write(r.toTypedArray(E,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},aI={kernelName:Dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:a}=t;ek([s,a],"eluGrad");const i=new Float32Array(r.sizeFromShape(a.shape)),o=n.data.get(a.dataId).values,l=n.data.get(s.dataId).values;for(let r=0;r<o.length;++r){const e=o[r];i[r]=e>=1?l[r]:l[r]*(e+1)}return n.makeTensorInfo(a.shape,"float32",i)}},iI=hk((e,t)=>e===t?1:0),oI=Tk(Ot,iI,null,"bool"),lI={kernelName:Ot,backendName:"cpu",kernelFunc:oI},uI=p.ERF_P,cI=p.ERF_A1,hI=p.ERF_A2,pI=p.ERF_A3,dI=p.ERF_A4,fI=p.ERF_A5,mI=rk(_t,e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+uI*n);return t*(1-((((fI*r+dI)*r+pI)*r+hI)*r+cI)*r*Math.exp(-n*n))}),gI={kernelName:_t,backendName:"cpu",kernelFunc:mI},yI=Nv(e=>Math.exp(e)),bI=sk(Mt,yI),xI={kernelName:Mt,backendName:"cpu",kernelFunc:bI};function wI(e){const{inputs:t,backend:n,attrs:s}=e,{input:a}=t,{dim:i}=s,o=a.shape.length,l=a.shape.slice();let u=i;return i<0&&(r.assert(-(o+1)<=i,()=>`Axis must be in the interval [${-(o+1)}, ${o}]`),u=o+i+1),l.splice(u,0,1),Dk({inputs:{x:a},backend:n,attrs:{shape:l}})}const kI={kernelName:Lt,backendName:"cpu",kernelFunc:wI},vI=Nv(e=>Math.expm1(e)),II=sk(zt,vI),NI={kernelName:zt,backendName:"cpu",kernelFunc:II},SI=hk((e,t)=>e*t),CI=$k((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n})),TI=Tk(Cn,SI,CI),$I={kernelName:Cn,backendName:"cpu",kernelFunc:TI},EI=hk((e,t)=>e/t),AI=Tk(Rt,EI),RI={kernelName:Rt,backendName:"cpu",kernelFunc:AI},FI=hk((e,t)=>e-t),DI=$k((e,t,n,r)=>({real:e-n,imag:t-r})),_I=Tk(fr,FI,DI),OI={kernelName:fr,backendName:"cpu",kernelFunc:_I};function MI(e,t,n){const s=e.shape,a=s[0],i=s[1],o=n.data.get(e.dataId),l=o.complexTensorInfos.real,u=o.complexTensorInfos.imag,c=[a,i],h=r.sizeFromShape(c),d=r.getTypedArrayFromDType("float32",h),f=r.getTypedArrayFromDType("float32",h);for(let r=0;r<a;r++){const e=bv({inputs:{x:l},backend:n,attrs:{begin:[r,0],size:[1,i]}}),s=bv({inputs:{x:u},backend:n,attrs:{begin:[r,0],size:[1,i]}}),a=wk({inputs:{real:e,imag:s},backend:n}),{real:o,imag:c}=LI(a,t,n),h=p.mergeRealAndImagArrays(o,c);for(let t=0;t<i;t++){const e=p.getComplexWithIndex(h,t);d[r*i+t]=e.real,f[r*i+t]=e.imag}n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a)}const m=n.makeTensorInfo(c,"float32",d),g=n.makeTensorInfo(c,"float32",f),y=wk({inputs:{real:m,imag:g},backend:n});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}function LI(e,t,n){const s=r.sizeFromShape(e.shape),a=n.data.get(e.dataId),i=n.data.get(a.complexTensorInfos.real.dataId).values,o=n.data.get(a.complexTensorInfos.imag.dataId).values;if(0==((l=s)&l-1)){const a=zI(i,o,s,t,n),l=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(l,"float32",a.real),t=n.makeTensorInfo(l,"float32",a.imag),i=n.makeTensorInfo([],"float32",r.createScalarValue(s,"float32")),o=ok({inputs:{x:i},backend:n}),u=RI.kernelFunc({inputs:{a:e,b:i},backend:n}),c=RI.kernelFunc({inputs:{a:t,b:o},backend:n}),h=n.data.get(u.dataId).values,p=n.data.get(c.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),{real:h,imag:p}}return a}{const e=function(e,t,n){const r=new Float32Array(2*t);for(let s=0;s<t;s++){let a=0,i=0;for(let r=0;r<t;r++){const o=p.exponent(s*r,t,n),l=p.getComplexWithIndex(e,r);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),p.assignToTypedArray(r,a,i,s)}return r}(p.mergeRealAndImagArrays(i,o),s,t);return p.splitRealAndImagArrays(e)}var l}function zI(e,t,n,r,s){if(1===n)return{real:e,imag:t};const a=p.mergeRealAndImagArrays(e,t),i=n/2,o=p.complexWithEvenIndex(a),l=o.real,u=o.imag,c=[l.length],h=s.makeTensorInfo(c,"float32",l),d=s.makeTensorInfo(c,"float32",u),f=wk({inputs:{real:h,imag:d},backend:s}),m=p.complexWithOddIndex(a),g=m.real,y=m.imag,b=[g.length],x=s.makeTensorInfo(b,"float32",g),w=s.makeTensorInfo(b,"float32",y),k=wk({inputs:{real:x,imag:w},backend:s}),v=zI(l,u,i,r,s),I=v.real,N=v.imag,S=[I.length],C=s.makeTensorInfo(S,"float32",I),T=s.makeTensorInfo(S,"float32",N),$=wk({inputs:{real:C,imag:T},backend:s}),E=zI(g,y,i,r,s),A=E.real,R=E.imag,F=[A.length],D=s.makeTensorInfo(F,"float32",A),_=s.makeTensorInfo(F,"float32",R),O=wk({inputs:{real:D,imag:_},backend:s}),M=p.exponents(n,r),L=[M.real.length],z=s.makeTensorInfo(L,"float32",M.real),P=s.makeTensorInfo(L,"float32",M.imag),B=wk({inputs:{real:z,imag:P},backend:s}),W=TI({inputs:{a:B,b:O},backend:s}),V=Rk({inputs:{a:$,b:W},backend:s}),U=_I({inputs:{a:$,b:W},backend:s}),G=Ik({inputs:{input:V},backend:s}),H=Ik({inputs:{input:U},backend:s}),j=Fv({inputs:{input:V},backend:s}),q=Fv({inputs:{input:U},backend:s}),K=_v({inputs:[G,H],backend:s,attrs:{axis:0}}),X=_v({inputs:[j,q],backend:s,attrs:{axis:0}}),Y=s.data.get(K.dataId).values,J=s.data.get(X.dataId).values;return s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(f),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo(k),s.disposeIntermediateTensorInfo(C),s.disposeIntermediateTensorInfo(T),s.disposeIntermediateTensorInfo($),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(O),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(K),s.disposeIntermediateTensorInfo(X),{real:Y,imag:J}}const PI={kernelName:Pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=r.sizeFromShape(s.shape),i=s.shape[s.shape.length-1],o=Dk({inputs:{x:s},backend:n,attrs:{shape:[a/i,i]}}),l=MI(o,!1,n),u=Dk({inputs:{x:l},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}};function BI(e){const{backend:t,attrs:n}=e,{shape:s,value:a,dtype:i}=n,o=i||r.inferDtype(a),l=r.getArrayFromDType(o,r.sizeFromShape(s));return function(e,t,n){e.fill(t)}(l,a),t.makeTensorInfo(s,o,l)}const WI={kernelName:Bt,backendName:"cpu",kernelFunc:BI},VI={kernelName:Wt,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,a=r.getTypedArrayFromDType(n.dtype,r.sizeFromShape(n.shape)),[i,o,l,u]=n.shape,c=s.data.get(n.dataId).values;for(let r=0;r<i;r++){const e=r*l*o*u;for(let t=0;t<o;t++){const n=t*(l*u);for(let r=0;r<l;r++){const s=r*u;for(let o=0;o<u;o++){const h=Math.round(l-[i,t,r,o][2]),p=e+n+s+o;let d=c[p];h>=0&&h<l&&(d=c[e+n+h*u+o]),a[p]=d}}}}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},UI=Nv(e=>Math.floor(e)),GI=sk(Vt,UI),HI={kernelName:Vt,backendName:"cpu",kernelFunc:GI},jI=hk((e,t)=>Math.floor(e/t)),qI=Tk(Ut,jI,null,"int32"),KI={kernelName:Ut,backendName:"cpu",kernelFunc:qI},XI={kernelName:Ar,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=r;let m=Mv({inputs:{x:s,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=Rk({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=xk(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}},YI={kernelName:Rr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=r;let m=Jv({inputs:{x:s,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=Rk({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=xk(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}},JI={kernelName:jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,i=r.sizeFromShape(s.shape),o=a.shape,l=o[o.length-1],[u,c,h,d]=p.prepareAndValidate(s,a);if(0===c)return n.makeTensorInfo(u,s.dtype,[]);const f=Ta([c,h],s.dtype),m=n.data.get(a.dataId).values,g=n.data.get(s.dataId).values;for(let r=0;r<c;r++){const e=[];let t=0;for(let n=0;n<l;n++){const s=m[r*l+n];t+=s*d[n],e.push(s)}if(t<0||t>=i/h)throw new Error(`Invalid indices: ${e} does not index into ${s.shape}`);for(let n=0;n<h;n++)f.values[r*h+n]=g[t*h+n]}return n.makeTensorInfo(u,f.dtype,f.values)}};function ZI(e,t,n){const r=Ta(n,e.dtype);for(let s=0;s<r.size;++s){const n=r.indexToLoc(s).slice(),a=t.locToIndex([n[0],n[2]]);n[2]=t.values[a];const i=e.locToIndex(n);r.values[s]=e.values[i]}return r}const QI={kernelName:Ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:i}=t,{axis:o,batchDims:l}=s;ek([a,i],"gatherV2");let u=l;null==l&&(u=0);const c=r.sizeFromShape(i.shape),h=r.parseAxisParam(o,a.shape)[0],d=p.segment_util.collectGatherOpShapeInfo(a,i,h,u),f=Dk({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=Dk({inputs:{x:i},backend:n,attrs:{shape:[d.batchSize,c/d.batchSize]}}),g=[d.batchSize,d.outerSize,c/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=ZI(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},eN=hk((e,t)=>e>t?1:0),tN=Tk(qt,eN,null,"bool"),nN={kernelName:qt,backendName:"cpu",kernelFunc:tN},rN=hk((e,t)=>e>=t?1:0),sN=Tk(Kt,rN,null,"bool"),aN={kernelName:Kt,backendName:"cpu",kernelFunc:sN},iN={kernelName:Yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=r.sizeFromShape(s.shape),i=s.shape[s.shape.length-1],o=Dk({inputs:{x:s},backend:n,attrs:{shape:[a/i,i]}}),l=MI(o,!0,n),u=Dk({inputs:{x:l},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}},oN=rk(Zt,e=>Number.isFinite(e)?1:0,"bool"),lN={kernelName:Zt,backendName:"cpu",kernelFunc:oN},uN=rk(Qt,e=>Math.abs(e)===1/0?1:0,"bool"),cN={kernelName:Qt,backendName:"cpu",kernelFunc:uN},hN=rk(en,e=>Number.isNaN(e)?1:0,"bool"),pN={kernelName:en,backendName:"cpu",kernelFunc:hN},dN=hk((e,t)=>e<t?1:0),fN=Tk(nn,dN,null,"bool"),mN={kernelName:nn,backendName:"cpu",kernelFunc:fN},gN=hk((e,t)=>e<=t?1:0),yN=Tk(rn,gN,null,"bool"),bN={kernelName:rn,backendName:"cpu",kernelFunc:yN};function xN(e,t,n){const s=(t-e)/(n-1),a=r.makeZerosTypedArray(n,"float32");a[0]=e;for(let r=1;r<a.length;r++)a[r]=a[r-1]+s;return a}const wN={kernelName:sn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,i=xN(r,s,a);return t.makeTensorInfo([i.length],"float32",i)}},kN=Nv(e=>Math.log(e)),vN=sk(an,kN),IN={kernelName:an,backendName:"cpu",kernelFunc:vN},NN=rk(on,e=>Math.log1p(e)),SN={kernelName:on,backendName:"cpu",kernelFunc:NN},CN=hk((e,t)=>e&&t),TN=Tk(ln,CN,null,"bool"),$N={kernelName:ln,backendName:"cpu",kernelFunc:TN},EN=rk(un,e=>e?0:1,"bool"),AN={kernelName:un,backendName:"cpu",kernelFunc:EN},RN=hk((e,t)=>e||t),FN=Tk(cn,RN,null,"bool"),DN={kernelName:cn,backendName:"cpu",kernelFunc:FN},_N={kernelName:hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:i,bias:o,alpha:l,beta:u}=s;ek(a,"LRN");const c=a.shape[3],h=c-1,p=n.data.get(a.dataId).values,d=r.sizeFromShape(a.shape),f=new Float32Array(d);function m(e){const t=e%c;let n=e-t+Math.max(0,t-i);const r=e-t+Math.min(t+i,h);let s=0;for(;n<=r;n++){const e=p[n];s+=e*e}return s}for(let r=0;r<d;r++){const e=m(r),t=p[r]*Math.pow(o+l*e,-u);f[r]=t}return n.makeTensorInfo(a.shape,a.dtype,f)}},ON={kernelName:pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,y:i,dy:o}=t,{depthRadius:l,bias:u,alpha:c,beta:h}=s;ek(o,"LRNGrad");const p=r.sizeFromShape(o.shape),d=o.shape[3],f=n.data.get(o.dataId).values,m=n.data.get(a.dataId).values,g=n.data.get(i.dataId).values,y=new Float32Array(p),b=p;for(let r=0;r<b;r++){const e=r%d,t=r-e+Math.max(0,e-l),n=r-e+Math.min(d,e+l+1);let s=0;for(let r=t;r<n;r++)s+=Math.pow(m[r],2);s=c*s+u;for(let a=t;a<n;a++){let e=-2*c*h*m[a]*g[r]/s;r===a&&(e+=Math.pow(s,-h)),e*=f[r],y[a]+=e}}return n.makeTensorInfo(o.shape,a.dtype,y)}};function MN(e,t,n,s){const a=r.getTypedArrayFromDType(s,r.sizeFromShape(n));for(let r=0;r<a.length;++r){const n=r*t;let s=e[n];for(let r=0;r<t;++r){const t=e[n+r];t>s&&(s=t)}a[r]=s}return a}function LN(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:i,keepDims:o}=s,l=n;let u=a.shape;const c=u.length,h=r.parseAxisParam(i,u);let d=h;const f=p.getAxesPermutation(d,c);let m=l.data.get(a.dataId).values;if(null!=f){const e=new Array(c);for(let t=0;t<e.length;t++)e[t]=u[f[t]];m=Hk(m,u,a.dtype,f,e),d=p.getInnerMostAxes(d.length,c),u=e}ek(a,"max"),p.assertAxesAreInnerMostDims("max",d,c);const[g,y]=p.computeOutAndReduceShapes(u,d),b=MN(m,r.sizeFromShape(y),g,a.dtype),x=l.write(b,g,a.dtype);let w=g;return o&&(w=p.expandShapeToKeepDim(g,h)),{dataId:x,shape:w,dtype:a.dtype}}const zN={kernelName:dn,backendName:"cpu",kernelFunc:LN},PN=hk((e,t)=>Math.max(e,t)),BN=Tk(fn,PN),WN={kernelName:fn,backendName:"cpu",kernelFunc:BN},VN={kernelName:mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;ek(a,"maxPool");const{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;r.assert(p.eitherStridesOrDilationsAreOne(o,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=p.computePool2DInfo(a.shape,i,o,1,l,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&r.arraysEqual(c.inShape,c.outShape))h=ok({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=r.computeStrides(a.shape),s=uv(e,0,a.dtype,t,c,"max");h=n.makeTensorInfo(c.outShape,a.dtype,s.values)}return h}},UN={kernelName:yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u,dataFormat:c,dilations:h}=s;ek(a,"maxPool3d");let d=h;null==d&&(d=[1,1,1]);const f=p.computePool3DInfo(a.shape,i,o,d,l,u,c),m=hv(n.data.get(a.dataId).values,0,a.dtype,r.computeStrides(a.shape),f,"max");return n.makeTensorInfo(m.shape,"float32",m.values)}},GN={kernelName:bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:i,strides:o,pad:l,dilations:u,dimRoundingMode:c}=r;ek([s,a],"maxPool3DGrad");const h=p.computePool3DInfo(a.shape,i,o,u,l,c),d=function(e,t){const n=Ta(t.outShape,"int32"),r=t.strideDepth,s=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*r-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,u+b);for(let r=0;r<t.outHeight;++r){const u=r*s-d;let p=u;for(;p<0;)p+=o;const k=Math.min(t.inHeight,c+u);for(let s=0;s<t.outWidth;++s){const d=s*a-f;let v=d;for(;v<0;)v+=l;const I=Math.min(t.inWidth,h+d);let N=Number.NEGATIVE_INFINITY,S=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let r=p;r<k;r+=o){const s=r-u;for(let a=v;a<I;a+=l){const i=a-d,o=e.get(m,t,r,a,g);o>=N&&(N=o,S=n*c*h+s*c+i)}}}n.set(S,m,y,r,s,g)}}}return n}(n.bufferSync(a),h),f=h.strideDepth,m=h.strideHeight,g=h.strideWidth,y=h.dilationDepth,b=h.dilationHeight,x=h.dilationWidth,w=h.effectiveFilterDepth,k=h.effectiveFilterHeight,v=h.effectiveFilterWidth,I=w-1-h.padInfo.front,N=v-1-h.padInfo.left,S=k-1-h.padInfo.top,C=Ta(a.shape,"float32"),T=n.bufferSync(s);for(let p=0;p<h.batchSize;++p)for(let e=0;e<h.inChannels;++e)for(let t=0;t<h.inDepth;++t)for(let n=0;n<h.inHeight;++n)for(let r=0;r<h.inWidth;++r){const s=t-I,a=n-S,i=r-N;let o=0;for(let t=0;t<w;t+=y){const n=(s+t)/f;if(!(n<0||n>=h.outDepth||Math.floor(n)!==n))for(let r=0;r<k;r+=b){const s=(a+r)/m;if(!(s<0||s>=h.outHeight||Math.floor(s)!==s))for(let a=0;a<v;a+=x){const l=(i+a)/g;if(l<0||l>=h.outWidth||Math.floor(l)!==l)continue;const u=w*k*v-1-d.get(p,n,s,l,e)===t*k*v+r*v+a?1:0;0!==u&&(o+=T.get(p,n,s,l,e)*u)}}}C.set(o,p,t,n,r,e)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}},HN={kernelName:gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:i}=t,o=a;ek([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=r,d=p.computePool2DInfo(o.shape,l,u,1,c,h),f=n.data.get(o.dataId).values,m=Ta(d.outShape,o.dtype,cv(f,o.shape,o.dtype,d).values),g=d.strideHeight,y=d.strideWidth,b=d.dilationHeight,x=d.dilationWidth,w=d.effectiveFilterHeight,k=d.effectiveFilterWidth,v=k-1-d.padInfo.left,I=w-1-d.padInfo.top,N=Ta(o.shape,"float32"),S=n.data.get(s.dataId).values,C=Ta(s.shape,"float32",S);for(let p=0;p<d.batchSize;++p)for(let e=0;e<d.inChannels;++e)for(let t=0;t<d.inHeight;++t)for(let n=0;n<d.inWidth;++n){const r=t-I,s=n-v;let a=0;for(let t=0;t<w;t+=b){const n=(r+t)/g;if(!(n<0||n>=d.outHeight||Math.floor(n)!==n))for(let r=0;r<k;r+=x){const i=(s+r)/y;if(i<0||i>=d.outWidth||Math.floor(i)!==i)continue;const o=w*k-1-m.get(p,n,i,e)===t*k+r?1:0;0!==o&&(a+=C.get(p,n,i,e)*o)}}N.set(a,p,t,n,e)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},jN={kernelName:xn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:i,pad:o,includeBatchInIndex:l}=t,u=n;ek(s,"MaxPoolWithArgmax");const c=u.data.get(s.dataId).values,h=p.computePool2DInfo(s.shape,a,i,[1,1],o),[d,f]=function(e,t,n,s,a){const i=uv(e,0,n,r.computeStrides(t),a,"max"),o=cv(e,t,n,a,!0,s);return[i.values,o.values]}(c,s.shape,s.dtype,l,h),m=u.write(d,h.outShape,s.dtype),g=u.write(f,h.outShape,s.dtype);return[{dataId:m,shape:h.outShape,dtype:s.dtype},{dataId:g,shape:h.outShape,dtype:"int32"}]}};function qN(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;let l;ek(a,"sum"),l="bool"===a.dtype?Sk({inputs:{x:a},backend:n,attrs:{dtype:"int32"}}):ok({inputs:{x:a},backend:n});const u=l.shape.length,c=r.parseAxisParam(i,l.shape),h=p.getAxesPermutation(c,u);let d=c,f=l;null!=h&&(f=jk({inputs:{x:l},backend:n,attrs:{perm:h}}),d=p.getInnerMostAxes(d.length,u)),p.assertAxesAreInnerMostDims("sum",d,f.shape.length);const[m,g]=p.computeOutAndReduceShapes(f.shape,d);let y=vk(n,m,p.upcastType(f.dtype,"int32"));const b=r.sizeFromShape(g),x=n.data.get(y.dataId).values,w=n.data.get(f.dataId).values;for(let r=0;r<x.length;++r){const e=r*b;let t=0;for(let n=0;n<b;++n)t+=w[e+n];x[r]=t}if(o){const e=y;y=Dk({inputs:{x:y},backend:n,attrs:{shape:p.expandShapeToKeepDim(y.shape,c)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(l),null!=h&&n.disposeIntermediateTensorInfo(f),y}const KN={kernelName:lr,backendName:"cpu",kernelFunc:qN},XN={kernelName:wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,l=r.parseAxisParam(i,a.shape),u=p.computeOutAndReduceShapes(a.shape,l),c=r.sizeFromShape(u[1]),h=[],d=n.makeTensorInfo([],"float32",new Float32Array([c]));h.push(d);const f=Sk({inputs:{x:a},backend:n,attrs:{dtype:"float32"}});h.push(f);const m=AI({inputs:{a:f,b:d},backend:n});h.push(m);const g=qN({inputs:{x:m},backend:n,attrs:{axis:i,keepDims:o}});return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),g}},YN={kernelName:kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;ek(a,"min");const l=r.parseAxisParam(i,a.shape);let u=l;const c=p.getAxesPermutation(u,a.shape.length);let h=a;null!=c&&(h=jk({inputs:{x:a},backend:n,attrs:{perm:c}}),u=p.getInnerMostAxes(u.length,a.shape.length)),p.assertAxesAreInnerMostDims("min",u,h.shape.length);const[d,f]=p.computeOutAndReduceShapes(h.shape,u),m=r.sizeFromShape(f),g=r.makeZerosTypedArray(r.sizeFromShape(d),h.dtype),y=n.data.get(h.dataId).values;for(let r=0;r<g.length;++r){const e=r*m;let t=y[e];for(let n=0;n<m;++n){const r=y[e+n];r<t&&(t=r)}g[r]=t}null!=c&&n.disposeIntermediateTensorInfo(h);const b=n.makeTensorInfo(d,h.dtype,g);if(o){const e=Dk({inputs:{x:b},backend:n,attrs:{shape:p.expandShapeToKeepDim(d,l)}});return n.disposeIntermediateTensorInfo(b),e}return b}},JN=hk((e,t)=>Math.min(e,t)),ZN=Tk(vn,JN),QN={kernelName:vn,backendName:"cpu",kernelFunc:ZN},eS={kernelName:In,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:i,mode:o}=s;ek(a,"mirrorPad");const l=i.map((e,t)=>e[0]+a.shape[t]+e[1]),u=i.map(e=>e[0]),c=i.map((e,t)=>e[0]+a.shape[t]),h="reflect"===o?0:1,p=n.data.get(a.dataId).values,d=a.shape.length,f=r.computeStrides(a.shape),m=r.sizeFromShape(l),g=l.length,y=r.computeStrides(l),b=r.getTypedArrayFromDType(a.dtype,m);for(let x=0;x<m;x++){let e=r.indexToLoc(x,g,y);for(let n=0;n<g;n++)e[n]<u[n]?e[n]=2*u[n]-e[n]-h:e[n]>=c[n]&&(e[n]=2*(c[n]-1)-e[n]+h);e=e.map((e,t)=>e-u[t]);const t=r.locToIndex(e,d,f);b[x]=p[t]}return{dataId:n.write(b,l,a.dtype),shape:l,dtype:a.dtype}}},tS=hk((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t}),nS=Tk(Nn,tS),rS={kernelName:Nn,backendName:"cpu",kernelFunc:nS};function sS(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:i}=s,o=a.shape.length;let l=i;if(-1===l&&(l=o-1),l!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${l}`);const u=r.parseAxisParam([l],a.shape),c=LN({inputs:{x:a},backend:n,attrs:{reductionIndices:u,keepDims:!1}}),h=p.expandShapeToKeepDim(c.shape,u),d=Dk({inputs:{x:c},backend:n,attrs:{shape:h}}),f=_I({inputs:{a:a,b:d},backend:n}),m=bI({inputs:{x:f},backend:n}),g=qN({inputs:{x:m},backend:n,attrs:{axis:u,keepDims:!1}}),y=Dk({inputs:{x:g},backend:n,attrs:{shape:h}}),b=AI({inputs:{a:m,b:y},backend:n});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),b}const aS={kernelName:hr,backendName:"cpu",kernelFunc:sS},iS={kernelName:Sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:i,seed:o,normalized:l}=s;ek(a,"multinomial");const u=l?a:sS({inputs:{logits:a},backend:n,attrs:{dim:-1}}),c=u.shape[0],h=u.shape[1],p=n.data.get(u.dataId).values,d=[c,i],f=r.makeZerosTypedArray(r.sizeFromShape(d),"int32");for(let r=0;r<c;++r){const e=r*h,t=new Float32Array(h-1);t[0]=p[e];for(let r=1;r<t.length;++r)t[r]=t[r-1]+p[e+r];const n=sl.alea(o.toString()),s=r*i;for(let r=0;r<i;++r){const e=n();f[s+r]=t.length;for(let n=0;n<t.length;n++)if(e<t[n]){f[s+r]=n;break}}}return l||n.disposeIntermediateTensorInfo(u),n.makeTensorInfo(d,"int32",f)}};function oS(e,t,n){const s=r.createScalarValue(-1,n);return SI([],t,s,e,n)}const lS={kernelName:Tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;ek(r,"neg");const s=n.data.get(r.dataId).values,[a,i]=oS(s,r.shape,r.dtype);return n.makeTensorInfo(i,r.dtype,a)}},uS=d.nonMaxSuppressionV3Impl,cS={kernelName:En,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=r;ek(s,"NonMaxSuppression");const u=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=uS(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},hS=d.nonMaxSuppressionV4Impl,pS={kernelName:An,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=r;ek(s,"NonMaxSuppressionPadded");const c=n.data.get(s.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=hS(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},dS=d.nonMaxSuppressionV5Impl,fS={kernelName:Rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=r;ek(s,"NonMaxSuppressionWithScore");const c=n.data.get(s.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=dS(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},mS=hk((e,t)=>e!==t?1:0),gS=Tk($n,mS,null,"bool"),yS={kernelName:$n,backendName:"cpu",kernelFunc:gS},bS={kernelName:Dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{depth:i,onValue:o,offValue:l}=s;ek(a,"oneHot");const u=r.sizeFromShape(a.shape),c=new Float32Array(u*i);c.fill(l);const h=n.data.get(a.dataId).values;for(let r=0;r<u;++r)h[r]>=0&&h[r]<i&&(c[r*i+h[r]]=o);return n.makeTensorInfo([...a.shape,i],"int32",c)}};function xS(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=Ik({inputs:{input:r},backend:n}),t=xS({inputs:{x:e},backend:n}),s=Fv({inputs:{input:r},backend:n}),a=xS({inputs:{x:s},backend:n}),i=wk({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}return BI({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const wS={kernelName:Sr,backendName:"cpu",kernelFunc:xS},kS={kernelName:Fn,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const t=Ik({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=Fv({inputs:{input:s},backend:r}),i=xS({inputs:{x:a},backend:r}),o=wk({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}return BI({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function vS(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return wI({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const i=t[0].shape,o=t[0].dtype;t.forEach(e=>{r.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),r.assert(o===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const l=[],u=_v({inputs:t.map(e=>{const t=wI({inputs:{input:e},backend:n,attrs:{dim:a}});return l.push(t),t}),backend:n,attrs:{axis:a}});return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),u}const IS={kernelName:_n,backendName:"cpu",kernelFunc:vS},NS={kernelName:On,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:i,constantValue:o}=s;ek(a,"pad");const l=i.map((e,t)=>e[0]+a.shape[t]+e[1]),u=i.map(e=>e[0]),c=n.data.get(a.dataId).values,h=r.sizeFromShape(a.shape),p=a.shape.length,d=r.computeStrides(a.shape),f=r.sizeFromShape(l),m=l.length,g=r.computeStrides(l),y=r.getTypedArrayFromDType(a.dtype,f);0!==o&&y.fill(o);for(let b=0;b<h;b++){const e=r.indexToLoc(b,p,d).map((e,t)=>e+u[t]);y[r.locToIndex(e,m,g)]=c[b]}return{dataId:n.write(y,l,a.dtype),shape:l,dtype:a.dtype}}},SS=hk((e,t)=>Math.pow(e,t)),CS=Tk(Mn,SS),TS={kernelName:Mn,backendName:"cpu",kernelFunc:CS};function $S(e,t,n,s){const[a,i]=p.computeOutAndReduceShapes(e,s),o=ps(t,"int32"),l=r.makeZerosTypedArray(r.sizeFromShape(a),o),u=r.sizeFromShape(i);for(let r=0;r<l.length;++r){const e=r*u;let t=1;for(let r=0;r<u;++r)t*=n[e+r];l[r]=t}return{outVals:l,outShape:a,outDtype:o}}const ES={kernelName:zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;ek(a,"prod");const l=a.shape.length,u=r.parseAxisParam(i,a.shape),c=p.getAxesPermutation(u,l);let h=u,d=a;const f=[];null!=c&&(d=jk({inputs:{x:a},backend:n,attrs:{perm:c}}),f.push(d),h=p.getInnerMostAxes(h.length,l));const m=n.data.get(d.dataId).values,{outVals:g,outShape:y,outDtype:b}=$S(d.shape,d.dtype,m,h);let x=y;return o&&(x=p.expandShapeToKeepDim(y,u)),f.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(x,b,g)}};function AS(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return r.makeZerosTypedArray(0,s);const a=Math.abs(Math.ceil((t-e)/n)),i=r.makeZerosTypedArray(a,s);t<e&&1===n&&(n=-1),i[0]=e;for(let r=1;r<i.length;r++)i[r]=i[r-1]+n;return i}const RS={kernelName:Pn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,dtype:a,step:i}=n,o=AS(r,s,i,a);return t.makeTensorInfo([o.length],a,o)}},FS=rk(Wn,e=>1/e),DS={kernelName:Wn,backendName:"cpu",kernelFunc:FS},_S={kernelName:jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:l}=s;ek(a,"resizeBilinear");const u=r.computeStrides(a.shape),[c,h]=l,[p,d,f,m]=a.shape,g=n.data.get(a.dataId).values,y=new Float32Array(r.sizeFromShape([p,c,h,m])),b=[i&&c>1?d-1:d,i&&h>1?f-1:f],x=[i&&c>1?c-1:c,i&&h>1?h-1:h];let w=0;const k=b[0]/x[0],v=b[1]/x[1];for(let r=0;r<p;r++)for(let e=0;e<c;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(d-1,Math.ceil(t)),i=r*u[0]+n*u[1],l=r*u[0]+a*u[1];for(let e=0;e<h;e++){let t;t=o?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),r=t-n,a=Math.min(f-1,Math.ceil(t)),c=i+n*u[2],h=l+n*u[2],p=i+a*u[2],d=l+a*u[2];for(let e=0;e<m;e++){const t=g[c+e],n=g[h+e],a=t+(g[p+e]-t)*r;y[w++]=a+(n+(g[d+e]-n)*r-a)*s}}}return n.makeTensorInfo([p,c,h,m],"float32",y)}},OS={kernelName:qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:i}=t,{alignCorners:o}=s;ek([i,a],"resizeBilinearGrad");const l=r.computeStrides(a.shape),[u,c,h,p]=a.shape,[,d,f]=i.shape,m=new Float32Array(u*c*h*p),g=[o&&d>1?c-1:c,o&&f>1?h-1:h],y=[o&&d>1?d-1:d,o&&f>1?f-1:f],b=g[0]/y[0],x=g[1]/y[1],w=n.data.get(i.dataId).values;let k=0;for(let r=0;r<u;r++){const e=r*l[0];for(let t=0;t<d;t++){const n=t*b,r=Math.floor(n),s=Math.min(Math.ceil(n),c-1),a=e+r*l[1],i=e+s*l[1],o=n-r,u=1-o;for(let e=0;e<f;e++){const t=e*x,n=Math.floor(t),r=Math.min(Math.ceil(t),h-1),s=t-n,c=1-s,d=a+n*l[2],f=a+r*l[2],g=i+n*l[2],y=i+r*l[2],b=u*c,v=u*s,I=o*c,N=o*s;for(let e=0;e<p;e++){const t=w[k++];m[d+e]+=t*b,m[f+e]+=t*v,m[g+e]+=t*I,m[y+e]+=t*N}}}}return n.makeTensorInfo([u,h,c,p],"float32",m)}},MS={kernelName:Gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:i,halfPixelCenters:o,size:l}=s;ek(a,"resizeNearestNeighbor");const u=r.computeStrides(a.shape),[c,h]=l,[p,d,f,m]=a.shape,g=n.data.get(a.dataId).values,y=new Float32Array(p*c*h*m),b=[i&&c>1?d-1:d,i&&h>1?f-1:f],x=[i&&c>1?c-1:c,i&&h>1?h-1:h],w=b[0]/x[0],k=b[1]/x[1];let v=0;for(let r=0;r<p;r++){const e=r*u[0];for(let t=0;t<c;t++){const n=o?w*(t+.5):w*t;let r=Math.min(d-1,i?Math.round(n):Math.floor(n));o&&(r=Math.max(0,r));const s=e+r*u[1];for(let e=0;e<h;e++){const t=o?k*(e+.5):k*e;let n=Math.min(f-1,i?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const r=s+n*u[2];for(let e=0;e<m;e++)y[v++]=g[r+e]}}}return n.makeTensorInfo([p,c,h,m],a.dtype,y)}},LS={kernelName:Hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:i}=t,{alignCorners:o}=s;ek([i,a],"resizeNearestNeighborGrad");const l=r.computeStrides(a.shape),u=r.computeStrides(i.shape),[c,h,p,d]=a.shape,[,f,m]=i.shape,g=new Float32Array(c*h*p*d),y=n.data.get(i.dataId).values,b=[o&&f>1?h-1:h,o&&m>1?p-1:p],x=[o&&f>1?f-1:f,o&&m>1?m-1:m],w=b[0]/x[0],k=b[1]/x[1],v=1/w,I=1/k,N=2*Math.ceil(v)+2,S=2*Math.ceil(I)+2;for(let r=0;r<c;r++){const e=r*l[0];for(let t=0;t<h;t++){const n=e+t*l[1],r=Math.floor(t*v),s=Math.floor(r-N/2);for(let a=0;a<p;a++){const r=n+a*l[2],i=Math.floor(a*I),c=Math.floor(i-S/2);for(let n=0;n<d;n++){let i=0;for(let r=0;r<N;r++){const l=r+s;if(l<0||l>=f)continue;const d=e+l*u[1],g=l*w;if(t===Math.min(h-1,o?Math.round(g):Math.floor(g)))for(let e=0;e<S;e++){const t=e+c;if(t<0||t>=m)continue;const r=d+t*u[2],s=t*k;a===Math.min(p-1,o?Math.round(s):Math.floor(s))&&(i+=y[r+n])}}g[r+n]=i}}}}return n.makeTensorInfo(a.shape,a.dtype,g)}},zS={kernelName:Xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:i}=s;ek(a,"reverse");const o=a.shape.length,l=r.parseAxisParam(i,a.shape);if(0===o)return ok({inputs:{x:a},backend:n});const u=new es(a.shape,a.dtype),c=n.bufferSync(a);for(let r=0;r<u.size;r++){const e=u.indexToLoc(r),t=e.slice();l.forEach(e=>t[e]=a.shape[e]-1-t[e]),u.set(c.get(...t),...e)}return n.makeTensorInfo(u.shape,u.dtype,u.values)}},PS={kernelName:$r,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:i,center:o}=t,l=n,u=r.getTypedArrayFromDType(s.dtype,r.sizeFromShape(s.shape)),[c,h,d,f]=s.shape,[m,g]=p.getImageCenter(o,h,d),y=Math.sin(a),b=Math.cos(a),x=l.data.get(s.dataId).values;for(let r=0;r<c;r++){const e=r*d*h*f;for(let t=0;t<h;t++){const n=t*(d*f);for(let r=0;r<d;r++){const s=r*f;for(let a=0;a<f;a++){const o=[c,t,r,a],l=o[2],p=o[1];let w=(l-m)*b-(p-g)*y,k=(l-m)*y+(p-g)*b;w=Math.round(w+m),k=Math.round(k+g);let v=i;"number"!=typeof i&&(v=3===a?255:i[a]),w>=0&&w<d&&k>=0&&k<h&&(v=x[e+k*(d*f)+w*f+a]),u[e+n+s+a]=v}}}}return{dataId:l.write(u,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},BS=rk(Yn,e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}),WS={kernelName:Yn,backendName:"cpu",kernelFunc:BS},VS=Nv(e=>1/Math.sqrt(e)),US=sk(Jn,VS),GS={kernelName:Jn,backendName:"cpu",kernelFunc:US};function HS(e,t,n,r,s,a,i,o,l,u){const c=[r/s,s],h=e.values,p=t.values;if(0===r)return Ta(n,t.dtype);const d=Ta(c,t.dtype);d.values.fill(l);for(let f=0;f<a;f++){const e=[];let a=0;for(let t=0;t<i;t++){const n=h[f*i+t];e.push(n),a+=n*o[t]}if(a<0||a>=r/s)throw new Error(`Invalid indices: ${e} does not index into ${n}`);for(let n=0;n<s;n++)u?d.values[a*s+n]+=p[f*s+n]:d.values[a*s+n]=0===t.rank?p[0]:p[f*s+n]}return d}const jS={kernelName:Zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:i}=r,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=p.calculateShapes(a,s,i),d=HS(n.bufferSync(s),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,d.dtype,d.values)}},qS={kernelName:Qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:i}=t;ek([s,a,i],"select");const o=s.shape.length,l=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values,h=ps(a.dtype,i.dtype),p=r.makeZerosTypedArray(r.sizeFromShape(a.shape),h);let d=0;const f=0===o||o>1||1===a.shape.length?1:r.sizeFromShape(a.shape.slice(1));for(let r=0;r<l.length;r++)for(let e=0;e<f;e++)p[d++]=1===l[r]?u[r]:c[r];return n.makeTensorInfo(a.shape,h,p)}},KS=p.SELU_SCALEALPHA,XS=p.SELU_SCALE,YS=rk(er,e=>e>=0?XS*e:KS*(Math.exp(e)-1)),JS={kernelName:er,backendName:"cpu",kernelFunc:YS},ZS=rk(ar,e=>1/(1+Math.exp(-e))),QS={kernelName:ar,backendName:"cpu",kernelFunc:ZS},eC=rk(sr,e=>e<0?-1:e>0?1:0),tC={kernelName:sr,backendName:"cpu",kernelFunc:eC},nC=rk(nr,e=>Math.sin(e)),rC={kernelName:nr,backendName:"cpu",kernelFunc:nC},sC=rk(rr,e=>Math.sinh(e)),aC={kernelName:rr,backendName:"cpu",kernelFunc:sC},iC=Math.log(1.1920928955078125e-7)+2,oC=rk(ir,e=>{const t=e>-iC,n=e<iC,r=Math.exp(e);let s;return s=n?r:t?e:Math.log(1+r),s}),lC={kernelName:ir,backendName:"cpu",kernelFunc:oC},uC={kernelName:ur,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:i,paddings:o}=s;ek([a],"spaceToBatchND");const l=r.sizeFromShape(i),u=[[0,0]];u.push(...o);for(let r=1+i.length;r<a.shape.length;++r)u.push([0,0]);const c=NS.kernelFunc({inputs:{x:a},backend:n,attrs:{paddings:u,constantValue:0}}),h=p.getReshaped(c.shape,i,l,!1),d=p.getPermuted(h.length,i.length,!1),f=p.getReshapedPermuted(c.shape,i,l,!1),m=Dk({inputs:{x:c},backend:n,attrs:{shape:h}}),g=jk({inputs:{x:m},backend:n,attrs:{perm:d}}),y=Dk({inputs:{x:g},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}},cC={kernelName:mr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:i}=t,{outputShape:o}=r,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=p.calculateShapes(a,s,o),f=HS(n.bufferSync(s),n.bufferSync(a),o,d,c,u,l,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,f.dtype,f.values)}},hC={kernelName:cr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:i,axis:o}=s,l=r.parseAxisParam(o,a.shape)[0],u=p.prepareSplitSize(a,i,l),c=new Array(a.shape.length).fill(0),h=a.shape.slice();return u.map(e=>{const t=[...h];t[l]=e;const r=bv({inputs:{x:a},backend:n,attrs:{begin:c,size:t}});return c[l]+=e,r})}},pC=rk(or,e=>Math.sqrt(e)),dC={kernelName:or,backendName:"cpu",kernelFunc:pC},fC={kernelName:dr,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;ek(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let i=0;i<s.length;++i){const e=s[i];a[i]=e*e}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},mC=hk((e,t)=>{const n=e-t;return n*n}),gC=Tk(pr,mC),yC={kernelName:pr,backendName:"cpu",kernelFunc:gC},bC=rk(Cr,(e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha}),xC={kernelName:Cr,backendName:"cpu",kernelFunc:bC};function wC(e,t,n,r){const s=Ta(e,t.dtype);for(let a=0;a<s.size;a++){const e=s.indexToLoc(a),i=new Array(e.length);for(let t=0;t<i.length;t++)i[t]=e[t]*n[t]+r[t];s.set(t.get(...i),...e)}return s}const kC={kernelName:gr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:i,strides:o,beginMask:u,endMask:c,ellipsisMask:h,newAxisMask:p,shrinkAxisMask:d}=r;ek(s,"stridedSlice");const{nonStrided:f,$begin:m,$strides:g,size:y,newShape:b,outShape:x}=l.sliceInfo(s.shape,a,i,o,u,c,h,p,d),w=Dk({inputs:{x:s},backend:n,attrs:{shape:b}});let k;if(f){const e=bv({inputs:{x:w},backend:n,attrs:{begin:m,size:y}});k=Dk({inputs:{x:e},backend:n,attrs:{shape:x}}),n.disposeIntermediateTensorInfo(e)}else if(x.some(e=>0===e))k=n.makeTensorInfo(x,s.dtype,[]);else{const e=wC(x,n.bufferSync(w),g,m);k=n.makeTensorInfo(e.shape,e.dtype,e.values)}const v=Dk({inputs:{x:k},backend:n,attrs:{shape:x}});return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),v}},vC=rk(yr,e=>Math.tan(e)),IC={kernelName:yr,backendName:"cpu",kernelFunc:vC},NC=rk(br,e=>Math.tanh(e));function SC(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const r=Ta(n,e.dtype);for(let s=0;s<r.values.length;++s){const t=r.indexToLoc(s),n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=t[r]%e.shape[r];const a=e.locToIndex(n);r.values[s]=e.values[a]}return r}function CC(e,t,n,s,a){const i=t[t.length-1],[o,l]=[e.length/i,i],u=r.getTypedArrayFromDType(n,o*s),c=r.getTypedArrayFromDType("int32",o*s);for(let r=0;r<o;r++){const t=r*l,n=e.subarray(t,t+l),a=[];for(let e=0;e<n.length;e++)a.push({value:n[e],index:e});a.sort((e,t)=>t.value-e.value);const i=r*s,o=u.subarray(i,i+s),h=c.subarray(i,i+s);for(let e=0;e<s;e++)o[e]=a[e].value,h[e]=a[e].index}const h=t.slice();return h[h.length-1]=s,[Ta(h,n,u),Ta(h,"int32",c)]}function TC(e,t,n,s){const a=r.parseAxisParam(t,n)[0],i=[1,n[0],1];for(let r=0;r<a;r++)i[0]*=n[r];i[1]=n[a];for(let r=a+1;r<n.length;r++)i[2]*=n[r];const o={},l=new Int32Array(n[a]),u=new es(i,s,e),c=[],h=1===i[0]&&1===i[2];for(let r=0;r<n[a];r++){let t;if(h)t=e[r].toString();else{const e=[];for(let t=0;t<i[0];t++)for(let n=0;n<i[2];n++)e.push(u.get(t,r,n));t=e.join(",")}if(void 0!==o[t])l[r]=o[t];else{const e=Object.keys(o).length;o[t]=e,l[r]=e,c.push(r)}}const p=i.slice();p[1]=Object.keys(o).length;const d=new es(p,s);c.forEach((e,t)=>{for(let n=0;n<i[0];n++)for(let r=0;r<i[2];r++)d.set(u.get(n,e,r),n,t,r)});const f=n.slice();return f[a]=p[1],{outputValues:d.values,outputShape:f,indices:l}}const $C=[Lk,Pk,Wk,Uk,Fk,Gk,Kk,Xk,Yk,Jk,Qk,tv,rv,iv,lv,pv,dv,fv,mv,Mk,gv,wv,Iv,Ck,Tv,Ev,kk,Av,Ov,zv,Pv,Lv,Wv,Vv,Bv,Gv,jv,qv,Kv,Xv,Yv,Zv,Qv,eI,tI,nI,sI,rI,RI,ik,aI,lI,gI,xI,kI,NI,PI,WI,VI,HI,KI,XI,YI,JI,QI,nN,aN,lk,iN,Dv,lN,cN,pN,ck,mN,bN,wN,IN,SN,$N,AN,DN,_N,ON,WN,VN,UN,GN,HN,jN,zN,XN,YN,QN,eS,rS,iS,$I,lS,cS,pS,fS,yS,bS,kS,IS,NS,TS,fk,ES,RS,Nk,DS,gk,bk,_k,_S,OS,MS,LS,zS,PS,WS,GS,jS,qS,JS,QS,tC,rC,aC,xv,aS,lC,uC,cC,hC,dC,fC,yC,xC,kC,OI,KN,IC,{kernelName:br,backendName:"cpu",kernelFunc:NC},{kernelName:xr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;ek(s,"tile");const i=SC(n.bufferSync(s),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:wr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a}=r;ek(s,"topk");const i=n.data.get(s.dataId).values,[o,l]=CC(i,s.shape,s.dtype,a);return[n.makeTensorInfo(o.shape,o.dtype,o.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},qk,{kernelName:vr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;ek(a,"unique");const i=r.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=TC(i,s,a.shape,a.dtype);return[r.makeTensorInfo(l,a.dtype,o),r.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Ir,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s.shape.length,o=s.shape[a],l=new Array(i-1);let u=0;for(let d=0;d<i;d++)d!==a&&(l[u++]=s.shape[d]);const c=new Array(i).fill(0),h=s.shape.slice();h[a]=1;const p=new Array(o);for(let d=0;d<p.length;d++){c[a]=d;const e=bv({inputs:{x:s},backend:n,attrs:{begin:c,size:h}});p[d]=Dk({inputs:{x:e},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(e)}return p}},{kernelName:Nr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:i}=t,{numSegments:o}=s;ek(a,"unsortedSegmentSum");const l=[],u=[],c=a.shape.length-i.shape.length;let h=i;for(let r=0;r<c;++r){const e=wI({inputs:{input:h},backend:n,attrs:{dim:r+1}});h=e,u.push(e)}for(let d=0;d<o;++d){const e=r.createScalarValue(d,"int32"),t=n.makeTensorInfo([],"int32",e),s=oI({inputs:{a:t,b:h},backend:n}),i=Sk({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),o=TI({inputs:{a:i,b:a},backend:n}),c=qN({inputs:{x:o},backend:n,attrs:{axis:0,keepDims:!1}});l.push(c),u.push(t),u.push(s),u.push(i),u.push(o),u.push(c)}const p=vS({inputs:l,backend:n,attrs:{axis:0}});return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),p}},wS];for(const aO of $C)Lr(aO);const EC={},AC={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function RC(e){if(!(e in EC)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);return t.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete EC[e]},!1),1===e?t.getContext("webgl",AC)||t.getContext("experimental-webgl",AC):t.getContext("webgl2",AC)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;EC[e]=t}const t=EC[e];return t.isContextLost()?(delete EC[e],RC(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),EC[e])}var FC,DC,_C;function OC(e,t){return[t,e]}function MC(e){const t=r.sizeFromShape(e),n=Math.ceil(t/4);return r.sizeToSquarishShape(n)}function LC(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function zC(e,t){const n=e;let r,s,a,i,o,l,u,c,h,p;return 2===_e().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT):(r=e.RGBA,s=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT),l=e.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function PC(e,t){const n=t();return _e().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+t}}(e,t))}(e),n}function BC(e){return!!(_e().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function WC(e,t){return KC(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(FC||(FC={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(DC||(DC={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(_C||(_C={}));const VC=/ERROR: [0-9]+:([0-9]+):/g;function UC(e,t){if(PC(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function GC(e,t,n,r,s,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(PC(e,()=>e.bindBuffer(e.ARRAY_BUFFER,r)),PC(e,()=>e.vertexAttribPointer(o,s,e.FLOAT,!1,a,i)),PC(e,()=>e.enableVertexAttribArray(o)),!0)}function HC(e,t,n){PC(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,n)),PC(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function jC(e,t){PC(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),PC(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function qC(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+t}}(e,t))}function KC(e,t,n){const r=PC(e,()=>t());if(null==r)throw new Error(n);return r}function XC(e,t=2){return r.sizeFromShape(e.slice(0,e.length-t))}function YC(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function JC(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[XC(e),...YC(e)]),t}function ZC(e){return e%2==0}function QC(e,t){if(e=e.slice(-2),t=t.slice(-2),r.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(ZC(n)&&ZC(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&ZC(e[0])&&ZC(t[0])}let eT,tT;function nT(e,t){return null!=e.getExtension(t)}function rT(e){try{if(null!=RC(e))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function sT(e){const t=zC(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}function aT(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&r.assert("complex64"!==e.dtype,()=>t+" does not support complex64 tensors in the WebGL backend.")})}const iT=_e();function oT(){let e,t,n,r,s,a,i,o,l,u;return 2===_e().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function lT(e,t,n="index"){const s=r.computeStrides(t);return s.map((t,r)=>`int ${e[r]} = ${n} / ${t}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`).join("")}function uT(e){const t=r.computeStrides(e).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}iT.registerFlag("HAS_WEBGL",()=>iT.getNumber("WEBGL_VERSION")>0),iT.registerFlag("WEBGL_VERSION",()=>rT(2)?2:rT(1)?1:0),iT.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),iT.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===iT.get("WEBGL_VERSION")),iT.registerFlag("WEBGL_CPU_FORWARD",()=>!0),iT.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),iT.registerFlag("WEBGL_PACK",()=>iT.getBool("HAS_WEBGL")),iT.registerFlag("WEBGL_PACK_NORMALIZATION",()=>iT.getBool("WEBGL_PACK")),iT.registerFlag("WEBGL_PACK_CLIP",()=>iT.getBool("WEBGL_PACK")),iT.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),iT.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>iT.getBool("WEBGL_PACK")),iT.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>iT.getBool("WEBGL_PACK")),iT.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>iT.getBool("WEBGL_PACK")),iT.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>iT.getBool("WEBGL_PACK")),iT.registerFlag("WEBGL_PACK_REDUCE",()=>iT.getBool("WEBGL_PACK")),iT.registerFlag("WEBGL_LAZILY_UNPACK",()=>iT.getBool("WEBGL_PACK")),iT.registerFlag("WEBGL_CONV_IM2COL",()=>iT.getBool("WEBGL_PACK")),iT.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(e){if(null==eT){const t=RC(e);eT=t.getParameter(t.MAX_TEXTURE_SIZE)}return eT}(iT.getNumber("WEBGL_VERSION"))),iT.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(e){if(null==tT){const t=RC(e);tT=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,tT)}(iT.getNumber("WEBGL_VERSION"))),iT.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const e=iT.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=RC(e);return t=nT(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:nT(n,"EXT_disjoint_timer_query")?1:0,t}(e)}),iT.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>iT.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!a.isMobile()),iT.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(e){if(0===e)return!1;const t=RC(e);if(1===e){if(!nT(t,"OES_texture_float"))return!1}else if(!nT(t,"EXT_color_buffer_float"))return!1;return sT(t)}(iT.getNumber("WEBGL_VERSION"))),iT.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!iT.getBool("WEBGL_FORCE_F16_TEXTURES")&&iT.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),iT.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function(e){if(0===e)return!1;const t=RC(e);if(1!==e){if(nT(t,"EXT_color_buffer_float"))return sT(t);const e="EXT_color_buffer_half_float";if(nT(t,e)){const n=t.getExtension(e);return function(e,t){const n=zC(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(s),a}(t,n)}return!1}return!!nT(t,"OES_texture_float")&&!!nT(t,"WEBGL_color_buffer_float")&&sT(t)}(iT.getNumber("WEBGL_VERSION"))),iT.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(e=iT.getNumber("WEBGL_VERSION"))&&null!=RC(e).fenceSync;var e}),iT.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>iT.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),iT.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)});const cT="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class hT{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=FC.DENSE;const t=MC(e),n=oT();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${lT(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class pT{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=FC.DENSE;const t=MC(e),n=oT();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${lT(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class dT{constructor(e){this.variableNames=["A"],this.outTexUsage=DC.DOWNLOAD;const t=oT();this.outputShape=e,this.userCode=`\n      ${cT}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class fT{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=DC.DOWNLOAD;const t=oT();this.outputShape=e,this.userCode=`\n      ${cT}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class mT{constructor(e,t,n=!1){this.variableNames=["A"];const r=oT(),[s,a]=t;this.outputShape=e;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${uT(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class gT{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=oT(),[s,a]=t;this.outputShape=e;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let l=0;l<=1;l++)for(let t=0;t<=1;t++){const n=2*l+t;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${t} < ${e[2]}) {\n            localCoords[2] += ${t};\n            if(localCoords[1] + ${l} < ${e[1]}) {\n              localCoords[1] += ${l};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${n}] = values[0];\n              } else if(offset == 1) {\n                result[${n}] = values[1];\n              } else if(offset == 2) {\n                result[${n}] = values[2];\n              } else {\n                result[${n}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${uT(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${o};\n      }\n    `}}function yT(e,t,n,r,s,a){!function(e,t){const n=_e().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return KC(e,()=>e.createTexture(),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return PC(e,()=>e.bindTexture(o,i)),PC(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),PC(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),PC(e,()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST)),PC(e,()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST)),PC(e,()=>e.texImage2D(o,0,r,t,n,0,s,a,null)),PC(e,()=>e.bindTexture(e.TEXTURE_2D,null)),i}function bT(e){return e.internalFormatFloat}function xT(e){return e.internalFormatHalfFloat}function wT(e){return e.downloadTextureFormat}function kT(e){return e.internalFormatPackedFloat}function vT(e){return e.internalFormatPackedHalfFloat}class IT{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=_e().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){EC[e]=t}(t,e)):this.gl=RC(t);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===_e().getNumber("WEBGL_VERSION")){const e="OES_texture_half_float";if(this.textureFloatExtension=WC(this.gl,"OES_texture_float"),nT(this.gl,e))this.textureHalfFloatExtension=WC(this.gl,e);else if(_e().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),nT(this.gl,r))this.colorBufferHalfFloatExtension=WC(this.gl,r);else if(_e().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",nT(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!nT(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function(e){return function(e,t){const n=KC(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return PC(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),PC(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=KC(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return PC(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n)),PC(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return KC(e,()=>e.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=zC(this.gl,this.textureHalfFloatExtension)}get debug(){return _e().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;PC(e,()=>e.finish()),PC(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),PC(e,()=>e.deleteFramebuffer(this.framebuffer)),PC(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),PC(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),PC(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=OC(t,n);return yT(e,s,a,bT(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=OC(t,n);return yT(e,s,a,xT(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=OC(t,n);return yT(e,s,a,wT(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){PC(e,()=>e.bindTexture(e.TEXTURE_2D,t)),n.data instanceof Uint8Array?PC(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data)):PC(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n)),PC(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,s,a){let i,o,l;PC(e,()=>e.bindTexture(e.TEXTURE_2D,t)),s instanceof Uint8Array?(i=new Uint8Array(n*r*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*r*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(s),PC(e,()=>e.texImage2D(e.TEXTURE_2D,0,l,n,r,0,e.RGBA,o,i)),PC(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=LC(t,n);return yT(e,s,a,vT(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=LC(t,n);return yT(e,s,a,kT(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(jC(this.gl,this.framebuffer),this.outputTexture=null),PC(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n,r){const[s,a]=OC(t,n),i=new Uint8Array(t*n*4);return PC(e,()=>e.readPixels(0,0,s,a,r.downloadTextureFormat,e.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,n,r,s,a){return function(e,t,n,r,s,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,r]=LC(e,t);return n*r*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,s,a)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const s=e.createBuffer();PC(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s));const a=16*t*n;return PC(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ)),PC(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0)),PC(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),s}(this.gl,t,n);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(_e().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else _e().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,_e().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n){const r=new Float32Array(t*n*4);return PC(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r)),r}(this.gl,t,n))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=function(e,t){const n=KC(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(PC(e,()=>e.shaderSource(n,t)),PC(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=VC.exec(t);if(null==n)return console.log("Couldn't parse line number in error: "+t),void console.log(e);const s=+n[1],a=e.split("\n"),i=a.length.toString().length+2,o=a.map((e,t)=>r.rightPad((t+1).toString(),i)+e);let l=0;for(let r=0;r<o.length;r++)l=Math.max(o[r].length,l);const u=o.slice(0,s-1),c=o.slice(s-1,s),h=o.slice(s);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log("%c "+r.rightPad(c[0],l),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(t,e),s=function(e){const t=oT();return function(e,t){const n=KC(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(PC(e,()=>e.shaderSource(n,t)),PC(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t),a=function(e){return KC(e,()=>e.createProgram(),"Unable to create WebGLProgram.")}(t);return PC(t,()=>t.attachShader(a,s)),PC(t,()=>t.attachShader(a,n)),function(e,t){if(PC(e,()=>e.linkProgram(t)),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,a),this.debug&&UC(t,a),this.vertexAttrsAreBound||(this.setProgram(a),this.vertexAttrsAreBound=function(e,t,n){return PC(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),GC(e,t,"clipSpacePos",n,3,20,0)&&GC(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),a}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&PC(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&UC(this.gl,this.program),PC(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return KC(e,()=>e.getUniformLocation(t,n),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),PC(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,t,n,r){PC(e,()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),PC(e,()=>e.activeTexture(e.TEXTURE0+n)),PC(e,()=>e.bindTexture(e.TEXTURE_2D,t))}(e,t,r)),PC(e,()=>e.uniform1i(n,r))}(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=LC(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&UC(this.gl,this.program),qC(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),PC(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),PC(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=WC(this.gl,2===_e().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===_e().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===_e().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await r.repeatedTry(()=>this.disposed||this.isQueryAvailable(e,_e().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,_e().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||r.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),HC(this.gl,e,this.framebuffer),this.debug&&qC(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(HC(this.gl,this.outputTexture,this.framebuffer),this.debug&&qC(this.gl)):jC(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;HC(r,e,this.framebuffer),this.debug&&qC(r),this.outputTexture=e,PC(r,()=>r.viewport(0,0,t,n)),PC(r,()=>r.scissor(0,0,t,n))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),PC(this.gl,()=>this.gl.scissor(e,t,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:NT}=p;function ST(e,t,n,s){const a=[];e.forEach(e=>{const t=r.sizeFromShape(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?a.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(a.push(`uniform sampler2D ${e.name};`),a.push(`uniform int offset${e.name};`))});const i=a.join("\n"),o=e.map(e=>function(e,t,n=!1){let s="";return s+=n?TT(e):CT(e),e.shapeInfo.logicalShape.length<=t.logicalShape.length&&(s+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",i=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,l=NT(e.shapeInfo.logicalShape,t.logicalShape),u=_T(o),c=o-i;let h;const p=["x","y","z","w","u","v"];h=0===i?"":o<2&&l.length>=1?"coords = 0;":l.map(e=>`coords.${p[e+c]} = 0;`).join("\n");let d="";d=o<2&&i>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>"coords."+p[t+c]).join(", ");let f="return outputValue;";const m=1===r.sizeFromShape(e.shapeInfo.logicalShape),g=1===r.sizeFromShape(t.logicalShape);if(1!==i||m||g){if(m&&!g)f=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(l.length){const e=i-2,t=i-1;l.indexOf(e)>-1&&l.indexOf(t)>-1?f="return vec4(outputValue.x);":l.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":l.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${u} coords = getOutputCoords();\n      ${h}\n      vec4 outputValue = get${s}(${d});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",i=e.shapeInfo.logicalShape.length,o=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===o&&null==e.shapeInfo.flatOffset&&r.arraysEqual(e.shapeInfo.texShape,t.texShape))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=_T(o),u=NT(e.shapeInfo.logicalShape,t.logicalShape),c=o-i;let h;const p=["x","y","z","w","u","v"];h=0===i?"":o<2&&u.length>=1?"coords = 0;":u.map(e=>`coords.${p[e+c]} = 0;`).join("\n");let d="";return d=o<2&&i>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>"coords."+p[t+c]).join(", "),`\n    float ${a}() {\n      ${l} coords = getOutputCoords();\n      ${h}\n      return get${s}(${d});\n    }\n  `}(e,t)),s}(e,t,s)).join("\n"),l=t.texShape,u=oT(),c=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let h,p,d=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${$T}\n    ${ET}\n    ${AT}\n  `}(u);return t.isPacked?(h=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===n[0]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(r.arraysEqual(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),s=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),s=r*Math.ceil(e[e.length-2]/2);let a=s,i="",o="b, r, c";for(let l=2;l<e.length-1;l++)a*=e[e.length-l-1],i=`\n      int b${l} = index / ${a};\n      index -= b${l} * ${a};\n    `+i,o=`b${l}, `+o;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${o});\n    }\n  `}(e,t)}}(t.logicalShape,l),p=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(h=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return 1===(n=t)[0]?`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `;case 2:return function(e,t){return r.arraysEqual(e,t)?`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=lT(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=lT(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=lT(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=lT(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(e.length+"-D output sampling is not yet supported")}var n}(t.logicalShape,l),p=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),s&&(d+=RT),[d,c,p,i,h,o,n].join("\n")}function CT(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[r,s]=e.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[a,i]=e.shapeInfo.texShape;return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${FT(t)});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${DT(e)}\n      }\n    `;const r=e.shapeInfo.texShape,s=r[0],a=r[1];if(1===a&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const i=FT(t);return 1===a?`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `:1===s?`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `:`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape;if(null!=a&&r.arraysEqual(t,a))return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${a[0]}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const{newShape:i,keptDims:o}=r.squeezeShape(t);if(i.length<t.length){const t=["row","col"];return`\n      ${CT(OT(e,i))}\n      float ${s}(int row, int col) {\n        return ${s}(${MT(t,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${DT(e)}\n      }\n    `;const l=a[0],u=a[1],c=FT(n);return 1===u?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `:1===l?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[1]*t[2],i=t[2],{newShape:o,keptDims:l}=r.squeezeShape(t);if(o.length<t.length){const t=["row","col","depth"];return`\n        ${CT(OT(e,o))}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${MT(t,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${DT(e)}\n      }\n    `;const u=e.shapeInfo.texShape,c=u[0],h=u[1],p=e.shapeInfo.flatOffset;return h===a&&null==p?`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `:h===i&&null==p?`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${FT(n)};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[3],i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=r.squeezeShape(t);if(l.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${CT(OT(e,l))}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${MT(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${DT(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];return d===o&&null==c?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:d===a&&null==c?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${d}, index + ${FT(n)});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[4],i=t[3]*a,o=t[2]*i,l=t[1]*o,{newShape:u,keptDims:c}=r.squeezeShape(t);if(u.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${CT(OT(e,u))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${MT(t,c)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${l}, ${o}, ${i}, ${a})) +\n          depth3;\n        ${DT(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];return f===l&&null==h?`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:f===a&&null==h?`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${l} + col * ${o} + depth * ${i} +\n          depth2 * ${a} + depth3 + ${FT(n)};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:a,keptDims:i}=r.squeezeShape(t);if(a.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${CT(OT(e,a))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${MT(t,i)});\n      }\n    `}const o=t[5],l=t[4]*o,u=t[3]*l,c=t[2]*u,h=t[1]*c;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${h}, ${c}, ${u}, ${l})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${DT(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,f=d[0],m=d[1];return m===h&&null==p?`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:m===o&&null==p?`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${h} + col * ${c} + depth * ${u} +\n          depth2 * ${l} + depth3 * ${o} + depth4 + ${FT(n)};\n      vec2 uv = uvFromFlat(${f}, ${m}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(t.length+"-D input sampling is not yet supported")}}function TT(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${oT().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=e.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=oT();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${a.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,i=a[0],o=a[1],l=oT();if(null!=a&&r.arraysEqual(t,a))return`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${l.texture2D}(${n}, uv);\n      }\n    `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(t[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===t[0]){const n=[1,2],s=["b","row","col"];return`\n        ${TT(OT(e,t.slice(1)))}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${MT(s,n)});\n        }\n      `}const i=a[0],o=a[1],l=Math.ceil(t[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${l*Math.ceil(t[1]/2)}, ${l}, b, row, col);\n      return ${oT().texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],l=i[1],u=Math.ceil(t[n-1]/2);let c=u*Math.ceil(t[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let d=2;d<n-1;d++)h=`int b${d}, `+h,c*=t[n-d-1],p=`b${d} * ${c} + `+p;return`\n    vec4 ${s}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${oT().texture2D}(${r}, uv);\n    }\n  `}(e)}}const $T="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ET="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",AT="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",RT="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function FT(e){return"offset"+e}function DT(e){const t=e.name,n=r.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function _T(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function OT(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function MT(e,t){return t.map(t=>e[t]).join(", ")}function LT(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,n)=>{const s=e.logicalShape,a=t[n],i=a.shape;if(!r.arraysEqual(s,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${i} must match`);if(e.isUniform&&a.isUniform)return;const o=e.texShape,l=a.isUniform?null:a.texData.texShape;if(!r.arraysEqual(o,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${l} must match`)})}const{addImpl:zT,bincountImpl:PT,bincountReduceImpl:BT,ceilImpl:WT,concatImpl:VT,expImpl:UT,expm1Impl:GT,floorImpl:HT,gatherV2Impl:jT,greaterImpl:qT,lessImpl:KT,linSpaceImpl:XT,logImpl:YT,maxImpl:JT,maximumImpl:ZT,minimumImpl:QT,multiplyImpl:e$,negImpl:t$,prodImpl:n$,rangeImpl:r$,rsqrtImpl:s$,simpleAbsImpl:a$,sliceImpl:i$,stridedSliceImpl:o$,subImpl:l$,tileImpl:u$,topKImpl:c$,transposeImpl:h$,uniqueImpl:p$}=F;function d$(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function f$(e,t){return 1===t?[e]:d$(e,t)}class m${constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=f$("rc",t),r=_T(t),s=function(e,t,n){if(1===e)return"rc > "+t[0];let r="";for(let s=e-2;s<e;s++)r+=`${n[s]} >= ${t[s]}`,s<e-1&&(r+="||");return r}(t,e,n),a=function(e,t,n,r){if(1===e)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,r=function(e,t){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<e;n++)a=t[t.length-1-n]+","+a;n.push(a)}return n}(n,t);return 1===n?`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class g${constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let s=0;s<4;s++){let e="thisRC = rc;";s%2==1&&(e+="thisRC.z += 1;"),s>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${s>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${s}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${s>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${lT(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${uT(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class y${constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=x$(t,n),s=w$(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=b$(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[s].shift();return this.usedTextures[s].push(e),e}let i;return r===_C.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===_C.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===_C.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===_C.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===_C.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=x$(n,r),a=w$(t,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=b$(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),o=_e().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});for(const e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function b$(e,t,n,r,s){const a=function(e,t){switch(e){case _C.PACKED_2X2_FLOAT32:return kT(t);case _C.PACKED_2X2_FLOAT16:return vT(t);case _C.UNPACKED_FLOAT32:return bT(t);case _C.UNPACKED_FLOAT16:return xT(t);case _C.PACKED_4X1_UNSIGNED_BYTE:return wT(t);default:throw new Error("Unknown physical texture type "+e)}}(t,r);let i;if(s){const[t,n]=LC(e[0],e[1]);i=t*n}else{const[t,n]=OC(e[0],e[1]);i=t*n}return i*function(e,t){if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===e.RGBA16F)return 8;throw new Error("Unknown internal format "+t)}(n,a)}function x$(e,t){if(e===DC.UPLOAD)return _C.PACKED_2X2_FLOAT32;if(e===DC.RENDER||null==e)return function(e){return _e().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?_C.PACKED_2X2_FLOAT32:_C.UNPACKED_FLOAT32:e?_C.PACKED_2X2_FLOAT16:_C.UNPACKED_FLOAT16}(t);if(e===DC.DOWNLOAD||e===DC.PIXELS)return _C.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+e)}function w$(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class k${constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const v$="return abs(x);",I$="return x;";class N${constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class S${constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=f$("rc",t),r=_T(t),s=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const C$=d.whereImpl,T$={};class $$ extends P{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!_e().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=RC(_e().getNumber("WEBGL_VERSION"));this.binaryCache=((t=_e().getNumber("WEBGL_VERSION"))in T$||(T$[t]={}),T$[t]),this.gpgpu=new IT(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new y$(this.gpgpu),this.numMBBeforeWarning=null==_e().global.screen?1024:_e().global.screen.height*_e().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new z(this,gi())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,n){if((_e().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||_e().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:DC.UPLOAD,refCount:1,complexParentRefCount:0}),r}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,r){if(_e().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:DC.UPLOAD,refCount:1,complexParentRefCount:0})}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.texData.has(t)){const e=this.texData.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:a,slice:i,shape:o,isPacked:l}=t;if(null!=i){let t;t=l?new N$(o,I$):new k$(o,I$);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const u=null!=this.activeTimers;let c,h;if(u&&(c=r.now()),"complex64"===s){const e=this.readSync(a.real.dataId),t=this.readSync(a.imag.dataId);h=p.mergeRealAndImagArrays(e,t)}else h=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=r.now()-c),this.convertAndCacheOnCPU(e,h)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}const t=this.texData.get(e),{values:n,shape:s,slice:a,dtype:i,complexTensorInfos:o,isPacked:l}=t;if(null!=a){let t;t=l?new N$(s,I$):new k$(s,I$);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:i}],i),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(!_e().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===_e().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,c,h=null;if("complex64"!==i&&_e().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const t=this.texData.get(u.dataId);h=this.gpgpu.createBufferFromTexture(t.texture,...MC(s))}if(this.pendingRead.set(e,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]);c=p.mergeRealAndImagArrays(e[0],e[1])}else if(null==h)c=this.getValuesFromTexture(e);else{const e=r.sizeFromShape(s);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,e)}null!=u&&this.disposeIntermediateTensorInfo(u);const d=this.convertAndCacheOnCPU(e,c),f=this.pendingRead.get(e);return this.pendingRead.delete(e),f.forEach(e=>e(d)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e),this.pendingDeletes--),d}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map(e=>r.decodeString(e))}catch(s){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ta(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!BC(n)){if(_e().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),a=r.sizeFromShape(t);if(_e().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...MC(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),s}const i=_e().getBool("WEBGL_PACK")&&!0===s,o=i?JC(t):t,l=i?new fT(o):new dT(o),u=this.runWebGLProgram(l,[{shape:o,dtype:n,dataId:e}],"float32"),c=this.texData.get(u.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(u),h}async time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=r.flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),i=r.flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(_e().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);o.kernelMs=r.sum(e),o.getExtraProfileInfo=()=>e.map((e,t)=>({name:i[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return _e().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:r.now(),endMs:null}}endTimer(e){return _e().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=r.now(),e)}async getQueryTime(e){return _e().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs}disposeData(e){if(this.pendingDisposal.has(e))return;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),void this.pendingDeletes++;if(!this.texData.has(e))return;if(this.texData.get(e).complexParentRefCount>0)return void this.texData.get(e).refCount--;this.releaseGPUData(e);const{complexTensorInfos:t}=this.texData.get(e);null!=t&&(this.texData.get(t.real.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.real),this.texData.get(t.imag.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.imag)),this.texData.delete(e)}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,s,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}getCPUBackend(){return _e().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=gi().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(e,t=128){const n=this.getCPUBackend();return _e().getBool("IS_TEST")||this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&e.every(e=>null==this.texData.get(e.dataId).texture&&r.sizeFromShape(e.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){p.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return C$(e.shape,t)}packedUnaryOp(e,t,n){const r=new N$(e.shape,t);return this.compileAndRun(r,[e],n)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=a$(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(_e().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,v$,e.dtype);const t=new k$(e.shape,v$);return this.compileAndRun(t,[e])}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&r.isString(n[0])){const a=n.map(e=>r.encodeString(e));s=this.write(a,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:r}=this.makeTensorInfo(e,t,n);return gi().makeTensorFromDataId(r,e,t,this)}unpackTensor(e){const t=new S$(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new m$(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[XC(e.shape),...YC(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},s=[XC(t),...YC(t)],a=new g$(s,n),i=this.runWebGLProgram(a,[r],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:r,dtype:s}=t,a=JC(r);let i;return i=n?new pT(a):new hT(a),{dtype:s,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:s,dataId:e}],s,null,!0).dataId}}runWebGLProgram(e,t,n,s,a=!1){const i=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(i.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===FC.DENSE){const t=MC(e.outputShape);o.texShape=t.map(e=>2*e)}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===r.sizeFromShape(i.shape))return o.values=r.getTypedArrayFromDType(i.dtype,0),i;const l=[],u=t.map(t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&r.sizeFromShape(t.shape)<=_e().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!QC(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),l.push(t),n=this.texData.get(t.dataId),e.shape=r}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}});this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(e,t,n){let r="";t.concat(n).forEach(e=>{r+=`${e.shape}_${e.isUniform?"uniform":e.texData.texShape}_${null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0}`});let s=e.constructor.name;return s+="_"+r+"_"+e.userCode,s}(e,u,c),p=this.getAndSaveBinary(h,()=>function(e,t,n,r){const s=t.userCode,a=n.map((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}}),i=a.map(e=>e.shapeInfo),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},l=ST(a,o,s,t.packedInputs),u=e.createProgram(l);let c=null;const h=e.getUniformLocation(u,"NAN",!1);1===_e().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(u,"INFINITY",!1));const p={};for(let d=0;d<t.variableNames.length;d++){const n=t.variableNames[d],r=!1;p[n]=e.getUniformLocation(u,n,r),p["offset"+n]=e.getUniformLocation(u,"offset"+n,r)}return{program:t,source:l,webGLProgram:u,uniformLocations:p,inShapeInfos:i,outShapeInfo:o,infLoc:c,nanLoc:h}}(this.gpgpu,e,u,c)),d=null!=this.activeTimers;let f;if(d&&(f=this.startTimer()),function(e,t,n,s,a){LT(t.inShapeInfos,n),LT([t.outShapeInfo],[s]);const i=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(i,o[0],o[1]):e.setOutputMatrixTexture(i,o[0],o[1]),e.setProgram(t.webGLProgram),1===_e().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach((n,s)=>{const a=t.program.variableNames[s],i=t.uniformLocations[a],o=t.uniformLocations["offset"+a];if(null!=i)if(n.isUniform)if(r.sizeFromShape(n.shape)<2)e.gl.uniform1f(i,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(i,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,i,s)}),null!=a&&a(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,p,u,c,s),l.forEach(e=>this.disposeIntermediateTensorInfo(e)),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)})),!_e().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===a){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,r,s=!1){const a=this.runWebGLProgram(e,t,n=n||t[0].dtype,r,s);return gi().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(_e().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=bi(()=>{if(!_e().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=_e().getBool("DEBUG");_e().set("DEBUG",!1);const t=this.abs(Ii(1e-8)).dataSync()[0];if(_e().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:a,texture:i,usage:o,isPacked:l}=t;if(null!=i)return;const u=null!=this.activeTimers;let c;u&&(c=r.now());let h=t.texShape;if(null==h&&(h=function(e,t=!1){let n=_e().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map((t,n)=>n>=e.length-2?r.nearestLargerEven(e[n]):e[n])).length&&(e=[2,e[0]])),2!==e.length){const t=r.squeezeShape(e);e=t.newShape}let s=r.sizeFromShape(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=XC(e);let n=2,a=2;return e.length&&([n,a]=YC(e)),s=t*(n/2)*(a/2),r.sizeToSquarishShape(s).map(e=>2*e)}return r.sizeToSquarishShape(s)}(n,l),t.texShape=h),null!=a){const e=JC(n);let i,o=h[1],p=h[0];const d=a instanceof Uint8Array;l?([o,p]=LC(h[0],h[1]),i=new gT(e,[p,o],d)):i=new mT(e,[p,o],d);const f=this.makeTensorInfo([p,o],s);this.texData.get(f.dataId).usage=d?DC.PIXELS:DC.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,p,a);const m=this.runWebGLProgram(i,[f],s,null,!0),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(f),this.texData.delete(m.dataId),t.values=null,u&&(this.uploadWaitMs+=r.now()-c)}else{const e=this.acquireTexture(h,o,s,l);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error("Unknown dtype "+t)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*r.bytesPerElement(t)}}a.isBrowser()&&ki("webgl",()=>new $$,2);class E${constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=p.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class A${constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=p.assertAndGetBroadcastShape(t,n);const a=this.outputShape.length;let i="";if(s)if(0===a||1===r.sizeFromShape(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i=`\n          ${_T(a)} coords = getOutputCoords();\n        `,1===a)i+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=f$("coords",a);i+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}function R$(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const F$={kernelName:Xt,backendName:"webgl",kernelFunc:R$};function D$(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),i=n.texData.get(a.dataId),o=R$({inputs:{x:r},backend:n});n.texData.get(o.dataId).complexParentRefCount++;const l=R$({inputs:{x:s},backend:n});return n.texData.get(l.dataId).complexParentRefCount++,i.complexTensorInfos={real:o,imag:l},a}const _$={kernelName:ut,backendName:"webgl",kernelFunc:D$},O$="return (a < 0.) ? b * a : a;",M$="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",L$={kernelName:tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:i}=s,o=n.makeTensorInfo([],"float32",r.createScalarValue(i,"float32")),l=_e().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new A$(M$,a.shape,o.shape):new E$(O$,a.shape,o.shape),u=n.runWebGLProgram(l,[a,o],a.dtype);return n.disposeIntermediateTensorInfo(o),u}},z$="return (a < 0.) ? b * a : a;",P$="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",B$={kernelName:Ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t,a=_e().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new A$(P$,r.shape,s.shape):new E$(z$,r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}};function W$({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:s,backend:a})=>{const{x:i}=s,o=a,l=r||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=_e().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new N$(i.shape,t):new k$(i.shape,e),o.runWebGLProgram(u,[i],l)}}function V$({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(r&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[r,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map(t=>{const[n,r]=t,s={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:r.dataId,dtype:r.dtype,shape:u.shape},i=new E$(e,l.shape,u.shape);return c.runWebGLProgram(i,[s,a],ps(n.dtype,r.dtype))}),a=D$({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const h=a||ps(l.dtype,u.dtype);if(c.shouldExecuteOnCPU([l,u])&&null!=s){const e=c.texData.get(l.dataId),t=c.texData.get(u.dataId),[n,r]=s(l.shape,u.shape,e.values,t.values,h),a=c.makeTensorInfo(r,h);return c.texData.get(a.dataId).values=n,a}let p;return p=_e().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new A$(t,l.shape,u.shape,n):new E$(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function U$(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?P$:z$;if("leakyrelu"===e)return t?M$:O$;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class G${constructor(e,t,n,r=!1,s=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const u=Math.ceil((r?e[1]:e[2])/2),c=r?"i * 2, rc.y":"rc.y, i * 2",h=s?"rc.z, i * 2":"i * 2, rc.z",p=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let f="",m="";i&&(f=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,m="result = activation(result);");const g=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let y="rc.x",b="rc.x";e[0]<t[0]?y=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(b=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${f}\n\n      const float sharedDimension = ${u}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${u}; i++) {\n          int batchA = ${y};\n          int batchB = ${b};\n          vec4 a = getMatrixA(batchA, ${c});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${d[0]});\n          result += (${p[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${g}\n\n        ${m}\n\n        setOutput(result);\n      }\n    `}}class H${constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=p.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const j$="return a * b;";function q$(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=p.upcastType(r.dtype,s.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),a=new H$("return areal * breal - aimag * bimag;",r.shape,s.shape),i=new H$("return areal * bimag + aimag * breal;",r.shape,s.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=D$({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([r,s])){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),[i,o]=e$(r.shape,s.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=_e().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new A$(j$,r.shape,s.shape):new E$(j$,r.shape,s.shape),n.runWebGLProgram(i,[r,s],a)}const K$={kernelName:Cn,backendName:"webgl",kernelFunc:q$};function X$(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:i}=s,o=n,l=r.sizeFromShape(a.shape),u=r.inferFromImplicitShape(i,l),c=r.sizeFromShape(u);r.assert(l===c,()=>`The new shape (${u}) has ${c} elements and the old shape (${a.shape}) has ${l} elements. The new shape and old shape must have the same number of elements.`);const h=o.texData.get(a.dataId);return!h.isPacked||QC(a.shape,u)||null!==h.texture&&QC(h.shape,u)?(o.incRef(a.dataId),{dataId:a.dataId,shape:u,dtype:a.dtype}):function(e,t,n){const r=[XC(e.shape),...YC(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[XC(t),...YC(t)],i=new g$(a,r),o=n.runWebGLProgram(i,[s],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(a,u,o)}const Y$={kernelName:Un,backendName:"webgl",kernelFunc:X$};class J${constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:i}=e;this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4;let u="sumValue += dot(values, ones);";if(null!=t){const e=1/t;u=`sumValue += dot(values * ${r.isInt(e)?e.toPrecision(2):e}, ones);`}let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Z${constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function Q$(e,t,n,r){const s=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=p.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let a=e;for(let i=0;i<s.length;i++){const{inSize:o,windowSize:l,outSize:u}=s[i];let c,h;c="mean"===n?0===i?new J$({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new J$({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new Z$({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=r.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(h)}return a}class eE{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];this.outputShape=n,this.rank=n.length;const r=_T(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let s=0;s<e.length;s++)r[e[s]]=n[s];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class tE{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let u=0;u<n.length;u++)n[u]=e[t[u]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=_T(this.rank),s=d$("rc",this.rank),a=new Array(this.rank);for(let u=0;u<t.length;u++)a[t[u]]=s[u];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function nE(e,t,n){const r=_e().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new tE(e.shape,t):new eE(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function rE(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s;return function(e,t,n,s){const a=e.shape.length,i=r.parseAxisParam(t,e.shape);let o=i;const l=p.getAxesPermutation(o,a),u=null!=l;let c=e;u&&(c=nE(e,l,s),o=p.getInnerMostAxes(o.length,a)),p.assertAxesAreInnerMostDims("sum",o,a);const[h,d]=p.computeOutAndReduceShapes(c.shape,o);let f=h;n&&(f=p.expandShapeToKeepDim(h,i));const m=r.sizeFromShape(d),g=X$({inputs:{x:c},attrs:{shape:[r.sizeFromShape(e.shape)/m,m]},backend:s}),y=Q$(g,ds(e.dtype),"sum",s),b=X$({inputs:{x:y},attrs:{shape:f},backend:s});return s.disposeIntermediateTensorInfo(g),s.disposeIntermediateTensorInfo(y),u&&s.disposeIntermediateTensorInfo(c),b}(a,i,o,n)}const sE={kernelName:lr,backendName:"webgl",kernelFunc:rE};function aE(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{perm:a}=r,i=n,o=new Array(s.shape.length);for(let u=0;u<o.length;u++)o[u]=s.shape[a[u]];let l;if(i.shouldExecuteOnCPU([s])){const e=i.texData.get(s.dataId),t=h$(e.values,s.shape,s.dtype,a,o);l=i.makeTensorInfo(o,s.dtype),i.texData.get(l.dataId).values=t}else l=nE(s,a,i);return l}const iE={kernelName:kr,backendName:"webgl",kernelFunc:aE};function oE({a:e,b:t,transposeA:n,transposeB:s,backend:a,bias:i=null,preluActivationWeights:o=null,leakyreluAlpha:l=0,activation:u=null}){const c=e.shape.length,h=t.shape.length,p=n?e.shape[c-2]:e.shape[c-1],d=s?t.shape[h-1]:t.shape[h-2],f=n?e.shape[c-1]:e.shape[c-2],m=s?t.shape[h-2]:t.shape[h-1],g=e.shape.slice(0,-2),y=t.shape.slice(0,-2),b=r.sizeFromShape(g),x=r.sizeFromShape(y);r.assert(c>=2&&h>=2&&(b===x||1===b||1===x),()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${g}) and (${y}).`);const w=(b>x?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([f,m]);r.assert(p===d,()=>`Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`);const k=n?[b,p,f]:[b,f,p],v=s?[x,m,d]:[x,d,m],I=X$({inputs:{x:e},backend:a,attrs:{shape:k}}),N=X$({inputs:{x:t},backend:a,attrs:{shape:v}}),S=[I,N],C=Math.max(b,x),T=n?I.shape[1]:I.shape[2],$=null!=i,E=null!=o,A="leakyrelu"===u,R=null!=u?U$(u,!0):null;let F;if((1===f||1===m)&&T>1e3&&!1===($||E||A||null!=R)){let e=I,t=N;n&&(e=aE({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),S.push(e)),s&&(t=aE({inputs:{x:N},backend:a,attrs:{perm:[0,2,1]}}),S.push(t));const r=1===m;let i=e;1!==m&&(i=X$({inputs:{x:e},backend:a,attrs:{shape:[C,T,1]}}),S.push(i));const o=1===m?2:1;let l=t;r&&(l=X$({inputs:{x:t},backend:a,attrs:{shape:[C,1,T]}}),S.push(l));const u=q$({inputs:{a:i,b:l},backend:a});F=rE({inputs:{x:u},backend:a,attrs:{axis:o,keepDims:!0}}),S.push(u)}else{const u=ps(e.dtype,t.dtype),c=new G$(k,v,[C,f,m],n,s,$,R,E,A),h=[I,N];if(null!=i&&h.push(i),E&&h.push(o),A){const e=a.makeTensorInfo([],"float32",r.createScalarValue(l,"float32"));h.push(e),S.push(e)}F=a.runWebGLProgram(c,h,u)}const D=X$({inputs:{x:F},backend:a,attrs:{shape:w}});S.push(F);for(const r of S)a.disposeIntermediateTensorInfo(r);return D}const lE={kernelName:Er,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=r;return oE({a:s,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},uE="return abs(x);",cE={kernelName:Pe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=a$(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let s;return s=_e().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new N$(r.shape,uE):new k$(r.shape,uE),n.runWebGLProgram(s,[r],r.dtype)}},hE=W$({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),pE={kernelName:Be,backendName:"webgl",kernelFunc:hE},dE=W$({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),fE={kernelName:We,backendName:"webgl",kernelFunc:dE},mE="return a + b;",gE=V$({opSnippet:mE,packedOpSnippet:mE,supportsComplex:!0,cpuKernelImpl:zT}),yE={kernelName:Ve,backendName:"webgl",kernelFunc:gE};class bE{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>"T"+t);const n=[];this.variableNames.forEach(e=>{n.push(`float v${e} = get${e}AtOutCoords();`)});const r=this.variableNames.map(e=>"v"+e).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class xE{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>"T"+t);const n=[];this.variableNames.forEach(e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)});const r=this.variableNames.map(e=>"v"+e).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const wE={kernelName:Ue,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,s=n;if(1===s.length)return R$({inputs:{x:s[0]},backend:r});if(s.length>_e().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(s.length/2),n=e({inputs:s.slice(0,t),backend:r}),a=e({inputs:s.slice(t),backend:r});return e({inputs:[n,a],backend:r})}const a=s.map(e=>e.dtype).reduce((e,t)=>ps(e,t)),i=s.map(e=>e.shape),o=_e().getBool("WEBGL_PACK")?new xE(s[0].shape,i):new bE(s[0].shape,i);return r.runWebGLProgram(o,s,a)}},kE={kernelName:Ge,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,l=a.shape.length,u=r.parseAxisParam(i,a.shape);let c=u;const h=p.getAxesPermutation(c,l);let d=a;null!=h&&(d=aE({inputs:{x:a},backend:n,attrs:{perm:h}}),c=p.getInnerMostAxes(c.length,l)),p.assertAxesAreInnerMostDims("all",c,l);const[f,m]=p.computeOutAndReduceShapes(d.shape,c),g=X$({inputs:{x:d},backend:n,attrs:{shape:[-1,r.sizeFromShape(m)]}}),y=Q$(g,g.dtype,"all",n);let b;return b=X$(o?{inputs:{x:y},backend:n,attrs:{shape:p.expandShapeToKeepDim(f,u)}}:{inputs:{x:y},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),null!=h&&n.disposeIntermediateTensorInfo(d),b}},vE={kernelName:He,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,l=a.shape.length,u=r.parseAxisParam(i,a.shape);let c=u;const h=p.getAxesPermutation(c,l);let d=a;null!=h&&(d=aE({inputs:{x:a},backend:n,attrs:{perm:h}}),c=p.getInnerMostAxes(c.length,l)),p.assertAxesAreInnerMostDims("any",c,l);const[f,m]=p.computeOutAndReduceShapes(d.shape,c),g=X$({inputs:{x:d},backend:n,attrs:{shape:[-1,r.sizeFromShape(m)]}}),y=Q$(g,g.dtype,"any",n);let b;return b=X$(o?{inputs:{x:y},backend:n,attrs:{shape:p.expandShapeToKeepDim(f,u)}}:{inputs:{x:y},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),null!=h&&n.disposeIntermediateTensorInfo(d),b}};class IE{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===t?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class NE{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,r.assert(e.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const a=Math.ceil(e[e.length-1]/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=_T(o),u=f$("coords",o);let c,h;if(1===a){h=o+1;const e=_T(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map(e=>"int "+e),m=f$("sourceLocR",h-1).concat("inIdx.r"),g=f$("sourceLocG",h-1).concat("inIdx.g"),y=f$("sourceLocB",h-1).concat("inIdx.b"),b=f$("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function SE(e,t,n,r=null){let s=t.shape[0],a=t.shape[1];null!=r&&(s=r.shape[0],a=r.shape[1]);const i=p.computeOptimalWindowSize(a),o={windowSize:i,inSize:a,batchSize:s,outSize:Math.ceil(a/i)},l=new IE(o,n,null==r),u=[t];null!=r&&u.push(r);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=SE(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function CE(e,t,n,r=null){const s=null!=r?r.shape:t.shape,a=p.computeOptimalWindowSize(s[s.length-1]),i=new NE(s,a,n,null==r),o=e.runWebGLProgram(i,null==r?[t]:[t,r],"int32");if(o.shape.length===t.shape.length){const r=CE(e,t,n,o);return e.disposeIntermediateTensorInfo(o),r}return o}function TE(e,t,n,s){const a=[n];if(p.assertAxesAreInnerMostDims("arg"+s.charAt(0).toUpperCase()+s.slice(1),a,t.shape.length),!_e().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[i,o]=p.computeOutAndReduceShapes(t.shape,a),l=r.sizeFromShape(o),u=X$({inputs:{x:t},backend:e,attrs:{shape:[-1,l]}});n.push(u);const c=SE(e,u,s);n.push(c);const h=X$({inputs:{x:c},backend:e,attrs:{shape:i}});return n.forEach(t=>e.disposeIntermediateTensorInfo(t)),h}return CE(e,t,s)}const $E={kernelName:je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;let o=r.parseAxisParam(i,a.shape);const l=p.getAxesPermutation(o,a.shape.length);let u=a;const c=[];null!=l&&(u=aE({inputs:{x:a},backend:n,attrs:{perm:l}}),c.push(u),o=p.getInnerMostAxes(o.length,u.shape.length)),p.assertAxesAreInnerMostDims("argMax",[o[0]],u.shape.length);const h=TE(n,u,o[0],"max");return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}},EE={kernelName:qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i}=s;let o=r.parseAxisParam(i,a.shape);const l=p.getAxesPermutation(o,a.shape.length);let u=a;const c=[];null!=l&&(u=aE({inputs:{x:a},backend:n,attrs:{perm:l}}),c.push(u),o=p.getInnerMostAxes(o.length,u.shape.length)),p.assertAxesAreInnerMostDims("argMin",[o[0]],u.shape.length);const h=TE(n,u,o[0],"min");return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}},AE=W$({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),RE={kernelName:Ke,backendName:"webgl",kernelFunc:AE},FE=W$({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),DE={kernelName:Xe,backendName:"webgl",kernelFunc:FE},_E=W$({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),OE={kernelName:Ye,backendName:"webgl",kernelFunc:_E},ME=V$({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),LE={kernelName:Ze,backendName:"webgl",kernelFunc:ME},zE=W$({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),PE={kernelName:Je,backendName:"webgl",kernelFunc:zE};class BE{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t;let m="0.0";if(f||(m="-1.0 / 1e-20"),n)return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`:`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let g=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(g="avgValue / count");const y=4*Math.floor(a/4),b=a%4,x=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${m};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${m});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${y}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${x}\n          }\n\n          int xC = xCCorner + ${y};\n          if (${1===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${x}\n          } else if (${2===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${x}\n          } else if (${3===b}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${x}\n          }\n        }\n        setOutput(${g});\n      }\n    `}}class WE{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(a/4),v=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const VE={kernelName:Qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;aT(a,"avgPool");const{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;r.assert(p.eitherStridesOrDilationsAreOne(o,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=p.computePool2DInfo(a.shape,i,o,1,l,u);if(1===c.filterWidth&&1===c.filterHeight&&r.arraysEqual(c.inShape,c.outShape))return R$({inputs:{x:a},backend:n});const h=new BE(c,"avg",!1);return n.runWebGLProgram(h,[a],"float32")}},UE={kernelName:tt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=r,c=p.computePool3DInfo(s.shape,a,i,[1,1,1],o,l,u),h=new WE(c,"avg",!1);return n.runWebGLProgram(h,[s],"float32")}};class GE{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.effectiveFilterHeight,n=e.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n      const float avgMultiplier = float(${1/(e.filterHeight*e.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t};\n            wR += ${e.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${n};\n            wC+= ${e.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class HE{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.effectiveFilterDepth,n=e.effectiveFilterHeight,r=e.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${t-1-e.padInfo.front}, ${n-1-e.padInfo.top}, ${r-1-e.padInfo.left});\n      const float avgMultiplier = float(${1/(e.filterDepth*e.filterHeight*e.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${t};\n            wD += ${e.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${e.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${n};\n              wR += ${e.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${r};\n                wC += ${e.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const jE={kernelName:nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=r,h=p.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),d=new HE(h);return n.runWebGLProgram(d,[s],i.dtype)}},qE={kernelName:et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a;aT([s,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=r,c=p.computePool2DInfo(i.shape,o,l,1,u),h=new GE(c);return n.runWebGLProgram(h,[s],i.dtype)}},KE={kernelName:rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:i,transposeB:o}=r;return oE({a:s,b:a,transposeA:i,transposeB:o,backend:n})}};class XE{constructor(e,t,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],p.assertAndGetBroadcastShape(e,t),p.assertAndGetBroadcastShape(e,n);let i="0.0";null!=r&&(p.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(p.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class YE{constructor(e,t,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],p.assertAndGetBroadcastShape(e,t),p.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=r&&(p.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(p.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const JE={kernelName:Gt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:a,variance:i,offset:o,scale:l}=e;r.assert(a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),r.assert(null==o||a.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),r.assert(null==l||a.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:u}=n;null==u&&(u=.001);const c=[s,a,i];let h=null;null!=o&&(h=o.shape,c.push(o));let p=null;null!=l&&(p=l.shape,c.push(l));const d=_e().getBool("WEBGL_PACK_NORMALIZATION")?new YE(s.shape,a.shape,i.shape,h,p,u):new XE(s.shape,a.shape,i.shape,h,p,u);return t.runWebGLProgram(d,c,c[0].dtype)}};class ZE{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=_T(this.rank),n=`uniform int start[${this.rank}];`,r=function(e){if(1===e)return"sourceLoc";if(e<=6)return QE.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map((e,t)=>`sourceLoc.${QE[t]} = start[${t}] + coords.${QE[t]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const QE=["x","y","z","w","u","v"];class eA{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=_T(this.rank),n=f$("coords",this.rank),r=f$("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}function tA(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:i,size:o}=s,[u,c]=l.parseSliceParams(a,i,o);if(l.assertParamsValid(a,u,c),0===r.sizeFromShape(c))return n.makeTensorInfo(c,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=i$(e.values,u,c,a.shape,a.dtype);return n.makeTensorInfo(c,a.dtype,t)}const{isPacked:h}=n.texData.get(a.dataId),p=l.isSliceContinous(a.shape,u,c);if(h||!p){const e=_e().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new eA(c):new ZE(c),t=e.getCustomSetupFunc(u);return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,s){const a=s.texData.get(e.dataId),i=s.makeTensorInfo(n,e.dtype),o=s.texData.get(i.dataId);Object.assign(o,a),o.shape=n,o.dtype=e.dtype;let u=l.computeFlatOffset(t,r.computeStrides(e.shape));a.slice&&(u+=a.slice.flatOffset),o.slice={flatOffset:u,origDataId:a.slice&&a.slice.origDataId||e.dataId};const c=s.dataRefCount.get(o.slice.origDataId)||1;return s.dataRefCount.set(o.slice.origDataId,c+1),i}(a,u,c,n)}const nA={kernelName:tr,backendName:"webgl",kernelFunc:tA},rA={kernelName:st,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:i,crops:o}=s;r.assert(a.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const l=i.reduce((e,t)=>e*t),u=p.getReshaped(a.shape,i,l),c=p.getPermuted(u.length,i.length),h=p.getReshapedPermuted(a.shape,i,l),d=p.getSliceBeginCoords(o,i.length),f=p.getSliceSize(h,o,i.length),m=[],g=X$({inputs:{x:a},backend:n,attrs:{shape:u}}),y=aE({inputs:{x:g},backend:n,attrs:{perm:c}}),b=X$({inputs:{x:y},backend:n,attrs:{shape:h}}),x=tA({inputs:{x:b},backend:n,attrs:{begin:d,size:f}});return m.push(g),m.push(y),m.push(b),m.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}},sA={kernelName:at,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i}=r,o=n.readSync(s.dataId),l=n.readSync(a.dataId),u=PT(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}},aA=V$({opSnippet:"return float(a != b);",dtype:"bool"}),iA={kernelName:$n,backendName:"webgl",kernelFunc:aA};function oA(e){const{inputs:t,backend:n}=e,{input:r}=t;return R$({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const lA={kernelName:Bn,backendName:"webgl",kernelFunc:oA},uA={kernelName:it,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:a}=t,{x:i}=n,{dtype:o}=a;if("complex64"===o){if("complex64"===i.dtype)return R$({inputs:{x:i},backend:s});const t=Zo(i.shape),n=e({inputs:{x:i},backend:s,attrs:{dtype:"float32"}}),r=D$({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===i.dtype){const t=oA({inputs:{input:i},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:o}});return s.disposeIntermediateTensorInfo(t),n}if(!r.hasEncodingLoss(i.dtype,o)){const e=R$({inputs:{x:i},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:o}}if("int32"===o)return function(e,t){const n=new k$(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(i,s);if("bool"===o){const e=s.makeTensorInfo([],"bool",r.getTypedArrayFromDType("bool",1)),t=aA({inputs:{a:i,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${i.dtype} to ${o}`)}},cA="return ceil(x);",hA=W$({opSnippet:cA,packedOpSnippet:cA,cpuKernelImpl:WT}),pA={kernelName:ot,backendName:"webgl",kernelFunc:hA};class dA{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class fA{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}const mA={kernelName:lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{clipValueMin:a,clipValueMax:i}=r;let o;o=_e().getBool("WEBGL_PACK_CLIP")?new fA(s.shape):new dA(s.shape);const l=o.getCustomSetupFunc(a,i);return n.runWebGLProgram(o,[s],s.dtype,l)}};class gA{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function yA(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const bA={kernelName:ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=n.texData.get(r.dataId),a=new gA(r.shape),i=[yA(r,s.complexTensorInfos.real),yA(r,s.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class xA{constructor(e){this.outputShape=[],this.outputShape=p.computeOutShape(e,1),this.variableNames=e.map((e,t)=>"T"+t);const t=new Array(e.length-1);t[0]=e[0][1];for(let r=1;r<t.length;r++)t[r]=t[r-1]+e[r][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let r=1;r<t.length;r++)n.push(`else if (yC < ${t[r]}) setOutput(getT${r}(yR, yC-${t[r-1]}));`);n.push(`else setOutput(getT${t.length}(yR, yC-${t[t.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class wA{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=p.computeOutShape(e,t);const n=this.outputShape,r=n.length,s=_T(r),a=f$("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map((e,t)=>"T"+t);const o=new Array(e.length-1);o[0]=e[0][t];for(let p=1;p<o.length;p++)o[p]=o[p-1]+e[p][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let p=1;p<o.length;p++){const e=o[p-1];h+=`\n        if (${l} < ${o[p]}  && ${l} >= ${o[p-1]}) {\n          return getChannel(\n            getT${p}(${kA(i,l,e)}),\n            vec2(${kA(u,l,e)}));\n        }`}const d=o[o.length-1];h+=`\n        return getChannel(\n          getT${o.length}(${kA(i,l,d)}),\n          vec2(${kA(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map(e=>"int "+e)}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function kA(e,t,n){const r=e.indexOf(t);return e.map((e,t)=>t===r?`${e} - ${n}`:e).join()}function vA(e){const{inputs:t,backend:n}=e,{input:r}=t;return R$({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const IA={kernelName:Jt,backendName:"webgl",kernelFunc:vA};function NA(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map(e=>oA({inputs:{input:e},backend:n})),s=e.map(e=>vA({inputs:{input:e},backend:n})),a=NA(r,t,n),i=NA(s,t,n),o=D$({inputs:{real:a,imag:i},backend:n});return r.forEach(e=>n.disposeIntermediateTensorInfo(e)),s.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}if("string"===r){const{tensors2D:s,outShape:a}=SA(e,t,n),i=s.map(e=>({vals:n.readSync(e.dataId),shape:e.shape})),o=VT(i,a,r,1===s[0].shape[0]),l=p.computeOutShape(e.map(e=>e.shape),t),u=n.makeTensorInfo(l,r,o);return s.forEach(e=>n.disposeIntermediateTensorInfo(e)),u}if(e.length>_e().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const r=Math.floor(e.length/2),s=NA(e.slice(0,r),t,n),a=NA(e.slice(r),t,n),i=NA([s,a],t,n);return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}if(_e().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const s=new wA(e.map(e=>e.shape),t);return n.runWebGLProgram(s,e,r)}const{tensors2D:s,outShape:a}=SA(e,t,n),i=new xA(s.map(e=>e.shape)),o=n.runWebGLProgram(i,s,r);s.forEach(e=>n.disposeIntermediateTensorInfo(e));const l=X$({inputs:{x:o},attrs:{shape:a},backend:n});return n.disposeIntermediateTensorInfo(o),l}function SA(e,t,n){const s=p.computeOutShape(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>X$({inputs:{x:e},attrs:{shape:[-1,r.sizeFromShape(e.shape.slice(t))]},backend:n})),outShape:s}}function CA(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,i=r.parseAxisParam(a,t[0].shape)[0],o=p.computeOutShape(t.map(e=>e.shape),i);if(0===r.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const l=t.filter(e=>r.sizeFromShape(e.shape)>0);if(1===l.length)return R$({inputs:{x:l[0]},backend:n});const u=l.map(e=>e.shape);return p.assertParamsConsistent(u,i),NA(l,i,n)}const TA={kernelName:ht,backendName:"webgl",kernelFunc:CA};class $A{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class EA{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class AA{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=s*r,m=oT(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let w=0;w<=1;w++)for(let n=0;n<=1;n++)x+=`\n          blockIndex = rc.y + ${n};\n          pos = rc.x + ${w};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*w+n}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*w+n}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function RA({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape,c=s.texData.get(e.dataId),h="channelsLast"===n.dataFormat;let p;const d=[],f=u[2]%2!=0&&!!c.isPacked;if((1!=u[0]*u[1]*u[2]&&1!==n.outChannels||!(n.inChannels>1e3))&&_e().getBool("WEBGL_LAZILY_UNPACK")&&_e().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&f){const f={dataId:e.dataId,shape:[1,h?u[0]*u[1]*(u[2]+1):u[0]*u[2]*(u[3]+1),n.inChannels],dtype:e.dtype},m=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,r.assert(QC(c.shape,f.shape),()=>`packed reshape ${c.shape} to ${f.shape} isn't free`);const g=X$({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});d.push(g);const y=oE({a:f,b:g,backend:s,transposeA:!1,transposeB:!1,bias:a,activation:l,preluActivationWeights:i,leakyreluAlpha:o}),b=s.texData.get(y.dataId);r.assert(b.isPacked,()=>"batchMatMul result is expected to be packed"),c.shape=m,b.shape=n.outShape,p=R$({inputs:{x:y},backend:s}),p.shape=n.outShape,d.push(y)}else{const r=X$({inputs:{x:e},backend:s,attrs:{shape:[1,h?u[0]*u[1]*u[2]:u[0]*u[2]*u[3],n.inChannels]}}),c=X$({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),f=oE({a:r,b:c,transposeA:!1,transposeB:!1,backend:s,bias:a,activation:l,preluActivationWeights:i,leakyreluAlpha:o});p=X$({inputs:{x:f},backend:s,attrs:{shape:n.outShape}}),d.push(r),d.push(c),d.push(f)}for(const r of d)s.disposeIntermediateTensorInfo(r);return p}function FA({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const{filterWidth:u,filterHeight:c,inChannels:h,outWidth:p,outHeight:d,dataFormat:f}=n,m="channelsLast"===f,g=u*c*h,y=d*p,b=[g,y],x=[],w=X$({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),k=X$({inputs:{x:t},backend:s,attrs:{shape:[1,g,r.sizeFromShape(t.shape)/g]}});x.push(w),x.push(k);const v=new AA(b,w.shape,n),I=s.runWebGLProgram(v,[w],"float32"),N=X$({inputs:{x:I},backend:s,attrs:{shape:[1,b[0],b[1]]}});x.push(I),x.push(N);const S=null!=a,C=null!=i,T="leakyrelu"===l,$=l?U$(l,!0):null,E=new G$(N.shape,k.shape,[1,y,n.outChannels],!0,!1,S,$,C,T),A=[N,k];if(a&&A.push(a),C&&A.push(i),T){const e=s.makeTensorInfo([],"float32",r.createScalarValue(o,"float32"));A.push(e),x.push(e)}const R=s.runWebGLProgram(E,A,"float32"),F=X$({inputs:{x:R},backend:s,attrs:{shape:m?[1,d,p,n.outChannels]:[1,n.outChannels,d,p]}});x.push(R);for(const r of x)s.disposeIntermediateTensorInfo(r);return F}const DA={kernelName:pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=r,h=p.convertConv2DDataFormat(l),d=p.computeConv2DInfo(s.shape,a.shape,i,u,o,c,!1,h);let f;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(_e().getBool("WEBGL_CONV_IM2COL")&&1===s.shape[0])f=FA({x:s,filter:a,convInfo:d,backend:n});else{const e=new $A(d);f=n.runWebGLProgram(e,[s,a],"float32")}else f=RA({x:s,filter:a,convInfo:d,backend:n});const m=X$({inputs:{x:f},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(f),m}};class _A{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${e.strideHeight} - ${e.padInfo.top};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${e.strideWidth} - ${e.padInfo.left};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${"channelsLast"===e.dataFormat}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class OA{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r="channelsLast"===e.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${r?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${r?1:2}], coords[${r?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${r}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class MA{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${e.strideDepth} - ${e.padInfo.front};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${e.strideHeight} - ${e.padInfo.top};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${e.strideWidth} - ${e.padInfo.left};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class LA{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${t-1-e.padInfo.front}, ${n-1-e.padInfo.top}, ${r-1-e.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${e.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const zA={kernelName:dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=r,h=p.convertConv2DDataFormat(l),d=p.computeConv2DInfo(s.shape,c,i,1,o,u,!1,h),f=new _A(d);return n.runWebGLProgram(f,[s,a],"float32")}},PA={kernelName:ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=r,h=p.convertConv2DDataFormat(u),d=p.computeConv2DInfo(i,a.shape,o,1,l,c,!1,h),f=new OA(d);return n.runWebGLProgram(f,[s,a],"float32")}},BA={kernelName:mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:l}=r,u=p.computeConv3DInfo(s.shape,a.shape,i,l,o),c=new EA(u);return n.runWebGLProgram(c,[s,a],"float32")}},WA={kernelName:gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,filterShape:l}=r,u=p.computeConv3DInfo(s.shape,l,i,1,o),c=new MA(u);return n.runWebGLProgram(c,[s,a],"float32")}},VA={kernelName:yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:i,strides:o,inputShape:l}=r,u=p.computeConv3DInfo(l,a.shape,o,1,i),c=new LA(u);return n.runWebGLProgram(c,[s,a],"float32")}},UA=W$({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),GA={kernelName:bt,backendName:"webgl",kernelFunc:UA},HA=W$({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),jA={kernelName:xt,backendName:"webgl",kernelFunc:HA};class qA{constructor(e,t,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===r?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+d],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const KA={kernelName:kt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=r,c=new qA(s.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[s,a,i],"float32")}};class XA{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const r=e.length,s=t?"0.0":`getX(${YA(r,"coords")})`,a=e[e.length-1];let i="",o="";t?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?"end + pow2 < "+a:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${_T(r)} coords = getOutputCoords();\n        int end = ${JA(r,"coords")};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${JA(r,"coords")} = idx;\n          val += getX(${YA(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function YA(e,t){if(1===e)return""+t;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function JA(e,t){if(1===e)return""+t;if(2===e)return t+".y";if(3===e)return t+".z";if(4===e)return t+".w";throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const ZA={kernelName:wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r,l=s.shape.length,u=p.getAxesPermutation([a],l);let c=s;null!=u&&(c=aE({inputs:{x:s},backend:n,attrs:{perm:u}}));const h=p.getInnerMostAxes(1,l)[0];if(h!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${s.shape.length-1} but got axis=`+a);const d=s.shape[h];let f=R$({inputs:{x:c},backend:n});for(let p=0;p<=Math.ceil(Math.log2(d))-1;p++){const e=new XA(c.shape,!1,o),t=e.getCustomSetupFunc(p),r=f;f=n.runWebGLProgram(e,[f],f.dtype,t),n.disposeIntermediateTensorInfo(r)}if(i){const e=new XA(c.shape,i,o),t=f;f=n.runWebGLProgram(e,[f],f.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=u){const e=aE({inputs:{x:f},backend:n,attrs:{perm:p.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(c),e}return f}},QA={kernelName:vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i,binaryOutput:o}=r;if(1===s.shape.length){const e=n.readSync(s.dataId),t=n.readSync(a.dataId),r=PT(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,r)}if(2===s.shape.length){const e=n.bufferSync(s),t=n.bufferSync(a),r=BT(e,t,i,o);return n.makeTensorInfo(r.shape,a.dtype,r.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+s.shape.length+".")}};class eR{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const tR={kernelName:It,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:i,dataFormat:o}=s;r.assert(i>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+i);const l=a.shape[0],u=("NHWC"===o?a.shape[1]:a.shape[2])*i,c=("NHWC"===o?a.shape[2]:a.shape[3])*i,h=("NHWC"===o?a.shape[3]:a.shape[1])/(i*i),p=new eR("NHWC"===o?[l,u,c,h]:[l,h,u,c],i,o);return n.runWebGLProgram(p,[a],a.dtype)}};class nR{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${a}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class rR{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const i=e.inHeight,o=e.inWidth,l=e.padInfo.top,u=e.padInfo.left,c=e.strideHeight,h=e.strideWidth,p=e.dilationHeight,d=e.dilationWidth,f=e.filterHeight,m=e.filterWidth,g=m;let y="int xR; int xC; int xCOffset;";for(let r=0;r<f;r++)for(let e=0;e<m;e++)y+=`\n          vec4 xTexelR${r}C${2*e} = vec4(0.);\n          vec4 wR${r}C${e} = vec4(0.);\n          vec4 xR${r}C${e} = vec4(0.);`;for(let k=0;k<f;k++)for(let e=0;e<g;e++){const t=2*e;if(y+=`\n          xR = xRCorner + ${k*p};\n          xC = xCCorner + ${t*d};\n        `,1===h){if(t<m&&(y+=u%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${i} && xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${k}C${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${o}) {\n                    xTexelR${k}C${t}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${k}C${t} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${i} && xCOffset >= 0 && xCOffset < ${o}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${o}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${k}C${t} = vec4(previous.zw, xTexelR${k}C${t}.xy);\n                } else {\n                  xR${k}C${t} = vec4(0, 0, xTexelR${k}C${t}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${i} && xC >= 0 && xC < ${o}) {\n                  xTexelR${k}C${t} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${k}C${t} = vec4(0.);\n                }\n\n                xR${k}C${t} = xTexelR${k}C${t};\n              `,t+1<m)){const e=u%2==0?r.nearestLargerEven(d):d;d%2==0&&u%2==1||d%2!=0&&u%2!=1?(y+=`\n                  xCOffset = xC + ${u%2} + ${e};\n\n                  if(xR >= 0 && xR < ${i} &&\n                    xCOffset >= 0 && xCOffset < ${o}) {\n                    xTexelR${k}C${t+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,d>1&&(y+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${i} &&\n                      xCOffset >= 0 && xCOffset < ${o}) {\n                      xTexelR${k}C${t} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${k}C${t} = vec4(0.);\n                    }\n                  `),y+=`\n                  xR${k}C${t+1} = vec4(\n                    xTexelR${k}C${t}.zw, xTexelR${k}C${t+2}.xy);\n                `):y+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${i} &&\n                    xCOffset >= 0 && xCOffset < ${o}) {\n                    xTexelR${k}C${t+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${k}C${t+1} = xTexelR${k}C${t+2};\n                `}}else t<m&&(y+=`\n              if(xR >= 0 && xR < ${i}) {\n            `,u%2==1?(y+=`\n                xCOffset = xC + 1 - ${h};\n                if(xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${k}C${t} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${k}C${t} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${o}) {\n                  xTexelR${k}C${t+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${k}C${t+2} = vec4(0.);\n                }\n\n                xR${k}C${t} = vec4(\n                  xTexelR${k}C${t}.zw, xTexelR${k}C${t+2}.zw);\n              `,t+1<m&&(y+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${h};\n                  if(xCOffset >= 0 && xCOffset < ${o}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${k}C${t+1} = vec4(xTexelR${k}C${t+2}.xy, final.xy);\n                `)):(y+=`\n                if(xC >= 0 && xC < ${o}) {\n                  xTexelR${k}C${t} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${k}C${t} = vec4(0.);\n                }\n\n                xCOffset = xC + ${h};\n                if(xCOffset >= 0 && xCOffset < ${o}) {\n                  xTexelR${k}C${t+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${k}C${t+2} = vec4(0.);\n                }\n\n                xR${k}C${t} = vec4(\n                  xTexelR${k}C${t}.xy, xTexelR${k}C${t+2}.xy);\n              `,t+1<m&&(y+=`\n                  xR${k}C${t+1} = vec4(\n                    xTexelR${k}C${t}.zw, xTexelR${k}C${t+2}.zw);\n                `)),y+="}");t<m&&(y+=`\n            vec4 wTexelR${k}C${t} = getW(${k}, ${t}, d1, q);\n            wR${k}C${t} = vec4(wTexelR${k}C${t}.xz, wTexelR${k}C${t}.xz);\n          `,t+1<m&&(y+=`\n              vec4 wTexelR${k}C${t+1} = getW(${k}, ${t+1}, d1, q);\n              wR${k}C${t+1} =\n                vec4(wTexelR${k}C${t+1}.xz, wTexelR${k}C${t+1}.xz);`))}for(let r=0;r<f;r++)for(let e=0;e<m;e++)y+=`dotProd += xR${r}C${e} * wR${r}C${e};`;let b="",x="";n&&(b=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,x="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${c}, ${h});\n      const ivec2 pads = ivec2(${l}, ${u});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${y}\n\n        vec4 result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}const sR={kernelName:Nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i}=t,{strides:o,pad:l,dilations:u,dimRoundingMode:c}=s;let h=u;null==h&&(h=[1,1]),r.assert(p.eitherStridesOrDilationsAreOne(o,h),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`);const d=p.computeConv2DInfo(a.shape,i.shape,o,h,l,c,!0);let f;return f=_e().getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels==1?new rR(d):new nR(d),n.runWebGLProgram(f,[a,i],"float32")}};class aR{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${e.outChannels/e.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${e.strideHeight} - ${e.padInfo.top};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${e.strideWidth} - ${e.padInfo.left};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class iR{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${r}; dm++) {\n              int d2 = d1 * ${r} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const oR={kernelName:St,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=r,h=p.computeConv2DInfo(s.shape,c,i,o,l,u,!0),d=new aR(h);return n.runWebGLProgram(d,[s,a],"float32")}},lR={kernelName:Ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=r,h=p.computeConv2DInfo(c,a.shape,i,o,l,u,!0),d=new iR(h);return n.runWebGLProgram(d,[s,a],"float32")}};class uR{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const cR={kernelName:Tt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=[...s.shape,...s.shape],i=r.sizeFromShape(s.shape),o=X$({inputs:{x:s},backend:n,attrs:{shape:[i]}}),l=new uR(i),u=n.runWebGLProgram(l,[o],o.dtype),c=X$({inputs:{x:u},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),c}};class hR{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:s,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=r;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const pR={kernelName:$t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:l}=r,u=p.computeDilation2DInfo(s.shape,a.shape,i,o,"NHWC",l);let c;const h=new hR(u);c=n.runWebGLProgram(h,[s,a],"float32");const d=X$({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),d}},dR=W$({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),fR={kernelName:Ft,backendName:"webgl",kernelFunc:dR},mR={kernelName:Dt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:s}=t,a=_e().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new A$("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,s.shape):new E$("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}},gR=V$({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"}),yR={kernelName:Ot,backendName:"webgl",kernelFunc:gR},bR=W$({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${p.ERF_P};\n  float a1 = ${p.ERF_A1};\n  float a2 = ${p.ERF_A2};\n  float a3 = ${p.ERF_A3};\n  float a4 = ${p.ERF_A4};\n  float a5 = ${p.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),xR={kernelName:_t,backendName:"webgl",kernelFunc:bR},wR="return exp(x);",kR=W$({opSnippet:wR,packedOpSnippet:wR,cpuKernelImpl:UT}),vR={kernelName:Mt,backendName:"webgl",kernelFunc:kR};function IR(e){const{inputs:t,attrs:n,backend:s}=e,{dim:a}=n,{input:i}=t,o=i.shape.length,l=i.shape.slice();let u=a;return a<0&&(r.assert(-(o+1)<=a,()=>`Axis must be in the interval [${-(o+1)}, ${o}]`),u=o+a+1),l.splice(u,0,1),X$({inputs:{x:i},backend:s,attrs:{shape:l}})}const NR={kernelName:Lt,backendName:"webgl",kernelFunc:IR},SR="return exp(x) - 1.0;",CR=W$({opSnippet:SR,packedOpSnippet:SR,cpuKernelImpl:GT}),TR={kernelName:zt,backendName:"webgl",kernelFunc:CR};class $R{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const s=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?r+".0":"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function ER(e,t,n){const s=n.texData.get(e.dataId),a=r.sizeFromShape(e.shape),i=e.shape[e.shape.length-1],o=X$({inputs:{x:e},backend:n,attrs:{shape:[a/i,i]}}).shape,l=new $R("real",o,t),u=new $R("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,"float32"),p=n.runWebGLProgram(u,c,"float32"),d=D$({inputs:{real:h,imag:p},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p);const f=X$({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(f),f}const AR={kernelName:Pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return ER(r,!1,n)}};class RR{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}function FR(e){const{backend:t,attrs:n}=e,{shape:s,value:a}=n;let{dtype:i}=n;if(i=i||r.inferDtype(a),"string"===i){const e=r.getArrayFromDType(i,r.sizeFromShape(s));return e.fill(a),t.makeTensorInfo(s,i,e)}{const e=new RR(s,a),n=e.getCustomSetupFunc(a);return t.runWebGLProgram(e,[],i,n)}}const DR={kernelName:Bt,backendName:"webgl",kernelFunc:FR};class _R{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const OR={kernelName:Wt,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new _R(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}},MR="return floor(x);",LR=W$({opSnippet:MR,packedOpSnippet:MR,cpuKernelImpl:HT}),zR={kernelName:Vt,backendName:"webgl",kernelFunc:LR},PR=V$({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),BR={kernelName:Ut,backendName:"webgl",kernelFunc:PR};class WR{constructor(e){this.variableNames=["A"];const t=oT(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class VR{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=oT(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const UR={kernelName:Tr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:a}=r,i="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,l="undefined"!=typeof ImageBitmap&&s instanceof ImageBitmap,[u,c]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],h=[c,u],p=[c,u,a];(o||i||l)&&(null==GR&&(GR=document.createElement("canvas").getContext("2d")),GR.canvas.width=u,GR.canvas.height=c,GR.drawImage(s,0,0,u,c),s=GR.canvas);const d=n.makeTensorInfo(h,"int32");n.texData.get(d.dataId).usage=DC.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),s);const f=_e().getBool("WEBGL_PACK")?new VR(p):new WR(p),m=n.runWebGLProgram(f,[d],"int32");return n.disposeData(d.dataId),m}};let GR;const HR={kernelName:Ar,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i,bias:o,preluActivationWeights:l}=t,{strides:u,pad:c,dataFormat:h,dilations:d,dimRoundingMode:f,activation:m,leakyreluAlpha:g}=s,y=p.convertConv2DDataFormat(h),b=p.computeConv2DInfo(a.shape,i.shape,u,d,c,f,!1,y);let x;const w=[];if(1!==b.filterHeight||1!==b.filterWidth||1!==b.dilationHeight||1!==b.dilationWidth||1!==b.strideHeight||1!==b.strideWidth||"SAME"!==b.padInfo.type&&"VALID"!==b.padInfo.type)if(_e().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])x=FA({x:a,filter:i,convInfo:b,backend:n,bias:o,activation:m,preluActivationWeights:l,leakyreluAlpha:g});else{const e=null!=o,t=null!=l,s="leakyrelu"===m,u=m?U$(m,!1):null,c=new $A(b,e,u,t,s),h=[a,i];if(o&&h.push(o),l&&h.push(l),s){const e=n.makeTensorInfo([],"float32",r.createScalarValue(g,"float32"));h.push(e),w.push(e)}x=n.runWebGLProgram(c,h,"float32")}else x=RA({x:a,filter:i,convInfo:b,backend:n,bias:o,activation:m,preluActivationWeights:l,leakyreluAlpha:g});const k=X$({inputs:{x:x},backend:n,attrs:{shape:b.outShape}});return w.push(x),w.forEach(e=>n.disposeIntermediateTensorInfo(e)),k}},jR={kernelName:Rr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:i,bias:o,preluActivationWeights:l}=t,{strides:u,pad:c,dilations:h,dimRoundingMode:d,activation:f,leakyreluAlpha:m}=s,g=[];let y=h;null==y&&(y=[1,1]),r.assert(p.eitherStridesOrDilationsAreOne(u,y),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${y}'`);const b=p.computeConv2DInfo(a.shape,i.shape,u,y,c,d,!0),x=_e().getBool("WEBGL_PACK_DEPTHWISECONV")&&b.strideWidth<=2&&b.outChannels/b.inChannels==1,w=f?U$(f,x):null,k=[a,i],v=null!=o,I=null!=l,N="leakyrelu"===f;if(v&&k.push(o),I&&k.push(l),N){const e=n.makeTensorInfo([],"float32",r.createScalarValue(m,"float32"));k.push(e),g.push(e)}let S;S=x?new rR(b,v,w,I,N):new nR(b,v,w,I,N);const C=n.runWebGLProgram(S,k,"float32");return g.forEach(e=>n.disposeIntermediateTensorInfo(e)),C}};class qR{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const r=_T(t.length),s=_T(n.length);this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${this.sliceDim>1?"strides[j]":"strides"};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const KR={kernelName:jt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,i=a.shape,o=i[i.length-1],[l,u,c,h]=p.prepareAndValidate(s,a),d=X$({inputs:{x:a},backend:n,attrs:{shape:[u,o]}}),f=X$({inputs:{x:s},backend:n,attrs:{shape:[r.sizeFromShape(s.shape)/c,c]}}),m=new qR(o,h,[u,c]),g=n.runWebGLProgram(m,[f,d],f.dtype),y=X$({inputs:{x:g},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),y}};class XR{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=_T(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let s=0;s<e.length;s++)r.push(2===s?"int(getIndices(resRC.x, resRC.z))":""+n[s]);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}const YR={kernelName:Ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:i}=t,{axis:o,batchDims:l}=s,u=r.parseAxisParam(o,a.shape)[0],c=p.segment_util.collectGatherOpShapeInfo(a,i,u,l),h=r.sizeFromShape(i.shape),d=[],f=X$({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),m=X$({inputs:{x:i},backend:n,attrs:{shape:[c.batchSize,h/c.batchSize]}});d.push(f),d.push(m);const g=[c.batchSize,c.outerSize,h/c.batchSize,c.sliceSize];if(n.shouldExecuteOnCPU([a,i])||"string"===a.dtype){const e=n.bufferSync(m),t=n.bufferSync(f),r=jT(t,e,g);return d.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(c.outputShape,r.dtype,r.values)}const y=new XR(f.shape,g),b=n.runWebGLProgram(y,[f,m],f.dtype);d.push(b);const x=X$({inputs:{x:b},backend:n,attrs:{shape:c.outputShape}});return d.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}},JR=V$({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:qT,dtype:"bool"}),ZR={kernelName:qt,backendName:"webgl",kernelFunc:JR},QR=V$({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"}),eF={kernelName:Kt,backendName:"webgl",kernelFunc:QR},tF={kernelName:Yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return ER(r,!0,n)}},nF=W$({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),rF={kernelName:Zt,backendName:"webgl",kernelFunc:nF},sF=W$({opSnippet:"return float(isinf(x));",dtype:"bool"}),aF={kernelName:Qt,backendName:"webgl",kernelFunc:sF},iF=W$({opSnippet:"return float(isnan(x));",dtype:"bool"}),oF={kernelName:en,backendName:"webgl",kernelFunc:iF},lF=V$({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:KT,dtype:"bool"}),uF={kernelName:nn,backendName:"webgl",kernelFunc:lF},cF=V$({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"}),hF={kernelName:rn,backendName:"webgl",kernelFunc:cF},pF={kernelName:sn,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,i=XT(r,s,a);return t.makeTensorInfo([i.length],"float32",i)}},dF=W$({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:YT}),fF={kernelName:an,backendName:"webgl",kernelFunc:dF},mF=W$({opSnippet:"return log(1.0 + x);"}),gF={kernelName:on,backendName:"webgl",kernelFunc:mF},yF=V$({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),bF={kernelName:ln,backendName:"webgl",kernelFunc:yF},xF=W$({opSnippet:"return float(!(x >= 1.0));"}),wF={kernelName:un,backendName:"webgl",kernelFunc:xF},kF=V$({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),vF={kernelName:cn,backendName:"webgl",kernelFunc:kF};class IF{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class NF{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const SF={kernelName:hn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=r,u=_e().getBool("WEBGL_PACK_NORMALIZATION")?new NF(s.shape,a,i,o,l):new IF(s.shape,a,i,o,l);return n.runWebGLProgram(u,[s],s.dtype)}};class CF{constructor(e,t,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const TF={kernelName:pn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=r,h=new CF(s.shape,o,l,u,c);return n.runWebGLProgram(h,[s,a,i],s.dtype)}};function $F(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:i,keepDims:o}=s,l=a.shape.length,u=r.parseAxisParam(i,a.shape);let c=u;const h=p.getAxesPermutation(c,l),d=null!=h,f=n.shouldExecuteOnCPU([a]);let m=a;if(d){if(f){const e=n.texData.get(m.dataId).values,t=new Array(l);for(let n=0;n<t.length;n++)t[n]=a.shape[h[n]];const r=h$(e,a.shape,a.dtype,h,t);m=n.makeTensorInfo(t,a.dtype),n.texData.get(m.dataId).values=r}else m=nE(a,h,n);c=p.getInnerMostAxes(c.length,l)}p.assertAxesAreInnerMostDims("max",c,l);const[g,y]=p.computeOutAndReduceShapes(m.shape,c);let b,x=g;if(o&&(x=p.expandShapeToKeepDim(g,u)),f){const e=n.texData.get(m.dataId),t=JT(e.values,r.sizeFromShape(y),x,a.dtype);b=n.makeTensorInfo(x,a.dtype),n.texData.get(b.dataId).values=t}else b=function(e,t,n,s){const a=r.sizeFromShape(t),i=X$({inputs:{x:e},attrs:{shape:[r.sizeFromShape(e.shape)/a,a]},backend:s}),o=Q$(i,e.dtype,"max",s),l=X$({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(o),l}(m,y,x,n);return d&&n.disposeIntermediateTensorInfo(m),b}const EF={kernelName:dn,backendName:"webgl",kernelFunc:$F},AF=V$({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:ZT}),RF={kernelName:fn,backendName:"webgl",kernelFunc:AF},FF={kernelName:mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;aT(a,"maxPool");const{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;r.assert(p.eitherStridesOrDilationsAreOne(o,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const c=p.computePool2DInfo(a.shape,i,o,1,l,u);if(1===c.filterWidth&&1===c.filterHeight&&r.arraysEqual(c.inShape,c.outShape))return R$({inputs:{x:a},backend:n});const h=new BE(c,"max",!1);return n.runWebGLProgram(h,[a],a.dtype)}},DF={kernelName:yn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=r,c=p.computePool3DInfo(s.shape,a,i,[1,1,1],o,u,l),h=new WE(c,"max",!1);return n.runWebGLProgram(h,[s],s.dtype)}};class _F{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.effectiveFilterHeight,n=e.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${t-1-e.padInfo.top}, ${n-1-e.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t};\n          wR += ${e.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${t*n-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${n} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class OF{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.effectiveFilterDepth,n=e.effectiveFilterHeight,r=e.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${t-1-e.padInfo.front}, ${n-1-e.padInfo.top}, ${r-1-e.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${t};\n           wD += ${e.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${e.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${n};\n              wR += ${e.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${e.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${r};\n                wC += ${e.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${e.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${t*n*r-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${n} * ${r} +\n                  wR * ${r} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const MF={kernelName:bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=r,h=p.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),d=new WE(h,"max",!0),f=n.runWebGLProgram(d,[i],i.dtype),m=new OF(h),g=n.runWebGLProgram(m,[s,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}},LF={kernelName:gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:i}=t,o=a;aT([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=r,d=p.computePool2DInfo(o.shape,l,u,1,c,h),f=new BE(d,"max",!0),m=n.runWebGLProgram(f,[o],o.dtype),g=new _F(d),y=n.runWebGLProgram(g,[s,m],o.dtype);return n.disposeIntermediateTensorInfo(m),y}},zF={kernelName:xn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:i,pad:o,includeBatchInIndex:l}=t,u=n;r.assert(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const c=[1,1];r.assert(p.eitherStridesOrDilationsAreOne(i,c),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);const h=p.computePool2DInfo(s.shape,a,i,c,o),[d,f]=function(e,t,n,r){let s=new BE(n,"max",!1);const a=r.runWebGLProgram(s,[e],"float32");return s=new BE(n,"max",!0,!0,t),[a,r.runWebGLProgram(s,[e],"float32")]}(s,l,h,u);return[d,f]}},PF={kernelName:wn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:a,axis:i}=t,o=n,l=s.shape.length,u=r.parseAxisParam(i,s.shape);let c=u;const h=p.getAxesPermutation(c,l),d=null!=h,f=o.shouldExecuteOnCPU([s]),m=[];let g=s;if(d){if(f){const e=o.texData.get(g.dataId).values,t=new Array(l);for(let r=0;r<t.length;r++)t[r]=s.shape[h[r]];const n=h$(e,s.shape,s.dtype,h,t);g=o.makeTensorInfo(t,s.dtype),o.texData.get(g.dataId).values=n}else g=nE(s,h,o);m.push(g),c=p.getInnerMostAxes(c.length,l)}p.assertAxesAreInnerMostDims("sum",c,l);const[y,b]=p.computeOutAndReduceShapes(g.shape,c);let x=y;a&&(x=p.expandShapeToKeepDim(y,u));const w=function(e,t,n,s){const a=r.sizeFromShape(t),i=X$({inputs:{x:e},attrs:{shape:[r.sizeFromShape(e.shape)/a,a]},backend:s}),o=Q$(i,"float32","mean",s),l=X$({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(o),l}(g,b,x,o);for(const r of m)o.disposeIntermediateTensorInfo(r);return w}},BF={kernelName:kn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,l=a.shape.length,u=r.parseAxisParam(i,a.shape);let c=u;const h=p.getAxesPermutation(c,l);let d=a;null!=h&&(d=aE({inputs:{x:a},backend:n,attrs:{perm:h}}),c=p.getInnerMostAxes(c.length,a.shape.length)),p.assertAxesAreInnerMostDims("min",c,l);const[f,m]=p.computeOutAndReduceShapes(d.shape,c),g=X$({inputs:{x:d},backend:n,attrs:{shape:[-1,r.sizeFromShape(m)]}}),y=Q$(g,g.dtype,"min",n);let b;return b=X$(o?{inputs:{x:y},backend:n,attrs:{shape:p.expandShapeToKeepDim(f,u)}}:{inputs:{x:y},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),null!=h&&n.disposeIntermediateTensorInfo(d),b}},WF=V$({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:QT}),VF={kernelName:vn,backendName:"webgl",kernelFunc:WF};class UF{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,s=_T(r),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),l="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class GF{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,s=_T(r),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=f$("rc",r),l=f$("source",r),u=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===r){const e=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[r-2]} += 1;\n        if(${o[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[r-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const HF={kernelName:In,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:s,mode:a}=n,i=_e().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new GF(r.shape,s,a):new UF(r.shape,s,a);return t.runWebGLProgram(i,[r],r.dtype)}},jF=V$({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),qF={kernelName:Nn,backendName:"webgl",kernelFunc:jF};class KF{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}const XF=V$({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),YF={kernelName:Rt,backendName:"webgl",kernelFunc:XF},JF="return a - b;",ZF=V$({opSnippet:JF,packedOpSnippet:JF,supportsComplex:!0,cpuKernelImpl:l$}),QF={kernelName:fr,backendName:"webgl",kernelFunc:ZF};function eD(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:i}=s,o=r.parseAxisParam([i],a.shape),l=$F({inputs:{x:a},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),u=p.expandShapeToKeepDim(l.shape,o),c=X$({inputs:{x:l},backend:n,attrs:{shape:u}}),h=ZF({inputs:{a:a,b:c},backend:n}),d=kR({inputs:{x:h},backend:n}),f=rE({inputs:{x:d},backend:n,attrs:{axis:o,keepDims:!1}}),m=X$({inputs:{x:f},backend:n,attrs:{shape:u}}),g=XF({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const tD={kernelName:hr,backendName:"webgl",kernelFunc:eD},nD={kernelName:Sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:i,normalized:o}=r,l=o?s:eD({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),u=new KF(l.shape[0],l.shape[1],a),c=u.getCustomSetupFunc(i),h=n.runWebGLProgram(u,[l],"int32",c);return o||n.disposeIntermediateTensorInfo(l),h}},rD="return -x;",sD={kernelName:Tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,s]=t$(e.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,t)}let s;return s=_e().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new N$(r.shape,rD):new k$(r.shape,rD),n.runWebGLProgram(s,[r],r.dtype)}},aD=d.nonMaxSuppressionV3Impl,iD={kernelName:En,backendName:"webgl",kernelFunc:function(e){p.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=r,u=n.readSync(s.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=aD(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},oD=d.nonMaxSuppressionV4Impl,lD={kernelName:An,backendName:"webgl",kernelFunc:function(e){p.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=r,c=n.readSync(s.dataId),h=n.readSync(a.dataId),{selectedIndices:d,validOutputs:f}=oD(c,h,i,o,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},uD=d.nonMaxSuppressionV5Impl,cD={kernelName:Rn,backendName:"webgl",kernelFunc:function(e){p.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=r,c=n.readSync(s.dataId),h=n.readSync(a.dataId),d=i,f=o,m=l,g=u,{selectedIndices:y,selectedScores:b}=uD(c,h,d,f,m,g);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class hD{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const pD={kernelName:Dn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{depth:i,onValue:o,offValue:l}=s,u=r.sizeFromShape(a.shape),c=new hD(u,i,o,l),h=X$({inputs:{x:a},backend:n,attrs:{shape:[u]}}),p=n.runWebGLProgram(c,[h],a.dtype);n.disposeIntermediateTensorInfo(h);const d=X$({inputs:{x:p},backend:n,attrs:{shape:[...a.shape,i]}});return n.disposeIntermediateTensorInfo(p),d}};function dD(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=oA({inputs:{input:r},backend:n}),t=dD({inputs:{x:e},backend:n}),s=vA({inputs:{input:r},backend:n}),a=dD({inputs:{x:s},backend:n}),i=D$({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}return FR({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const fD={kernelName:Sr,backendName:"webgl",kernelFunc:dD},mD={kernelName:Fn,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=oA({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=vA({inputs:{input:s},backend:r}),i=dD({inputs:{x:a},backend:r}),o=D$({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}return FR({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}},gD={kernelName:_n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return IR({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const i=t[0].shape,o=t[0].dtype;t.forEach(e=>{r.assertShapesMatch(i,e.shape,"All tensors passed to stack must have matching shapes"),r.assert(o===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const l=[],u=CA({inputs:t.map(e=>{const t=IR({inputs:{input:e},backend:n,attrs:{dim:a}});return l.push(t),t}),backend:n,attrs:{axis:a}});return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),u}};class yD{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,s=_T(r),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class bD{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,s=_T(r),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=f$("rc",r),l=f$("source",r),u=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,h=[s+" rc = outputLoc;",`${o[r-1]} += 1;\n       if(${u}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${u}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let f=0,m=1===r?2:4;f<m;f++)d+=`\n        ${h[f]}\n        if (${p}) {\n          result[${f}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${f}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const xD=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:i}=r,o=_e().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new bD(s.shape,a,i):new yD(s.shape,a,i);return n.runWebGLProgram(o,[s],s.dtype)},wD={kernelName:On,backendName:"webgl",kernelFunc:xD},kD=V$({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),vD={kernelName:Mn,backendName:"webgl",kernelFunc:kD},ID={kernelName:zn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:i,keepDims:o}=s,l=a.shape.length,u=[],c=r.parseAxisParam(i,a.shape);let h=c;const d=p.getAxesPermutation(h,l);let f,m=a;if(null!=d&&(m=aE({inputs:{x:a},backend:n,attrs:{perm:d}}),h=p.getInnerMostAxes(h.length,l),u.push(m)),p.assertAxesAreInnerMostDims("prod",h,l),n.shouldExecuteOnCPU([m])){const e=n.texData.get(m.dataId).values,{outVals:t,outShape:r,outDtype:s}=n$(m.shape,m.dtype,e,h);f=n.makeTensorInfo(r,s,t)}else{const[e,t]=p.computeOutAndReduceShapes(m.shape,h),s=r.sizeFromShape(t),i=X$({inputs:{x:m},backend:n,attrs:{shape:[-1,s]}}),o=Q$(i,ds(a.dtype),"prod",n);f=X$({inputs:{x:o},backend:n,attrs:{shape:e}}),u.push(i),u.push(o)}if(o){u.push(f);const e=p.expandShapeToKeepDim(f.shape,c);f=X$({inputs:{x:f},backend:n,attrs:{shape:e}})}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}},ND=e=>{const{backend:t,attrs:n}=e,{start:r,stop:s,step:a,dtype:i}=n,o=r$(r,s,a,i);return t.makeTensorInfo([o.length],i,o)},SD={kernelName:Pn,backendName:"webgl",kernelFunc:ND},CD=W$({opSnippet:"return 1.0 / x;"}),TD={kernelName:Wn,backendName:"webgl",kernelFunc:CD},$D=W$({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),ED={kernelName:Vn,backendName:"webgl",kernelFunc:$D},AD=W$({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),RD={kernelName:Kn,backendName:"webgl",kernelFunc:AD};class FD{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;h=s?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class DD{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;h=s?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const _D={kernelName:jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r,[l,u]=o,c=_e().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new DD(s.shape,l,u,a,i):new FD(s.shape,l,u,a,i);return n.runWebGLProgram(c,[s],"float32")}};class OD{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,i]=e,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const MD={kernelName:qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,o=new OD(a.shape,s.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class LD{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;h=s?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}const zD={kernelName:Gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r,[l,u]=o,c=new LD(s.shape,l,u,a,i);return n.runWebGLProgram(c,[s],s.dtype)}};class PD{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,i]=e,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const BD={kernelName:Hn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,o=new PD(a.shape,s.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class WD{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r)).join(","),s=_T(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class VD{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=f$("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=_T(n);function o(n){const r=e.map((r,s)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:""+r[n]}(s,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(r.slice())};\n          if(${s}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const UD={kernelName:Xn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:i}=s,o=a.shape.length,l=r.parseAxisParam(i,a.shape);if(0===o)return R$({inputs:{x:a},backend:n});const u=_e().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new VD(a.shape,l):new WD(a.shape,l);return n.runWebGLProgram(u,[a],a.dtype)}};class GD{constructor(e,t,n,r){this.variableNames=["Image"],this.outputShape=[];const s=e[1],a=e[2],i=Math.sin(t).toFixed(3),o=Math.cos(t).toFixed(3);this.outputShape=e;const[l,u]=p.getImageCenter(r,s,a),c=l.toFixed(3),h=u.toFixed(3);let d="";d="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${d}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const HD={kernelName:$r,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:i}=t,o=n,l=new GD(r.shape,s,a,i);return o.runWebGLProgram(l,[r],r.dtype)}},jD=W$({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),qD={kernelName:Yn,backendName:"webgl",kernelFunc:jD},KD=W$({opSnippet:"return inversesqrt(x);",cpuKernelImpl:s$}),XD={kernelName:Jn,backendName:"webgl",kernelFunc:KD};class YD{constructor(e,t,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=_T(s.length),l=_T(a.length);let u="";1===n?u="i":2===n&&(u="i, j");let c="";1===r?c="i":2===r&&(c="i, coords[1]"),this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(getIndices(${u}));\n              flattenedIndex += index * ${t>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${c});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const JD={kernelName:Zn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:i}=r,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=p.calculateShapes(a,s,i),d=[h/u,u];if(0===h)return n.makeTensorInfo(i,s.dtype);const f=X$({inputs:{x:s},backend:n,attrs:{shape:[l,o]}}),m=X$({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0])),y=new YD(l,o,f.shape.length,m.shape.length,c,d),b=n.runWebGLProgram(y,[m,f,g],m.dtype),x=X$({inputs:{x:b},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),x}};class ZD{constructor(e,t,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<t.length;r++)i.push(""+n[r]),r<e&&a.push(""+n[r]);r=a.join(),s=i.join()}const a=_T(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}const QD={kernelName:Qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t,i=new ZD(r.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(i,[r,s,a],ps(s.dtype,a.dtype))}},e_=W$({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${p.SELU_SCALEALPHA};\n  float scale = ${p.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),t_={kernelName:er,backendName:"webgl",kernelFunc:e_},n_=W$({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),r_={kernelName:ar,backendName:"webgl",kernelFunc:n_},s_=W$({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),a_={kernelName:sr,backendName:"webgl",kernelFunc:s_},i_=W$({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),o_={kernelName:nr,backendName:"webgl",kernelFunc:i_},l_=W$({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),u_={kernelName:rr,backendName:"webgl",kernelFunc:l_},c_=W$({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),h_={kernelName:ir,backendName:"webgl",kernelFunc:c_},p_={kernelName:ur,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:i,paddings:o}=s;r.assert(a.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const l=i.reduce((e,t)=>e*t),u=[[0,0]];u.push(...o);for(let r=1+i.length;r<a.shape.length;++r)u.push([0,0]);const c=[],h=xD({inputs:{x:a},backend:n,attrs:{paddings:u,constantValue:0}}),d=p.getReshaped(h.shape,i,l,!1),f=p.getPermuted(d.length,i.length,!1),m=p.getReshapedPermuted(h.shape,i,l,!1),g=X$({inputs:{x:h},backend:n,attrs:{shape:d}}),y=aE({inputs:{x:g},backend:n,attrs:{perm:f}}),b=X$({inputs:{x:y},backend:n,attrs:{shape:m}});return c.push(h),c.push(g),c.push(y),c.forEach(e=>n.disposeIntermediateTensorInfo(e)),b}},d_={kernelName:mr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:i}=t,{outputShape:o}=r,{sliceRank:l,numUpdates:u,strides:c,outputSize:h}=p.calculateShapes(a,s,o),d=new YD(u,l,s.shape.length,a.shape.length,c,[h,1],!1),f=n.runWebGLProgram(d,[a,s,i],a.dtype),m=X$({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),m}},f_={kernelName:cr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:i,axis:o}=s,l=r.parseAxisParam(o,a.shape)[0],u=p.prepareSplitSize(a,i,l),c=new Array(a.shape.length).fill(0),h=a.shape.slice();return u.map(e=>{const t=[...h];t[l]=e;const r=tA({inputs:{x:a},backend:n,attrs:{begin:c,size:t}});return c[l]+=e,r})}},m_=W$({opSnippet:"return sqrt(x);"}),g_={kernelName:or,backendName:"webgl",kernelFunc:m_},y_={kernelName:dr,backendName:"webgl",kernelFunc:W$({opSnippet:"return x * x;"})},b_="return (a - b) * (a - b);",x_=V$({opSnippet:b_,packedOpSnippet:b_}),w_={kernelName:pr,backendName:"webgl",kernelFunc:x_},k_={kernelName:Cr,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,s=new k$(r.shape,`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `);return n.runWebGLProgram(s,[r],r.dtype)}};class v_{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=_T(n.length),a=_T(n.length);let i="";if(1===r)i="coords * strides + begin";else{let e=0;i=n.map((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const I_={kernelName:gr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:i,strides:o,beginMask:u,endMask:c,ellipsisMask:h,newAxisMask:p,shrinkAxisMask:d}=r,{nonStrided:f,$begin:m,$strides:g,size:y,newShape:b,outShape:x}=l.sliceInfo(s.shape,a,i,o,u,c,h,p,d),w=X$({inputs:{x:s},backend:n,attrs:{shape:b}});let k;if(f){const e=tA({inputs:{x:w},backend:n,attrs:{begin:m,size:y}});k=X$({inputs:{x:e},backend:n,attrs:{shape:x}}),n.disposeIntermediateTensorInfo(e)}else if(x.some(e=>0===e))k=n.makeTensorInfo(x,s.dtype,[]);else if(n.shouldExecuteOnCPU([w])){const e=n.texData.get(w.dataId),t=Ta(w.shape,w.dtype,e.values),r=o$(x,t,g,m);k=n.makeTensorInfo(x,w.dtype,r.values)}else{const e=new v_(m,g,x);k=n.runWebGLProgram(e,[w],w.dtype)}const v=X$({inputs:{x:k},backend:n,attrs:{shape:x}});return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),v}},N_=W$({opSnippet:"return tan(x);"}),S_={kernelName:yr,backendName:"webgl",kernelFunc:N_},C_=W$({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),T_={kernelName:br,backendName:"webgl",kernelFunc:C_};class $_{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[a]*t[a];this.outputShape=n,this.rank=n.length;const r=_T(this.rank),s=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let s=0;s<e.length;s++)r.push(`imod(${n[s]}, ${e[s]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function E_(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:i}=s;if("string"===a.dtype){const e=n.readSync(a.dataId).map(e=>r.decodeString(e)),t=Ta(a.shape,a.dtype,e),s=u$(t,i);return n.makeTensorInfo(s.shape,s.dtype,s.values)}const o=new $_(a.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}const A_={kernelName:xr,backendName:"webgl",kernelFunc:E_},R_={kernelName:wr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:i}=r,o=n.readSync(s.dataId),[l,u]=c$(o,s.shape,s.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},F_={kernelName:vr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;aT(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=r.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=p$(i,s,a.shape,a.dtype);return[r.makeTensorInfo(l,a.dtype,o),r.makeTensorInfo([u.length],"int32",u)]}},D_={kernelName:Ir,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s,o=i.shape.length,l=s.shape[a],u=new Array(o-1);let c=0;for(let m=0;m<o;m++)m!==a&&(u[c++]=i.shape[m]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(l);for(let m=0;m<f.length;m++){p[a]=m;const e=tA({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),t=X$({inputs:{x:e},backend:n,attrs:{shape:u}});f[m]=t,h.push(e)}return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}};class __{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=e.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const O_=[SF,TF,lE,cE,pE,fE,yE,wE,kE,vE,$E,EE,RE,DE,LE,OE,PE,UE,VE,jE,qE,KE,JE,rA,sA,uA,pA,mA,bA,_$,TA,zA,PA,DA,WA,VA,BA,GA,jA,KA,ZA,QA,tR,oR,lR,sR,cR,pR,fR,mR,yR,xR,vR,NR,TR,AR,DR,OR,zR,BR,UR,HR,jR,KR,YR,ZR,eF,F$,tF,IA,rF,aF,oF,L$,uF,hF,pF,gF,fF,bF,wF,vF,EF,DF,FF,MF,LF,zF,RF,PF,BF,VF,HF,qF,nD,K$,sD,iD,lD,cD,iA,pD,mD,gD,wD,vD,B$,ID,SD,lA,YF,TD,RD,ED,Y$,_D,MD,zD,BD,UD,HD,qD,XD,JD,QD,t_,r_,a_,o_,u_,nA,tD,h_,p_,d_,f_,g_,y_,w_,k_,I_,QF,sE,S_,T_,A_,R_,iE,F_,D_,{kernelName:Nr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:i}=t,{numSegments:o}=s,l=a.shape.length,u=[];let c=0;const h=p.getAxesPermutation([c],l);let d=a;null!=h&&(d=aE({inputs:{x:a},backend:n,attrs:{perm:h}}),u.push(d),c=p.getInnerMostAxes(1,l)[0]);const f=p.segment_util.computeOutShape(d.shape,c,o),m=r.sizeFromShape([d.shape[c]]),g=X$({inputs:{x:d},backend:n,attrs:{shape:[-1,m]}});u.push(g);const y=ds(a.dtype),b=(e,t,r,s,a)=>{const i=e.shape[0],o=e.shape[1],l=p.segment_util.segOpComputeOptimalWindowSize(o,a),c=new __({windowSize:l,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,r],s);if(u.push(h),h.shape[1]===a)return h;const d=ND({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),f=E_({inputs:{x:d},backend:n,attrs:{reps:[o/l]}});return u.push(d),u.push(f),b(h,t,f,s,a)},x=X$({inputs:{x:b(g,"unsortedSegmentSum",i,y,o)},backend:n,attrs:{shape:f}});let w=x;if(null!=h){u.push(x);const e=p.getUndoAxesPermutation(h);w=aE({inputs:{x:w},backend:n,attrs:{perm:e}})}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),w}},fD];for(const aO of O_)Lr(aO);let M_=(()=>{class e{constructor(){}getImageData(e,t){return O(this,void 0,void 0,function*(){const n=document.createElement("canvas"),r=n.getContext("2d");n.width=t,n.height=t;const s=new Promise((n,s)=>{const a=new Image;a.onload=()=>{let e=this.getCanvasRect(t,t,a.width,a.height);r.drawImage(a,e.rectX,e.rectY,e.rectW,e.rectH,0,0,t,t),n(!0)},a.src=e});return yield s,r.getImageData(0,0,t,t)})}getCanvasRect(e,t,n,r){let s=0,a=0,i=n,o=r;return n>r||n==r&&e<t?(i=e*r/t,s=(n-i)/2):(n<r||n==r&&e>t)&&(o=t*n/e,a=(r-o)/2),{rectX:s,rectY:a,rectW:i,rectH:o}}makeImageDataset(e,t,n){return O(this,void 0,void 0,function*(){const r=new ArrayBuffer(e.length*t*t*4*3);for(let s=0;s<e.length;s++){const a=new Float32Array(r,s*t*t*4*3,t*t*3);let i=yield this.getImageData(e[s].image,t);for(let e=0;e<i.data.length/4;e++)a[3*e]=i.data[4*e]/255,a[3*e+1]=i.data[4*e+1]/255,a[3*e+2]=i.data[4*e+2]/255;null==n||n.onProgress((s+1)/e.length)}return new Float32Array(r)})}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275prov=M.Ab({token:e,factory:e.\u0275fac,providedIn:"root"}),e})(),L_=(()=>{class e{constructor(){}makeLabelOneHot(e,t){let n=go(e,1),r=go(ul(0,e.length),1),s=Ji([r,n],1).toInt();return Ol(s,1,Zo([e.length,t]).shape)}makeNewModel(e,t){const n=new Vg(void 0);n.add(f.conv2d({inputShape:[t,t,3],kernelSize:5,filters:8,strides:1,activation:"relu",kernelInitializer:"varianceScaling"})),n.add(f.maxPooling2d({poolSize:[2,2],strides:[2,2]})),n.add(f.conv2d({kernelSize:5,filters:16,strides:1,activation:"relu",kernelInitializer:"varianceScaling"})),n.add(f.maxPooling2d({poolSize:[2,2],strides:[2,2]})),n.add(f.flatten()),n.add(f.dense({units:e,kernelInitializer:"varianceScaling",activation:"softmax"}));const r=zu.adam();return n.compile({optimizer:r,loss:"categoricalCrossentropy",metrics:["accuracy"]}),n}getImagesTensor(e,t,n){return function(e,t,n){if(X(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Ts(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return _s(e,t,r,n)}(e,[t,n,n,3])}trainModel(e,t,n,r){return e.fit(t,n,{batchSize:5,epochs:20,shuffle:!0,callbacks:{onEpochEnd:e=>{null==r||r.onProgress((e+1)/20)}}})}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275prov=M.Ab({token:e,factory:e.\u0275fac,providedIn:"root"}),e})(),z_=(()=>{class e{constructor(e,t){this.imageService=e,this.tfjsService=t,this.imageSideLength=150,this.imageClassList=[],this.modelLabels=[]}getModelLabelList(){return Object(L.a)(this.modelLabels)}getImageClassList(){return Object(L.a)(this.imageClassList)}addImageClass(e){this.imageClassList.push(e)}startTrainTask(e){return O(this,void 0,void 0,function*(){this.modelLabels=this.imageClassList.map(e=>e.label);let t=[],n=[];this.imageClassList.forEach(e=>{e.images.forEach(n=>{t.push({label:e.label,image:n})})}),t.sort(()=>.5-Math.random()),n=t.map(e=>this.modelLabels.indexOf(e.label));let r=yield this.imageService.makeImageDataset(t,this.imageSideLength,{onProgress:t=>{null==e||e.onProgress(parseFloat((.2*t).toFixed(2)))}});const[s,a]=bi(()=>[this.tfjsService.getImagesTensor(r,t.length,this.imageSideLength),this.tfjsService.makeLabelOneHot(n,this.modelLabels.length)]);this.trainModel=this.tfjsService.makeNewModel(this.modelLabels.length,this.imageSideLength),yield this.tfjsService.trainModel(this.trainModel,s,a,{onProgress:t=>{null==e||e.onProgress(parseFloat((.8*t+.2).toFixed(2)))}}),null==e||e.onProgress(1)})}makePredict(e){return O(this,void 0,void 0,function*(){let t=yield this.imageService.makeImageDataset([{image:e}],this.imageSideLength),n=this.tfjsService.getImagesTensor(t,1,this.imageSideLength);const r=this.trainModel.predict(n).dataSync();n.dispose();let s=[];for(let e=0;e<r.length;e++)s.push({label:this.modelLabels[e],value:parseFloat(r[e].toFixed(2))});return s.sort((e,t)=>t.value-e.value),s})}}return e.\u0275fac=function(t){return new(t||e)(M.Lb(M_),M.Lb(L_))},e.\u0275prov=M.Ab({token:e,factory:e.\u0275fac,providedIn:"root"}),e})();var P_=n("7psr");const B_=function(e){return{backgroundImage:e}};function W_(e,t){if(1&e&&(M.Jb(0,"div",5),M.Fb(1,"div",6),M.Fb(2,"div",7),M.Jb(3,"span"),M.Yb(4),M.Ib(),M.Jb(5,"span",8),M.Yb(6),M.Ib(),M.Ib()),2&e){const e=t.$implicit;M.tb(1),M.Rb("ngStyle",M.Sb(7,B_,e.images.length>0?"url("+e.images[0]+")":"unset")),M.tb(1),M.Rb("ngStyle",M.Sb(9,B_,e.images.length>0?"url("+e.images[0]+")":"unset")),M.tb(1),M.vb("item-count ",e.images.length>4?"right":"wrong",""),M.tb(1),M.Zb(e.images.length),M.tb(2),M.Zb(e.label)}}let V_=(()=>{class e{constructor(e,t,n){this.router=e,this.zone=t,this.storeService=n,this.buttonLabel="Start training !",this.buttonProgress=0,this.isTraining=!1,this.imageClassList=[],this.imageExampleLabels=["poodle_dog","british_cat","red_apple"]}get isDataReady(){if(this.imageClassList.length<2)return!1;for(let e=0;e<this.imageClassList.length;e++)if(this.imageClassList[e].images.length<5)return!1;return!0}get actionTips(){let e="Good, it seems like your data is ready \ud83e\udd73";if(0==this.imageClassList.length)e="Add a image class to start \ud83d\udc46";else{this.imageClassList.length<2&&(e="You need at least 2 classes to start training \ud83e\udd14\ufe0f");for(let t=0;t<this.imageClassList.length;t++)if(this.imageClassList[t].images.length<5){e="A class need at least 5 images to be train \ud83e\udd14\ufe0f";break}}return this.isTraining&&(e=""),e}ngOnInit(){this.storeService.getImageClassList().subscribe(e=>this.imageClassList=e),0==this.imageClassList.length&&this.imageExampleLabels.forEach(e=>{let t={label:e,images:[]};for(let n=0;n<10;n++)t.images.push(`./assets/example_images/${e}/${e}_${n}.png`);this.storeService.addImageClass(t)})}testFuc(){this.storeService.addImageClass({label:"1",images:[]})}getActionTipsStatus(){return"right"}startLearnProcess(){return O(this,void 0,void 0,function*(){this.isTraining=!0,yield this.storeService.startTrainTask({onProgress:e=>{(e-this.buttonProgress>.2||1===e)&&this.zone.run(()=>{this.buttonProgress=e})}}),setTimeout(()=>{this.router.navigate(["/playing"]),this.isTraining=!1},1e3)})}}return e.\u0275fac=function(t){return new(t||e)(M.Eb(_.a),M.Eb(M.z),M.Eb(z_))},e.\u0275cmp=M.yb({type:e,selectors:[["app-prepare-data"]],decls:8,vars:9,consts:[[1,"page-title"],[1,"class-list"],["class","class-list-item",4,"ngFor","ngForOf"],[1,"action-line"],[3,"label","type","progress","disable","click"],[1,"class-list-item"],[1,"item-bg",3,"ngStyle"],[1,"item-cover",3,"ngStyle"],[1,"item-label"]],template:function(e,t){1&e&&(M.Jb(0,"h1",0),M.Yb(1,"Prepare Your Data"),M.Ib(),M.Jb(2,"div",1),M.Xb(3,W_,7,11,"div",2),M.Ib(),M.Jb(4,"div",3),M.Jb(5,"p"),M.Yb(6),M.Ib(),M.Jb(7,"app-button",4),M.Ob("click",function(){return t.startLearnProcess()}),M.Ib(),M.Ib()),2&e&&(M.tb(3),M.Rb("ngForOf",t.imageClassList),M.tb(2),M.vb("action-line-tips ",t.isDataReady?"right":"wrong",""),M.tb(1),M.Zb(t.actionTips),M.tb(1),M.Rb("label",t.buttonLabel)("type",t.isTraining?"progress":"normal")("progress",t.buttonProgress)("disable",!t.isDataReady))},directives:[D.h,P_.a,D.j],styles:[".class-list[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap;position:relative;left:-25px;width:100%;height:300px;padding:20px 25px;margin:10px 0;overflow-y:auto}.class-list[_ngcontent-%COMP%]::-webkit-scrollbar{width:4px;background-color:initial}.class-list[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{background-color:var(--color-card);border-radius:2px}.class-list[_ngcontent-%COMP%]   .class-list-item[_ngcontent-%COMP%]{position:relative;width:120px;height:140px;border-radius:25px;margin-right:25px;margin-bottom:20px;cursor:pointer;transition:all .2s ease-out;display:flex;justify-content:center;align-items:center}.class-list[_ngcontent-%COMP%]   .class-list-item[_ngcontent-%COMP%]:hover{transform:scale(1.05)}.class-list[_ngcontent-%COMP%]   .class-list-item[_ngcontent-%COMP%]:hover   .item-bg[_ngcontent-%COMP%]{filter:blur(6px) saturate(150%) brightness(140%)}.class-list[_ngcontent-%COMP%]   .class-list-item[_ngcontent-%COMP%]   .item-bg[_ngcontent-%COMP%]{left:10px;top:6px;width:100px;background-color:#e2e6f1;filter:blur(5px) saturate(130%) brightness(120%);opacity:.6;z-index:0;transition:all .2s ease-in-out}.class-list[_ngcontent-%COMP%]   .class-list-item[_ngcontent-%COMP%]   .item-bg[_ngcontent-%COMP%], .class-list[_ngcontent-%COMP%]   .class-list-item[_ngcontent-%COMP%]   .item-cover[_ngcontent-%COMP%]{position:absolute;height:140px;border-radius:25px;background-size:cover;background-position:50%}.class-list[_ngcontent-%COMP%]   .class-list-item[_ngcontent-%COMP%]   .item-cover[_ngcontent-%COMP%]{left:0;top:0;width:120px;background-color:var(--color-card);z-index:1}.class-list[_ngcontent-%COMP%]   .class-list-item[_ngcontent-%COMP%]   .item-count[_ngcontent-%COMP%]{position:absolute;right:-5px;top:-5px;width:25px;height:25px;border-radius:13px;color:#fff;font-size:14px;font-weight:700;font-family:var(--font-family-main);text-align:center;line-height:25px;z-index:2}.class-list[_ngcontent-%COMP%]   .class-list-item[_ngcontent-%COMP%]   .item-count.right[_ngcontent-%COMP%]{background-color:var(--color-true)}.class-list[_ngcontent-%COMP%]   .class-list-item[_ngcontent-%COMP%]   .item-count.wrong[_ngcontent-%COMP%]{background-color:var(--color-false)}.class-list[_ngcontent-%COMP%]   .class-list-item[_ngcontent-%COMP%]   .item-label[_ngcontent-%COMP%]{padding:3px 8px;border-radius:11px;font-size:12px;font-weight:700;font-family:var(--font-family-main);color:#fff;background-color:rgba(0,0,0,.3);position:absolute;left:10px;bottom:10px;word-break:break-all;max-width:83px;-webkit-backdrop-filter:blur(4px);backdrop-filter:blur(4px);z-index:2}.class-list[_ngcontent-%COMP%]   .class-list-item[_ngcontent-%COMP%]   .item-add[_ngcontent-%COMP%]{position:relative;width:56px;height:56px;z-index:2}.action-line[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:center;justify-content:space-between}.action-line[_ngcontent-%COMP%]   .action-line-tips[_ngcontent-%COMP%]{font-size:var(--font-size-normal);font-family:var(--font-family-main);font-weight:700}.action-line[_ngcontent-%COMP%]   .action-line-tips.right[_ngcontent-%COMP%]{color:var(--color-true)}.action-line[_ngcontent-%COMP%]   .action-line-tips.wrong[_ngcontent-%COMP%]{color:var(--color-false)}"]}),e})();const U_=function(e){return{width:e}};function G_(e,t){if(1&e&&(M.Jb(0,"div"),M.Jb(1,"span",17),M.Yb(2),M.Ib(),M.Jb(3,"div",18),M.Fb(4,"div",19),M.Ib(),M.Ib()),2&e){const e=M.Qb().$implicit,t=M.Qb(2);M.vb("ratio-item ",e.value>=.6?"active":"",""),M.tb(2),M.Zb(e.label),M.tb(2),M.Rb("ngStyle",M.Sb(5,U_,t.showRatioBarAnim?100*e.value+"%":"0%"))}}function H_(e,t){if(1&e&&(M.Hb(0),M.Xb(1,G_,5,7,"div",16),M.Gb()),2&e){const e=t.$implicit,n=t.index;M.tb(1),M.Rb("ngIf",n<2&&0!=e.value)}}function j_(e,t){if(1&e&&(M.Jb(0,"div",14),M.Xb(1,H_,2,1,"ng-container",15),M.Ib()),2&e){const e=M.Qb();M.tb(1),M.Rb("ngForOf",e.predictResultList)}}function q_(e,t){1&e&&(M.Jb(0,"p",20),M.Yb(1,"Now you can choose an image that the model never saw before and let the model guess what item it is \ud83d\ude09"),M.Ib())}function K_(e,t){1&e&&(M.Jb(0,"p",20),M.Yb(1,"Am I right? "),M.Fb(2,"br"),M.Yb(3,"The prediction accurate is affected by various factors, such as the quantities of train data that you provide. "),M.Fb(4,"br"),M.Yb(5,"Since I\u2019m a newbie to MachineLearning and TensorFlow, The image classifier used a very simple model architecture which you can check in the Github. "),M.Fb(6,"br"),M.Fb(7,"br"),M.Yb(8,"This project is inspired by Handwritten digit recognition and Lobe.ai "),M.Ib())}const X_=function(e){return{opacity:e}};let Y_=(()=>{class e{constructor(e){this.storeService=e,this.predictFinish=!1,this.showRatioBarAnim=!1,this.modelLabelList=[],this.predictResultList=[],this.predictImageUrl=""}get classifierImage(){return this.predictImageUrl||"./assets/poodle_dog_guess.png"}get classifierTitle(){let e="Since your model has been trained...";if(this.predictFinish){let t=this.predictResultList[0];e=t.value>=.8?`I think it must be the ${t.label} \ud83d\ude0e!`:t.value>=.6?`Emm...It might be the ${t.label} \ud83e\udd14\ufe0f?`:"Oops...I can't figure it out \ud83e\udd2f"}return e}ngOnInit(){this.storeService.getModelLabelList().subscribe(e=>this.modelLabelList=e)}tryChooseImage(){document.querySelector("#imageInput").click()}predictImageSelected(e){return O(this,void 0,void 0,function*(){this.predictImageUrl&&URL.revokeObjectURL(this.predictImageUrl),this.predictImageUrl=URL.createObjectURL(e.target.files[0]),this.predictResultList=yield this.storeService.makePredict(this.predictImageUrl),this.predictFinish=!0,setTimeout(()=>{this.showRatioBarAnim=!0},100)})}}return e.\u0275fac=function(t){return new(t||e)(M.Eb(z_))},e.\u0275cmp=M.yb({type:e,selectors:[["app-playing-model"]],decls:18,vars:11,consts:[[1,"page-title"],[1,"classifier-container"],[1,"classifier-left"],[1,"classifier-image"],[1,"image-box"],[1,"image-box","image-cover",3,"ngStyle"],[1,"icon"],["class","classifier-ratio",4,"ngIf"],[1,"classifier-right"],[1,"classifier-title"],["class","classifier-content",4,"ngIf"],[1,"classifier-button"],[3,"label","click"],["type","file","name","image","id","imageInput",3,"change"],[1,"classifier-ratio"],[4,"ngFor","ngForOf"],[3,"class",4,"ngIf"],[1,"label"],[1,"bar-outside"],[1,"bar-inside",3,"ngStyle"],[1,"classifier-content"]],template:function(e,t){1&e&&(M.Jb(0,"h1",0),M.Yb(1,"Playing with trained model"),M.Ib(),M.Jb(2,"div",1),M.Jb(3,"div",2),M.Jb(4,"div",3),M.Fb(5,"div",4),M.Jb(6,"div",5),M.Jb(7,"span",6),M.Yb(8,"?"),M.Ib(),M.Ib(),M.Ib(),M.Xb(9,j_,2,1,"div",7),M.Ib(),M.Jb(10,"div",8),M.Jb(11,"p",9),M.Yb(12),M.Ib(),M.Xb(13,q_,2,0,"p",10),M.Xb(14,K_,9,0,"p",10),M.Jb(15,"div",11),M.Jb(16,"app-button",12),M.Ob("click",function(){return t.tryChooseImage()}),M.Ib(),M.Jb(17,"input",13),M.Ob("change",function(e){return t.predictImageSelected(e)}),M.Ib(),M.Ib(),M.Ib(),M.Ib()),2&e&&(M.tb(5),M.Wb("background-image: url(",t.classifierImage,");"),M.tb(1),M.Rb("ngStyle",M.Sb(9,X_,t.predictFinish?"0":"1")),M.tb(3),M.Rb("ngIf",t.predictFinish),M.tb(3),M.Zb(t.classifierTitle),M.tb(1),M.Rb("ngIf",!t.predictFinish),M.tb(1),M.Rb("ngIf",t.predictFinish),M.tb(2),M.Rb("label",t.predictFinish?"Choose another image":"Choose an image"))},directives:[D.j,D.i,P_.a,D.h],styles:[".classifier-container[_ngcontent-%COMP%]{padding:20px 0;display:flex;flex-direction:row}.classifier-container[_ngcontent-%COMP%]   .classifier-left[_ngcontent-%COMP%]   .classifier-image[_ngcontent-%COMP%]{position:relative;width:200px;height:233px;border-radius:25px;overflow:hidden;box-shadow:0 5px 15px rgba(173,194,255,.25098039215686274)}.classifier-container[_ngcontent-%COMP%]   .classifier-left[_ngcontent-%COMP%]   .classifier-image[_ngcontent-%COMP%]   .image-box[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:200px;height:233px;background-size:cover;background-position:50%}.classifier-container[_ngcontent-%COMP%]   .classifier-left[_ngcontent-%COMP%]   .classifier-image[_ngcontent-%COMP%]   .image-cover[_ngcontent-%COMP%]{border-radius:25px;-webkit-backdrop-filter:blur(15px) brightness(110%);backdrop-filter:blur(15px) brightness(110%);display:flex;justify-content:center;align-items:center;opacity:1;transition:all .3s ease-out}.classifier-container[_ngcontent-%COMP%]   .classifier-left[_ngcontent-%COMP%]   .classifier-image[_ngcontent-%COMP%]   .image-cover[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%]{font-size:70px;font-family:var(--font-family-main);font-weight:700;color:hsla(0,0%,100%,.5019607843137255)}.classifier-container[_ngcontent-%COMP%]   .classifier-left[_ngcontent-%COMP%]   .classifier-ratio[_ngcontent-%COMP%]{margin-top:15px;width:200px;border-radius:25px;box-shadow:0 5px 15px rgba(173,194,255,.25098039215686274);background-color:#f4f7ff;overflow:hidden;padding-top:10px;padding-bottom:15px}.classifier-container[_ngcontent-%COMP%]   .classifier-left[_ngcontent-%COMP%]   .classifier-ratio[_ngcontent-%COMP%]   .ratio-item[_ngcontent-%COMP%]{padding:0 9px;margin-bottom:9px}.classifier-container[_ngcontent-%COMP%]   .classifier-left[_ngcontent-%COMP%]   .classifier-ratio[_ngcontent-%COMP%]   .ratio-item[_ngcontent-%COMP%]:last-child{margin-bottom:0}.classifier-container[_ngcontent-%COMP%]   .classifier-left[_ngcontent-%COMP%]   .classifier-ratio[_ngcontent-%COMP%]   .ratio-item.active[_ngcontent-%COMP%]   .label[_ngcontent-%COMP%]{color:var(--color-success)}.classifier-container[_ngcontent-%COMP%]   .classifier-left[_ngcontent-%COMP%]   .classifier-ratio[_ngcontent-%COMP%]   .ratio-item.active[_ngcontent-%COMP%]   .bar-outside[_ngcontent-%COMP%]   .bar-inside[_ngcontent-%COMP%]{background-color:var(--color-success)}.classifier-container[_ngcontent-%COMP%]   .classifier-left[_ngcontent-%COMP%]   .classifier-ratio[_ngcontent-%COMP%]   .ratio-item[_ngcontent-%COMP%]   .label[_ngcontent-%COMP%]{display:block;font-size:14px;color:var(--color-true);font-family:var(--font-family-main);font-weight:700;margin-left:2px;margin-bottom:3px}.classifier-container[_ngcontent-%COMP%]   .classifier-left[_ngcontent-%COMP%]   .classifier-ratio[_ngcontent-%COMP%]   .ratio-item[_ngcontent-%COMP%]   .bar-outside[_ngcontent-%COMP%]{height:11px;border-radius:6px;background-color:#fff;overflow:hidden}.classifier-container[_ngcontent-%COMP%]   .classifier-left[_ngcontent-%COMP%]   .classifier-ratio[_ngcontent-%COMP%]   .ratio-item[_ngcontent-%COMP%]   .bar-outside[_ngcontent-%COMP%]   .bar-inside[_ngcontent-%COMP%]{height:11px;border-radius:6px;width:1%;background-color:var(--color-true);transition:width .3s ease-out}.classifier-container[_ngcontent-%COMP%]   .classifier-right[_ngcontent-%COMP%]{margin-left:30px}.classifier-container[_ngcontent-%COMP%]   .classifier-right[_ngcontent-%COMP%]   .classifier-title[_ngcontent-%COMP%]{font-size:var(--font-size-sub-title);font-weight:700;font-family:var(--font-family-main);color:var(--color-true);margin-bottom:10px}.classifier-container[_ngcontent-%COMP%]   .classifier-right[_ngcontent-%COMP%]   .classifier-content[_ngcontent-%COMP%]{min-height:130px;margin-bottom:15px;font-size:var(--font-size-normal);font-family:var(--font-family-main);color:var(--color-true)}.classifier-container[_ngcontent-%COMP%]   .classifier-right[_ngcontent-%COMP%]   .classifier-button[_ngcontent-%COMP%]{display:inline-block}.classifier-container[_ngcontent-%COMP%]   .classifier-right[_ngcontent-%COMP%]   .classifier-button[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:0;height:0;opacity:0}"]}),e})();const J_=[{path:"",component:V_}];let Z_=(()=>{class e{}return e.\u0275mod=M.Cb({type:e}),e.\u0275inj=M.Bb({factory:function(t){return new(t||e)},imports:[[_.b.forChild(J_)],_.b]}),e})();const Q_=[{path:"",component:Y_}];let eO=(()=>{class e{}return e.\u0275mod=M.Cb({type:e}),e.\u0275inj=M.Bb({factory:function(t){return new(t||e)},imports:[[_.b.forChild(Q_)],_.b]}),e})();var tO=n("j1ZV");let nO=(()=>{class e{}return e.\u0275mod=M.Cb({type:e}),e.\u0275inj=M.Bb({factory:function(t){return new(t||e)},imports:[[D.b,Z_,tO.a]]}),e})(),rO=(()=>{class e{}return e.\u0275mod=M.Cb({type:e}),e.\u0275inj=M.Bb({factory:function(t){return new(t||e)},imports:[[D.b,eO,tO.a]]}),e})()},oIJX:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return l}).call(t,n,t,s))||(s.exports=r):this.tychei=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},pDBr:function(e,t,n){var r=n("YWYm"),s=n("f+t/"),a=n("34t7"),i=n("PkQR"),o=n("5vwH"),l=n("oIJX"),u=n("9/Hw");u.alea=r,u.xor128=s,u.xorwow=a,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},"pJ3+":function(e,t,n){var r;!function(s,a){var i,o=(0,eval)("this"),l=256,u=a.pow(l,6),c=a.pow(2,52),h=2*c,p=255;function d(e,t,n){var r=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(s)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),b(e)}catch(r){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,b(s)]}}():e,3),r),d=new f(r),x=function(){for(var e=d.g(6),t=u,n=0;e<c;)e=(e+n)*l,t*=l,n=d.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|d.g(4)},x.quick=function(){return d.g(4)/4294967296},x.double=x,y(b(d.S),s),(t.pass||n||function(e,t,n,r){return r&&(r.S&&m(r,d),e.state=function(){return m(d,{})}),n?(a.random=e,t):e})(x,p,"global"in t?t.global:this==a,t.state)}function f(e){var t,n=e.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);s<l;)i[s]=s++;for(s=0;s<l;s++)i[s]=i[a=p&a+e[s%n]+(t=i[s])],i[a]=t;(r.g=function(e){for(var t,n=0,s=r.i,a=r.j,i=r.S;e--;)t=i[s=p&s+1],n=n*l+i[p&(i[s]=i[a=p&a+t])+(i[a]=t)];return r.i=s,r.j=a,n})(l)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(g(e[n],t-1))}catch(a){}return r.length?r:"string"==s?e:e+"\0"}function y(e,t){for(var n,r=e+"",s=0;s<r.length;)t[p&s]=p&(n^=19*t[p&s])+r.charCodeAt(s++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(a.seedrandom=d,y(a.random(),s),e.exports){e.exports=d;try{i=n(6)}catch(x){}}else void 0===(r=(function(){return d}).call(t,n,t,e))||(e.exports=r)}([],Math)},pJ6O:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return l}).call(t,n,t,s))||(s.exports=r):this.xorwow=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},uDiL:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return l}).call(t,n,t,s))||(s.exports=r):this.xor128=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))},yuCN:function(e,t,n){(function(e){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],r[s]=n^=(e^=e<<13)^e<<9,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n&&(r[7]=-1),e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n("B9Yq")&&n("PDX0")?void 0===(r=(function(){return l}).call(t,n,t,s))||(s.exports=r):this.xorshift7=l}(0,e,n("B9Yq"))}).call(this,n("YuTi")(e))}}]);